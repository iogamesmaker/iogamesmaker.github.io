(()=>{var e,t,n={1444:(e,t,n)=>{var i={"./de-de.json":293,"./en-uk.json":3730,"./sr-rs.json":3780};function r(e){return Promise.resolve().then((()=>{if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}var r=i[e];return n.t(r,17)}))}r.keys=()=>Object.keys(i),r.id=1444,e.exports=r},8673:(e,t,n)=>{var i={"./de-de.json":293,"./en-uk.json":3730,"./sr-rs.json":3780};function r(e){var t=a(e);return n(t)}function a(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=a,e.exports=r,r.id=8673},7314:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,'.DebugInfoOverlayWrapper{\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  pointer-events: none;\r\n}\r\n\r\n.DebugInfoOverlayWrapper p{\r\n  background-color: #7f7f7faf;\r\n  color: #ffffff;\r\n  font-family: "ESCAPE";\r\n  font-size: 16px;\r\n  margin: 2px 0 0 2px;\r\n  padding: 1px 3px 1px 4px;\r\n  display: inline-block;\r\n}\r\n.DebugInfoOverlayWrapper p::after{\r\n  content: "‎"; /*This string isn\'t empty.*/\r\n}\r\n',""]);const s=o},3382:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,"body{\r\n\tmargin: 0;\r\n}\r\n\r\niframe{\r\n  border: none;\r\n}\r\n",""]);const s=o},5442:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a),s=n(1667),l=n.n(s),c=new URL(n(8123),n.b),h=o()(r()),d=l()(c);h.push([e.id,'@font-face{\r\n  font-family: "ESCAPE";\r\n  src: url('+d+"); /*Use size 13*/\r\n}\r\n",""]);const u=h},6949:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,'.Chat{\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    color: white;\n}\n\n.Chat *:focus {\n    outline: none;\n}\n\n.Chat [contenteditable="true"].single-line {\n    white-space: nowrap;\n    overflow: hidden;\n}\n.Chat [contenteditable="true"].single-line br {\n    display:none;\n\n}\n.Chat [contenteditable="true"].single-line * {\n    display:inline;\n    white-space:nowrap;\n}\n\n.Chat [href]:not([target="_blank"]):hover::before{\n  text-align: left;\n  z-index: 2147483647 !important;\n  position: fixed !important;\n  margin-top: -20px !important;\n  text-transform: none !important;\n  content: "⚠️Clicking this link will probably crash the chat interface." !important;\n  width: 376px;\n  /*left: 50%;\n  transform: translateX(-50%);*/\n\n  font-size: 16px !important;\n  font-family: Escape !important;\n  color: #ffffffff !important;\n  background-color: #0000003f !important;\n  padding: 0 3px 3px 3px !important;\n  backdrop-filter: blur(2px);\n}\n\n\n.Chat .ChatLogWrapper{\n    position: absolute;\n    /*width: calc(100% - 16px);\n    max-width: 800px;*/\n    width: calc(min(100% - 16px, 600px + 30%));\n    left: 8px;\n    bottom: 40px;\n    height: 500px;\n    overflow: auto;\n    scroll-padding:16px;\n}\n.Chat .ChatLog{\n    box-sizing: border-box;\n    background-color: #0000007f;\n    min-height: 500px;\n    word-wrap: break-word;\n    padding: 6px;\n\n\n\n    display: flex;\n    flex-wrap: wrap;\n    align-content: flex-end;\n\n    backdrop-filter: blur(5px);\n}\n\n.Chat .Input{\n    box-sizing: border-box;\n    position: absolute;\n    bottom: 8px;\n    left: 8px;\n    background-color: #0000009f;\n    width: calc(100% - 16px);\n    height: 24px;\n    padding: 4px 6px 4px 6px;\n\n    backdrop-filter: blur(5px);\n}\n\n\n\n.Chat .ChatLog > div{\n    display: block;\n    padding: 1px;\n    width: 100%;\n}',""]);const s=o},4278:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a),s=n(1667),l=n.n(s),c=new URL(n(8793),n.b),h=o()(r()),d=l()(c);h.push([e.id,"body{\r\n  font-family: Escape;\r\n  background-color: #0000007f;\r\n  color: #ffffffff;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nnav > ul{\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  user-select: none;\r\n  font-size: calc(min(32px, calc(max(16px, 2vw)) + 5e16px - 5e16px)); /*Increments font size in steps of 8px, starting from 16px*/\r\n}\r\n\r\nnav > ul > li{\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  padding: 5px;\r\n  border: 2px solid #000000ff;\r\n  border-top: 0;\r\n  border-right: 0;\r\n  text-align: center;\r\n}\r\nnav > ul > li:first-child{\r\n  border-left: 0;\r\n}\r\nnav > ul > li:hover{\r\n  background-color: #00afff3f;\r\n}\r\nnav > ul > li:active{\r\n  background-color: #00afff6f;\r\n}\r\nnav > ul > li.Selected{\r\n  background-color: #00afff7f;\r\n  border-bottom: 0;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6, p{\r\n  font-weight: normal;\r\n  margin-block: 0 .25em;\r\n}\r\n* + h1, * + h2, * + h3, * + h4, * + h5, * + h6, * + p{\r\n  margin-block: .25em;\r\n}\r\nins{\r\n  text-decoration: none;\r\n  transition: color 1s ease-out;\r\n}\r\nins:hover{\r\n  color: #ff6f00;\r\n  transition: none;\r\n}\r\n\r\nins[data-unit]::after{\r\n  content: attr(data-unit);\r\n}\r\n\r\nmain{\r\n  padding: 8px;\r\n}\r\n\r\n.Graphs{\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, 440px);\r\n  align-content: space-around;\r\n  justify-content: space-evenly;\r\n  gap: 10px;\r\n}\r\n\r\n.Graphs > div{\r\n  position: relative;\r\n}\r\n\r\n.Graphs .SettingsImage,\r\n.Graphs h1{\r\n  height: 32px;\r\n  line-height: 32px;\r\n  font-size: 24px;\r\n  margin: 0;\r\n}\r\n.SettingsImage{\r\n  width: 32px;\r\n  background-image: url("+d+");/*linear-gradient(to bottom, #9e9e9e, #454545);*/\r\n  background-size: contain;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n}\r\n.SettingsAndGraphWrapper{\r\n  position: relative;\r\n}\r\n.SettingsAndGraphWrapper > svg{\r\n  overflow: visible;\r\n}\r\n.SettingsMenu{\r\n  opacity: 0;\r\n  background-color: #0000007f;\r\n  height: 100%;\r\n  width: 100%;\r\n  transition: opacity .5s;\r\n  pointer-events: none;\r\n  position: absolute;\r\n  top: 0;\r\n  padding: 8px;\r\n  box-sizing: border-box;\r\n  font-size: 24px;\r\n}\r\n.Graphs .SettingsImage:hover + div > .SettingsMenu,\r\n.SettingsMenu:hover{\r\n  pointer-events: auto;\r\n  opacity: 1;\r\n}\r\n\r\n.SettingsMenu > form{\r\n  display: flex;\r\n  padding: 5px;\r\n}\r\n.SettingsMenu > form:hover{\r\n  backdrop-filter: brightness(.8);\r\n}\r\n.SettingsMenu > form > p{\r\n  flex-grow: 0;\r\n  width: fit-content;\r\n  margin-bottom: 0;\r\n  margin-right: auto;\r\n  line-height: 32px;\r\n}\r\n.SettingsMenu > form > .Slider{\r\n  width: 100px;\r\n  max-width: 150px;\r\n  flex-grow: 1;\r\n  margin-right: 5px;\r\n}\r\n.SettingsMenu > form > .Slider::-webkit-slider-thumb{\r\n  background-color: var(--opaque);\r\n}\r\n.SettingsMenu > form > .TextInput{\r\n  width: 40px;\r\n  max-width: 60px;\r\n  flex-grow: 1;\r\n  background-color: var(--transparent);\r\n  border-color: var(--less-transparent);\r\n}\r\n\r\ninput{\r\n  border: 0;\r\n  outline: 0;\r\n}\r\n\r\n.Slider{\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 200px;\r\n  height: 10px;\r\n  margin-block: 11px;\r\n\r\n  background-color: #cfcfcf7f;\r\n  outline: none;\r\n}\r\n.Slider::-webkit-slider-thumb{\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 10px;\r\n  height: 32px;\r\n  background-color: #007fcfff;\r\n  cursor: e-resize;\r\n}\r\n\r\n.TextInput{\r\n  font-size: 24px;\r\n  font-family: Escape;\r\n  background-color: #007faf9f;\r\n  color: #ffffff;\r\n  border-color: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  box-sizing: border-box;\r\n}\r\n.TextInput::-webkit-outer-spin-button,\r\n.TextInput::-webkit-inner-spin-button{\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/*.SettingsAndGraphWrapper > svg > g > g > g{\r\n  transition: transform .5s ease-in-out;\r\n}*/",""]);const u=h},3877:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,'.Menu.Base *{\r\n  user-select: none;\r\n}\r\n\r\n.Menu.Base {\r\n  backdrop-filter: blur(3px);\r\n  background-color: #000f0f5f;\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  color: white;\r\n}\r\n\r\n.Menu.Base .Title,\r\n.Menu.Base .SubTitle{\r\n  text-align: center;\r\n  font-weight: normal;\r\n}\r\n\r\n.Menu.Base .Title{\r\n  margin-top: 10vh;\r\n  font-size: 80px;\r\n}\r\n\r\n.Menu.Base .SubTitle{\r\n  font-size: 32px;\r\n  margin-top: -20px;\r\n}\r\n\r\n\r\n.Menu.Base .Container{\r\n  max-width: 70%;\r\n  max-height: calc(max(72vh - 132px, 150px));\r\n  margin: auto;\r\n  margin-top: 10vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.Menu.Base .SectionTitle{\r\n  font-size: 48px;\r\n  font-weight: normal;\r\n}\r\n\r\n\r\n.Menu.Base .ButtonInner{\r\n  font-size: 32px;\r\n  text-align: center;\r\n  background-color: #007faf7f;\r\n  padding: 10px;\r\n  margin: 6px;\r\n\r\n  width: calc(30% - 20px);\r\n  box-sizing: border-box;\r\n\r\n  display: flex;\r\n  justify-content: center; /*Just text alignment*/\r\n  align-items: center;\r\n\r\n  border: #007faf7f;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n}\r\n.Menu.Base .ButtonInner:hover{\r\n  background-color: #0087c77f;\r\n}\r\n.Menu.Base .ButtonInner:active{\r\n  background-color: #00afdf7f;\r\n}\r\n\r\n.Menu.Base .Exit{\r\n  position: absolute;\r\n  width: calc(min(400px, 40%));\r\n\r\n  left: 50%;\r\n  transform: translate(-50%, 0);\r\n}\r\n\r\n.Menu.Base span{\r\n  font-size: 32px;\r\n}\r\n\r\n.Menu.Base .PropertyContainer > div{\r\n  padding: 10px;\r\n  position: relative;\r\n}\r\n\r\n.Menu.Base .PropertyContainer > div:hover{\r\n  background-color: #0000002f;\r\n}\r\n.Menu.Base .PropertyContainer > div > span{\r\n  display: inline-block;\r\n  width: 75%;\r\n\r\n  box-sizing: border-box;\r\n  white-space: nowrap;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  vertical-align:top;\r\n}\r\n.Menu.Base .PropertyContainer > div > span + span{\r\n  width: 25%;\r\n}\r\n\r\n.Menu.Base .ComboBox{\r\n  padding: 0px;\r\n  margin: 0px;\r\n  background-color: #007faf9f;\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  position: absolute;\r\n  right: 5px;\r\n  margin-top: -5px;\r\n  padding: 2px;\r\n  width: 25%;\r\n  box-sizing: border-box;\r\n\r\n  font-size: 32px;\r\n  font-family: Escape;\r\n}\r\n\r\n.Menu.Base .ComboBox > span:first-child{\r\n  display: inline-block;\r\n  width: calc(100% - 29px);\r\n  margin-left: 5px;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  vertical-align:top;\r\n}\r\n\r\n.Menu.Base .ComboBox > span + span{\r\n  float: right;\r\n  padding: 0 5px 0 5px;\r\n}\r\n\r\n.Menu.Base .ComboBox > div{\r\n  display: none;\r\n\r\n  font-family: Escape;\r\n  font-size: 32px;\r\n  position: absolute;\r\n  background-color: #007faf3f;\r\n  backdrop-filter: blur(3px);\r\n  right: -3px;\r\n  width: calc(min(450px, 40vw));\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n\r\n\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n\r\n\r\n  z-index: 1; /*!!*/\r\n}\r\n\r\n.Menu.Base .ComboBox > div > div{\r\n  padding: 2px 5px 2px 5px;\r\n  text-align: left;\r\n}\r\n\r\n.Menu.Base .ComboBox > span + span:hover + div,\r\n.Menu.Base .ComboBox > span:first-child:focus + span + div,\r\n.Menu.Base .ComboBox > div:hover{\r\n  display: block;\r\n}\r\n\r\n.Menu.Base .ComboBox > div > div:hover{\r\n  background-color: #0087c73f;\r\n}\r\n\r\n.Menu.Base .ComboBox > div > div:active{\r\n  background-color: #00afdf3f;\r\n}\r\n\r\n.Menu.Base input{\r\n  border: 0;\r\n}\r\n\r\n.Menu.Base .TextInput,\r\n.Menu.Base .KeyInput{\r\n  font-size: 32px;\r\n  font-family: Escape;\r\n  background-color: #007faf9f;\r\n  color: #ffffff;\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  margin-top: -5px;\r\n  padding: 2px;\r\n  position: absolute;\r\n  max-width: calc(25% - 10px);\r\n  min-width: calc(25% - 10px);\r\n}\r\n\r\n.Menu.Base .KeyInput{\r\n  text-align: center;\r\n  caret-color: #00000000;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.Menu.Base .SliderAndTextWrapper{\r\n  position: static;\r\n}\r\n\r\n.Menu.Base .Slider + .TextInput{\r\n  max-width: 7%;\r\n  min-width: 7%;\r\n  right: 5px;\r\n}\r\n\r\n.Menu.Base .TextInput::-webkit-outer-spin-button,\r\n.Menu.Base .TextInput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n.Menu.Base .Slider {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: calc(18% - 16px);/*calc(100% - 2px);*/\r\n  height: 12px;\r\n  background: #cfcfcf7f;\r\n  outline: none;\r\n  position: absolute;\r\n  margin-top: 11px;\r\n  margin-left: 0px;\r\n}\r\n.Menu.Base .Slider::-webkit-slider-thumb {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 12px;\r\n  height: 40px;\r\n  background: #007fcfff;\r\n  cursor: e-resize;\r\n}\r\n\r\n.Menu.Base .Slider:hover + .TextInput,\r\n.Menu.Base .TextInput:hover,\r\n.Menu.Base .KeyInput:hover{\r\n  background-color: #0087c79f;\r\n}\r\n\r\n.Menu.Base .Slider:active + .TextInput,\r\n.Menu.Base .TextInput:active,\r\n.Menu.Base .TextInput:focus,\r\n.Menu.Base .KeyInput:active,\r\n.Menu.Base .KeyInput:focus{\r\n  background-color: #00afdf9f;\r\n}\r\n\r\n\r\n\r\n/* The switch - the box around the slider */\r\n.Menu.Base .SwitchInput {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 66px;\r\n  height: 34px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n/* Hide default HTML checkbox */\r\n.Menu.Base .SwitchInput input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n/* The slider */\r\n.Menu.Base .SwitchSlider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #cfcfcf9f;\r\n  transition: .1s;\r\n}\r\n\r\n.Menu.Base .SwitchSlider:before {\r\n  position: absolute;\r\n  content: "";\r\n  height: 24px;\r\n  width: 24px;\r\n  left: 5px;\r\n  bottom: 5px;\r\n  background-color: #ffffffff;\r\n  transition: .1s;\r\n}\r\n\r\n.Menu.Base input:checked + .SwitchSlider {\r\n  background-color: #0087c7af;\r\n}\r\n\r\n.Menu.Base input:focus + .SwitchSlider {\r\n  box-shadow: 0 0 1px #0087c7af;\r\n}\r\n\r\n.Menu.Base input:checked + .SwitchSlider:before {\r\n  transform: translateX(32px);\r\n}\r\n\r\n.Menu.Base .ButtonOption{\r\n  text-align: center;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  vertical-align:top;\r\n  \r\n  font-size: 32px;\r\n  font-family: Escape;\r\n  background-color: #007faf9f;\r\n  color: #ffffff;\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  margin-top: -5px;\r\n  padding: 2px;\r\n  position: absolute;\r\n  max-width: calc(25% - 10px);\r\n  min-width: calc(25% - 10px);\r\n}\r\n\r\n.Menu.Base .ButtonOption:hover{\r\n  background-color: #0087c79f;\r\n}\r\n\r\n.Menu.Base .ButtonOption:active{\r\n  background-color: #00afdf9f;\r\n}\r\n\r\n.Menu.Base .CenteredButton{\r\n  height: auto;\r\n  position: static;\r\n  margin: -5px auto;\r\n\r\n  max-width: calc(50% - 10px);\r\n  min-width: calc(50% - 10px);\r\n}\r\n',""]);const s=o},6842:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,'.Menu.Main {\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  color: white;\r\n  backdrop-filter: blur(3px);\r\n  background-color: #000f0f5f;\r\n}\r\n\r\n.Menu.Main *{\r\n  user-select: none;\r\n}\r\n\r\n.Menu.Main .Title,\r\n.Menu.Main .SubTitle{\r\n  text-align: center;\r\n  font-weight: normal;\r\n}\r\n\r\n.Menu.Main .Title{\r\n  margin-top: 10vh;\r\n  font-size: 80px;\r\n}\r\n\r\n.Menu.Main .SubTitle{\r\n  font-size: 32px;\r\n  margin-top: -20px;\r\n}\r\n\r\n\r\n.Menu.Main .Container{\r\n  max-width: calc(min(500px, 50%));\r\n  margin: auto;\r\n  margin-top: 5vh;\r\n}\r\n\r\n.Menu.Main .Container {\r\n  display: flex;\r\n  /*align-items: center;*/ /*Fits width and centers vertically.*/\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.Menu.Main .Container > .Button {\r\n  flex: 100%;\r\n}\r\n\r\n.Menu.Main .Button{\r\n  font-size: 32px;\r\n  text-align: center;\r\n  background-color: #007faf7f;\r\n  padding: 10px;\r\n  margin: 6px;\r\n\r\n  width: calc(30% - 20px);\r\n  box-sizing: border-box;\r\n\r\n  display: flex;\r\n  justify-content: center; /*Just text alignment*/\r\n  align-items: center;\r\n\r\n  border: #007faf7f;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n}\r\n.Menu.Main .Button:hover{\r\n  background-color: #0087c77f;\r\n}\r\n.Menu.Main .Button:active{\r\n  background-color: #00afdf7f;\r\n}\r\n\r\n.Menu.Main .QuickAccessContainer{\r\n  font-size: 32px;\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 10px;\r\n}\r\n\r\n.Menu.Main .QuickAccessContainer > span{\r\n  background-color: #0000007f;\r\n  padding: 10px;\r\n}\r\n\r\n.Menu.Main .QuickAccessContainer > span:nth-of-type(1):hover{\r\n  filter: brightness(80%);\r\n  background-color: #0000009f;\r\n}\r\n\r\n\r\n.Menu.Main @keyframes Appear{\r\n  0%{\r\n    margin-left: 0px;\r\n    opacity: 1;\r\n  }\r\n  100%{\r\n    margin-left: 0px;\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.Menu.Main @keyframes Disappear{\r\n  0%{\r\n    margin-left: 0px;\r\n    opacity: 1;\r\n  }\r\n  100%{\r\n    margin-left: 0px;\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.Menu.Main .QuickAccessItemsContainer{\r\n  /*display: none;*/\r\n  margin-left: -9999px;\r\n  font-family: Escape1509;\r\n  font-size: 16px;\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  bottom: calc(100% + 10px);\r\n  background-color: #0000009f;\r\n  width: 400px;\r\n  max-height: 50vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n\r\n.Menu.Main .QuickAccessItemsContainer:not(:hover){\r\n  animation: Disappear 1s normal;\r\n}\r\n\r\n\r\n.Menu.Main .QuickAccessContainer > span:hover + span + .QuickAccessItemsContainer,\r\n.Menu.Main .QuickAccessItemsContainer:hover{\r\n  display: block;\r\n  margin-left: 0px;\r\n  animation: Appear 0s normal forwards cubic-bezier(0, 0, 1, 0);\r\n}\r\n\r\n.Menu.Main .QuickAccessItemsContainer > div{\r\n  padding: 5px;\r\n}\r\n\r\n.Menu.Main .QuickAccessItemsContainer > div:hover{\r\n  background-color: #0000002f;\r\n}\r\n.Menu.Main .QuickAccessItemsContainer > div > span{\r\n  display: inline-block;\r\n  width: 75%;\r\n  white-space: nowrap;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  vertical-align:top;\r\n}\r\n.Menu.Main .QuickAccessItemsContainer > div > span + span{\r\n  width: 25%;\r\n  float: right;\r\n}\r\n\r\n.Menu.Main .ComboBox{\r\n  padding: 0px;\r\n  margin: 0px;\r\n  background-color: #007faf9f;\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  position: absolute;\r\n  margin-top: -2px;\r\n  padding: 2px;\r\n  width: calc(25% - 1px);\r\n  box-sizing: border-box;\r\n\r\n  font-size: 16px;\r\n  font-family: Escape;\r\n}\r\n\r\n.Menu.Main .ComboBox > span:first-child{\r\n  display: inline-block;\r\n  width: calc(100% - 17px);\r\n  margin: 0 5px 0 -5px;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  vertical-align:top;\r\n}\r\n\r\n.Menu.Main .ComboBox > span + span{\r\n  float: right;\r\n  padding: 0 5px 0 5px;\r\n}\r\n\r\n.Menu.Main .ComboBox > div{\r\n  display: none;\r\n\r\n  font-family: Escape;\r\n  font-size: 16px;\r\n  position: absolute;\r\n  background-color: #007faf3f;\r\n  backdrop-filter: blur(3px);\r\n  right: -3px;\r\n  width: 200px;\r\n  max-height: 75px;\r\n  overflow-y: auto;\r\n\r\n\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n\r\n\r\n  z-index: 1; /*!!*/\r\n}\r\n\r\n.Menu.Main .ComboBox > div > div{\r\n  padding: 2px;\r\n  text-align: left;\r\n}\r\n\r\n.Menu.Main .ComboBox > span + span:hover + div,\r\n.Menu.Main .ComboBox > span:first-child:focus + span + div,\r\n.Menu.Main .ComboBox > div:hover{\r\n  display: block;\r\n}\r\n\r\n.Menu.Main .ComboBox > div > div:hover{\r\n  background-color: #0087c73f;\r\n}\r\n\r\n.Menu.Main .ComboBox > div > div:active{\r\n  background-color: #00afdf3f;\r\n}\r\n\r\n.Menu.Main input{\r\n  border: 0;\r\n}\r\n\r\n.Menu.Main .TextInput, .KeyInput{\r\n  font-size: 16px;\r\n  font-family: Escape;\r\n  background-color: #007faf9f;\r\n  color: #ffffff;\r\n  border: #007faf7f;\r\n  border-width: 3px;\r\n  border-style: solid;\r\n  margin-top: -2px;\r\n  padding: 2px;\r\n  position: absolute;\r\n  max-width: calc(25% - 11px);\r\n  min-width: calc(25% - 11px);\r\n}\r\n\r\n.Menu.Main .KeyInput{\r\n  text-align: center;\r\n  caret-color: #00000000;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.Menu.Main .Slider + .TextInput{\r\n  max-width: 7%;\r\n  min-width: 7%;\r\n}\r\n\r\n.Menu.Main .TextInput::-webkit-outer-spin-button,\r\n.Menu.Main .TextInput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n.Menu.Main .Slider {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 59%;/*calc(100% - 2px);*/\r\n  height: 6px;\r\n  background: #cfcfcf7f;\r\n  outline: none;\r\n}\r\n.Menu.Main .Slider::-webkit-slider-thumb {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 6px;\r\n  height: 20px;\r\n  background: #007fcfff;\r\n  cursor: e-resize;\r\n}\r\n\r\n.Menu.Main .Slider:hover + .TextInput,\r\n.Menu.Main .TextInput:hover{\r\n  background-color: #0087c79f;\r\n}\r\n\r\n.Menu.Main .Slider:active + .TextInput,\r\n.Menu.Main .TextInput:active,\r\n.Menu.Main .TextInput:focus{\r\n  background-color: #00afdf9f;\r\n}\r\n\r\n\r\n\r\n/* The switch - the box around the slider */\r\n.Menu.Main .Switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 22px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n/* Hide default HTML checkbox */\r\n.Menu.Main .Switch input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n/* The slider */\r\n.Menu.Main .SwitchSlider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #cfcfcf9f;\r\n  transition: .1s;\r\n}\r\n\r\n.Menu.Main .SwitchSlider:before {\r\n  position: absolute;\r\n  content: "";\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 3px;\r\n  bottom: 3px;\r\n  background-color: #ffffffff;\r\n  transition: .1s;\r\n}\r\n\r\n.Menu.Main input:checked + .SwitchSlider {\r\n  background-color: #0087c7af;\r\n}\r\n\r\n.Menu.Main input:focus + .SwitchSlider {\r\n  box-shadow: 0 0 1px #0087c7af;\r\n}\r\n\r\n.Menu.Main input:checked + .SwitchSlider:before {\r\n  transform: translateX(18px);\r\n}\r\n',""]);const s=o},77:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a),s=n(1667),l=n.n(s),c=new URL(n(5945),n.b),h=o()(r()),d=l()(c);h.push([e.id,".Menu.Options{\r\n  backdrop-filter: blur(3px);\r\n  background-color: #000f0f5f;\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  color: white;\r\n}\r\n\r\n.Menu.Options @font-face {\r\n  font-family: Escape1509;\r\n  src: url("+d+");\r\n}\r\n\r\n.Menu.Options *{\r\n  user-select: none;\r\n}\r\n\r\n.Menu.Options .Title,\r\n.Menu.Options .SubTitle{\r\n  text-align: center;\r\n  font-weight: normal;\r\n}\r\n\r\n.Menu.Options .Title{\r\n  margin-top: 10vh;\r\n  font-size: 80px;\r\n}\r\n\r\n.Menu.Options .SubTitle{\r\n  font-size: 32px;\r\n  margin-top: -20px;\r\n}\r\n\r\n\r\n.Menu.Options .Container{\r\n  max-width: calc(min(800px, 80%));\r\n  margin: auto;\r\n  margin-top: 5vh;\r\n}\r\n\r\n.Menu.Options .Container {\r\n  display: flex;\r\n  /*align-items: center;*/ /*Fits width and centers vertically.*/\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.Menu.Options .Container > .Button {\r\n  flex: 48%;\r\n}\r\n\r\n.Menu.Options .Button{\r\n  font-size: 32px;\r\n  text-align: center;\r\n  background-color: #007faf7f;\r\n  padding: 10px;\r\n  margin: 6px;\r\n\r\n  width: calc(30% - 20px);\r\n  box-sizing: border-box;\r\n\r\n  display: flex;\r\n  justify-content: center; /*Just text alignment*/\r\n  align-items: center;\r\n\r\n  border: #007faf7f;\r\n  border-width: 4px;\r\n  border-style: solid;\r\n}\r\n.Menu.Options .Button:hover{\r\n  background-color: #0087c77f;\r\n}\r\n.Menu.Options .Button:active{\r\n  background-color: #00afdf7f;\r\n}\r\n\r\n.Menu.Options .Exit{\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: calc(min(400px, 40%));\r\n}",""]);const u=h},8043:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a)()(r());o.push([e.id,'.Menu *:focus {\n    outline: none;\n}\n\n.Menu [contenteditable="true"].single-line {\n    white-space: nowrap;\n    overflow: hidden;\n}\n.Menu [contenteditable="true"].single-line br {\n    display:none;\n\n}\n.Menu [contenteditable="true"].single-line * {\n    display:inline;\n    white-space:nowrap;\n}\n\n.Menu {\n    font-family: ESCAPE, sans-serif;\n    font-size: 16px;\n    color: #ffffff;\n}\n\n\n\n.Menu ::-webkit-scrollbar-corner {\n    background: #00000000;\n}\n\n/* Track */\n.Menu ::-webkit-scrollbar {\n    width: 16px;\n    height: 16px;\n    background-color: #00000000; /*!!!!!*/\n}\n\n.Menu ::-webkit-scrollbar-track {\n    display: none;\n    background: #007faf7f;\n    border: solid 2px #007faf7f;\n}\n\n\n/* Thumb */\n.Menu ::-webkit-scrollbar-thumb {\n    background: #007faf7f;\n    border: solid 2px #007faf7f;\n}\n\n.Menu ::-webkit-scrollbar-thumb:hover {\n    background: #0087c77f;\n    border: solid 2px #0087c77f;\n}\n\n.Menu ::-webkit-scrollbar-thumb:active {\n    background: #00afdf7f;\n    border: solid 2px #00afdf7f;\n}\n\n/*Button*/\n\n.Menu ::-webkit-scrollbar-button {\n    display: none;\n}',""]);const s=o},4436:(e,t,n)=>{"use strict";n.d(t,{Z:()=>T});var i=n(8081),r=n.n(i),a=n(3645),o=n.n(a),s=n(1667),l=n.n(s),c=new URL(n(5449),n.b),h=new URL(n(5934),n.b),d=new URL(n(8785),n.b),u=new URL(n(149),n.b),p=new URL(n(1334),n.b),f=new URL(n(4097),n.b),m=new URL(n(3603),n.b),g=new URL(n(4133),n.b),v=o()(r()),x=l()(c),y=l()(h),_=l()(d),M=l()(u),S=l()(p),b=l()(f),w=l()(m),E=l()(g);v.push([e.id,"::-webkit-scrollbar-corner {\r\n    background: #0000007f\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar {\r\n    width: 16px;\r\n    height: 16px;\r\n    background-color: #0000007f; /*!!!!!*/\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n    background: #afafaf5f;\r\n    border: solid 2px #afafaf7f;\r\n}\r\n\r\n\r\n/* Thumb */\r\n::-webkit-scrollbar-thumb {\r\n    background: #7f7f7faf;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #6f6f6faf;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:active {\r\n    background: #4f4f4faf;\r\n}\r\n/*\r\n::-webkit-scrollbar-thumb:vertical{\r\n  border-top: solid 2px rgba(33,33,33,0.5);\r\n  border-bottom: solid 2px rgba(33,33,33,0.5);\r\n}\r\n\r\n::-webkit-scrollbar-thumb:horizontal{\r\n  border-right: solid 2px rgba(33,33,33,0.5);\r\n  border-left: solid 2px rgba(33,33,33,0.5);\r\n}\r\n*/\r\n\r\n/* Buttons */\r\n::-webkit-scrollbar-button {\r\n    border-style: solid;\r\n    height: 16px;\r\n    width: 16px;\r\n}\r\n\r\n\r\n/* Up */\r\n::-webkit-scrollbar-button:vertical:decrement {\r\n    background-color: #afafaf5f;\r\n    border-width: 0;\r\n    background-position: center 4px;\r\n    background-image: url("+x+");\r\n\r\n}\r\n\r\n::-webkit-scrollbar-button:vertical:decrement:hover {\r\n    background-color: #8f8f8f5f;\r\n    background-image: url("+x+");\r\n}\r\n\r\n::-webkit-scrollbar-button:vertical:decrement:active {\r\n    background-color: #2f2f2f9f;\r\n    background-image: url("+y+");\r\n}\r\n\r\n\r\n/* Down */\r\n::-webkit-scrollbar-button:vertical:increment {\r\n    background-color: #afafaf5f;\r\n    border-width: 0;\r\n    background-position: center 4px;\r\n    background-image: url("+_+");\r\n\r\n}\r\n\r\n::-webkit-scrollbar-button:vertical:increment:hover {\r\n    background-color: #8f8f8f5f;\r\n    background-image: url("+_+");\r\n}\r\n\r\n::-webkit-scrollbar-button:vertical:increment:active {\r\n    background-color: #2f2f2f9f;\r\n    background-image: url("+M+");\r\n}\r\n\r\n\r\n/* Left */\r\n::-webkit-scrollbar-button:horizontal:decrement {\r\n    background-color: #afafaf5f;\r\n    border-width: 0;\r\n    background-position: center 4px;\r\n    background-image: url("+S+");\r\n}\r\n\r\n::-webkit-scrollbar-button:horizontal:decrement:hover {\r\n    background-color: #8f8f8f5f;\r\n    background-image: url("+S+");\r\n}\r\n\r\n::-webkit-scrollbar-button:horizontal:decrement:active {\r\n    background-color: #2f2f2f9f;\r\n    background-image: url("+b+");\r\n}\r\n\r\n\r\n/* Right */\r\n::-webkit-scrollbar-button:horizontal:increment {\r\n    background-color: #afafaf5f;\r\n    border-width: 0;\r\n    background-position: center 4px;\r\n    background-image: url("+w+");\r\n}\r\n\r\n::-webkit-scrollbar-button:horizontal:increment:hover {\r\n    background-color: #8f8f8f5f;\r\n    background-image: url("+w+");\r\n}\r\n\r\n::-webkit-scrollbar-button:horizontal:increment:active {\r\n    background-color: #2f2f2f9f;\r\n    background-image: url("+E+");\r\n}\r\n",""]);const T=v},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var h=[].concat(e[c]);i&&o[h[0]]||(void 0!==a&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=a),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),t.push(h))}},t}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},8081:e=>{"use strict";e.exports=function(e){return e[1]}},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],c=i.base?l[0]+i.base:l[0],h=a[c]||0,d="".concat(c," ").concat(h);a[c]=h+1;var u=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=r(p,i);i.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var l=i(e,r),c=0;c<a.length;c++){var h=n(a[c]);0===t[h].references&&(t[h].updater(),t.splice(h,1))}a=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},5934:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%28240, 240, 240, 192%29%27><polygon points=%2710,2 6,6 14,6%27/></svg>"},149:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%28240, 240, 240, 192%29%27><polygon points=%2710,6 6,2 14,2%27/></svg>"},4133:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%28240, 240, 240, 192%29%27><polygon points=%2712,4 8,0 8,8%27/></svg>"},4097:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%28240, 240, 240, 192%29%27><polygon points=%278,4 12,0 12,8%27/></svg>"},5449:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%2832, 32, 32, 192%29%27><polygon points=%2710,2 6,6 14,6%27/></svg>"},8785:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%2832, 32, 32, 192%29%27><polygon points=%2710,6 6,2 14,2%27/></svg>"},3603:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%2832, 32, 32, 192%29%27><polygon points=%2712,4 8,0 8,8%27/></svg>"},1334:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2720%27 height=%2720%27 fill=%27rgba%2832, 32, 32, 192%29%27><polygon points=%278,4 12,0 12,8%27/></svg>"},8123:(e,t,n)=>{"use strict";e.exports=n.p+"79e595578909cbf5da04.ttf"},5945:(e,t,n)=>{"use strict";e.exports=n.p+"2572f85b6e8ff64ef42e.ttf"},8793:(e,t,n)=>{"use strict";e.exports=n.p+"d5db23d7dcf203f22a38.svg"},293:e=>{"use strict";e.exports=JSON.parse('{"Main":{"Paused":"Pausiert","PausedDesc":"Drücken Sie [%KEY:Exit] um zurückzukehren.","BackToGame":"Zurück zum Spiel","Options":"Einstellungen","Restart":"Client neustarten","QuickAccess":"Schnellzugriff"},"Options":{"Options":"Einstellungen","OptionsDesc":"Sie können die Referenz zu einer Einstellung speichern, um sie leichter vom Pausenmenü zu finden.","Controls":"Steuerung","Graphics":"Grafik","World":"Welt","Player":"Spieler","Language":"Sprache","Settings":"Einstellungen","Config":"Konfiguration","Debug":"Debug-Einstellungen","Exit":"Zurück"},"Graphics":{"Graphics":"Grafikeinstellungen","ToggleBackground":"Hitergrund entfernen","General":"Allgemeine Grafikeinstellungen","FOV":"Blickfeld","AO":"Umgebungsverdeckung","UseUpscaling":"Besseres Hochskalieren","UpscalingKernelSize":"Hochskalierungskerngröße","RenderSize":"Bildgröße","CloudSize":"Wolkendetail","CloudCoverage":"Wolkigkeit","Shadows":"Shatten","UseShadows":"Shatten anzeigen","ShadowSteps":"Schattenschritte","ShadowExponent":"Schatten-Exponent","ShadowMultiplier":"Schatten-Faktor","ShadowDarkness":"Dunkelheit von Schatten","PostProcessing":"Nachbearbeitung","FogFactor":"Nebel-Faktor","Exit":"Zurück"},"Controls":{"Controls":"Steuerung","MouseSettings":"Mauseinstellungen","Sensitivity":"Mausempfindlichkeit","InvertY":"Y-Achse umkehren","KeyboardSettings":"Tastatureinstellungen","Forwards":"Vorwärts gehen","Backwards":"Rückwärts gehen","Leftwards":"Nach links gehen","Rightwards":"Nach rechts gehen","Downwards":"Nach unten gehen / schleichen","Upwards":"Nach oben fliegen / springen","BreakBlock":"Block zerstören","PlaceBlock":"Block platzieren / interagieren","PickBlock":"Block wählen","Chat":"Chat-Menü öffnen","Exit":"Zurück"},"World":{"World":"Welt","Seed":"Seed","Reset":"Welt neu-generieren","Performance":"Leistung","MaxUpdatingSegments":"Maximale Segment-uploads pro Frame","Exit":"Zurück"},"Player":{"Player":"Spieler","Speed":"Geschwindigkeit","JumpSpeed":"Sprunggeschwindigkeit","Gravity":"Gravitationsbeschleunigung","AirDrag":"Luftwiderstand","SurfaceDrag":"Luftwiderstand beim Fliegen","Exit":"Zurück"},"Language":{"Language":"Sprache auswählen","Exit":"Zurück"},"Settings":{"Settings":"Einstellungen","ViewDistance":"Sichtweite","LoadDistance":"Maximale Ladeentfernung","VirtualRegionDepths":"Anzahl von virtuellen Regionen","AvgDistance":"Durchschnittliche Sichtweite","ApplyViewSettings":"Auswahl anwenden","Exit":"Zurück"},"Config":{"Config":"Konfiguration","ConfigInfo":"Wird nach einem Neustart wirksam.","Exit":"Zurück"},"Debug":{"Debug":"Debug-Einstellungen","TeleportTitle":"Teleportation","Teleport":"Teleportieren","FlyMode":"Flugmodus","Exit":"Zurück"}}')},3730:e=>{"use strict";e.exports=JSON.parse('{"Main":{"Paused":"Paused","PausedDesc":"Press [%KEY:Exit] to return.","BackToGame":"Back to game","Options":"Options","Restart":"Restart client","QuickAccess":"Quick Access"},"Options":{"Options":"Options","OptionsDesc":"You can pin an option for easy access from the main menu.","Controls":"Controls","Graphics":"Graphics","World":"World","Player":"Player","Language":"Language","Settings":"Settings","Config":"Config","Debug":"Debug Settings","Exit":"Exit"},"Graphics":{"Graphics":"Graphics Settings","ToggleBackground":"Toggle background","General":"General settings","FOV":"Field of vision","AO":"Ambient occlusion","UseUpscaling":"Better upscaling","UpscalingKernelSize":"Upscaling kernel size","RenderSize":"Render size multiplier","CloudSize":"Cloud render size","CloudCoverage":"Cloud coverage","Shadows":"Shadows","UseShadows":"Use shadows","ShadowSteps":"Shadow steps","ShadowExponent":"Shadow exponent","ShadowMultiplier":"Shadow multiplier","ShadowDarkness":"Shadow darkness","PostProcessing":"Post-processing","FogFactor":"Fog factor","Exit":"Exit"},"Controls":{"Controls":"Controls","MouseSettings":"Mouse settings","Sensitivity":"Sensitivity","InvertY":"Invert Y-Axis","KeyboardSettings":"Keyboard settings","Forwards":"Walk forwards","Backwards":"Walk backwards","Leftwards":"Walk leftwards","Rightwards":"Walk rightwards","Downwards":"Go downwards / crouch","Upwards":"Fly upwards / jump","BreakBlock":"Break block","PlaceBlock":"Place block / interact","PickBlock":"Pick block","Chat":"Open chat menu","Exit":"Exit"},"World":{"World":"World","Seed":"Seed","Reset":"Re-generate world","Performance":"Performance","MaxUpdatingSegments":"Maximum segment uploads per frame","Exit":"Exit"},"Player":{"Player":"Player","Speed":"Velocity","JumpSpeed":"Jumping velocity","Gravity":"Gravitational acceleration","AirDrag":"Air resistance","SurfaceDrag":"Flying resistance","Exit":"Exit"},"Language":{"Language":"Select Language","Exit":"Exit"},"Settings":{"Settings":"Settings","ViewDistance":"View Distance","LoadDistance":"Maximum load distance","VirtualRegionDepths":"Virtual region depths","AvgDistance":"Approximate view distance","ApplyViewSettings":"Apply selection","Exit":"Exit"},"Config":{"Config":"Configuration","ConfigInfo":"Will be applied after a restart.","Exit":"Exit"},"Debug":{"Debug":"Debug Settings","TeleportTitle":"Teleportation","Teleport":"Teleport","FlyMode":"Enable flying","Exit":"Exit"}}')},3780:e=>{"use strict";e.exports=JSON.parse('{"Main":{"Paused":"Паузирано","PausedDesc":"Притисните [%KEY:Exit] да би се вратили.","BackToGame":"Настави са игром","Options":"Опције","Restart":"Рестартуј игрицу","QuickAccess":"Запамћене опције"},"Options":{"Options":"Опције","OptionsDesc":"Можете да запамтите опције: видећете их у главној страници.","Controls":"Управљање","Graphics":"Графика","World":"Свет","Player":"Играч","Language":"Језик","Settings":"Подешавања","Config":"Конфигурација","Debug":"Интерна подешавања","Exit":"Назад"},"Graphics":{"Graphics":"Графичка подешавања","ToggleBackground":"Склони позадину","General":"Генерална графичка подешавања","FOV":"Видно поље","AO":"Оклузија околине","UseUpscaling":"Боље увеличавање слике","UpscalingKernelSize":"Фактор увеличавања","RenderSize":"Величина слике","CloudSize":"Резолуција облака","CloudCoverage":"Облачност","Shadows":"Сенке","UseShadows":"Цртати сенке","ShadowSteps":"Кораци сенки","ShadowExponent":"Експонент сенки","ShadowMultiplier":"Фактор сенки","ShadowDarkness":"Замраченост сенки","PostProcessing":"Коначна обрада","FogFactor":"Фактор магле","Exit":"Назад"},"Controls":{"Controls":"Управљање","MouseSettings":"Управљање мишем","Sensitivity":"Осетљивост миша","InvertY":"Обрнута Y-оса","KeyboardSettings":"Управљање тастатуром","Forwards":"Ходај право","Backwards":"Ходај назад","Leftwards":"Ходај лево","Rightwards":"Ходај десно","Downwards":"Иди доле / шуњај","Upwards":"Лети горе / скочи","BreakBlock":"Копај","PlaceBlock":"Смести / интерактуј","PickBlock":"Одабери","Chat":"Отвори разговор","Exit":"Назад"},"World":{"World":"Свет","Seed":"Seed","Reset":"Регенериши свет","Performance":"Перформансе","MaxUpdatingSegments":"Максимални број обновљених сегмената сваког фрејма","Exit":"Назад"},"Player":{"Player":"Играч","Speed":"Брзина","JumpSpeed":"Брзина скока","Gravity":"Гравитационално убрзање","AirDrag":"Отпор ваздуха","SurfaceDrag":"Отпор ваздуха код летења","Exit":"Назад"},"Language":{"Language":"Изабери језик","Exit":"Назад"},"Settings":{"Settings":"Подешавања","ViewDistance":"Видљивост","LoadDistance":"Максимална даљина учитавања","VirtualRegionDepths":"Број виртуалних региона","AvgDistance":"Просечна видљивост","ApplyViewSettings":"Примени","Exit":"Назад"},"Config":{"Config":"Конфигурација","ConfigInfo":"Биће примењено после рестарта.","Exit":"Назад"},"Debug":{"Debug":"Интерна подешавања","TeleportTitle":"Телепортација","Teleport":"Телепортуј се","FlyMode":"Летење","Exit":"Назад"}}')}},i={};function r(e){var t=i[e];if(void 0!==t)return t.exports;var a=i[e]={id:e,exports:{}};return n[e](a,a.exports,r),a.exports}r.m=n,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,i){if(1&i&&(n=this(n)),8&i)return n;if("object"==typeof n&&n){if(4&i&&n.__esModule)return n;if(16&i&&"function"==typeof n.then)return n}var a=Object.create(null);r.r(a);var o={};e=e||[null,t({}),t([]),t(t)];for(var s=2&i&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>o[e]=()=>n[e]));return o.default=()=>n,r.d(a,o),a},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.e=()=>Promise.resolve(),r.u=e=>e+".Bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,r.nc=void 0,(()=>{"use strict";var e={};r.r(e),r.d(e,{Main:()=>Eo,ModConfig:()=>wo});var t={};r.r(t),r.d(t,{Main:()=>Do,ModConfig:()=>Co});var n={};r.r(n),r.d(n,{Main:()=>Po,ModConfig:()=>Io});var i={};r.r(i),r.d(i,{Main:()=>Oo,ModConfig:()=>Fo});var a={};r.r(a),r.d(a,{Chat:()=>os,Main:()=>rs,ModConfig:()=>is});var o={};r.r(o),r.d(o,{Main:()=>pl,ModConfig:()=>ul});var s={};r.r(s),r.d(s,{Main:()=>_l,ModConfig:()=>yl});var l={};r.r(l),r.d(l,{Inspector:()=>Nl,Main:()=>Ol,ModConfig:()=>Fl});var c={};r.r(c),r.d(c,{BlockInteraction:()=>n,Chat:()=>a,DebugInfo:()=>t,Default:()=>i,Inspector:()=>l,Menu:()=>o,SVM:()=>s,SmoothZoom:()=>e});const h=100,d=301,u=302,p=306,f=1e3,m=1001,g=1002,v=1003,x=1006,y=1008,_=1009,M=1012,S=1014,b=1015,w=1016,E=1020,T=1023,R=1026,C=1027,D=1029,A=33776,I=33777,P=33778,L=33779,F=2300,O=2301,N=2302,U=3e3,k=3001,B="srgb",z="srgb-linear",G=7680,H="300 es",V=1035;class W{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)}removeEventListener(e,t){if(void 0===this._listeners)return;const n=this._listeners[e];if(void 0!==n){const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;const t=this._listeners[e.type];if(void 0!==t){e.target=this;const n=t.slice(0);for(let t=0,i=n.length;t<i;t++)n[t].call(this,e);e.target=null}}}const q=[];for(let e=0;e<256;e++)q[e]=(e<16?"0":"")+e.toString(16);const X=Math.PI/180,j=180/Math.PI;function Y(){const e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(q[255&e]+q[e>>8&255]+q[e>>16&255]+q[e>>24&255]+"-"+q[255&t]+q[t>>8&255]+"-"+q[t>>16&15|64]+q[t>>24&255]+"-"+q[63&n|128]+q[n>>8&255]+"-"+q[n>>16&255]+q[n>>24&255]+q[255&i]+q[i>>8&255]+q[i>>16&255]+q[i>>24&255]).toLowerCase()}function Z(e,t,n){return Math.max(t,Math.min(n,e))}function K(e,t,n){return(1-n)*e+n*t}function J(e){return 0==(e&e-1)&&0!==e}function Q(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}class ${constructor(e=0,t=0){this.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*n-a*i+e.x,this.y=r*i+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ee{constructor(){this.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,r,a,o,s,l){const c=this.elements;return c[0]=e,c[1]=i,c[2]=o,c[3]=t,c[4]=r,c[5]=s,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],o=n[3],s=n[6],l=n[1],c=n[4],h=n[7],d=n[2],u=n[5],p=n[8],f=i[0],m=i[3],g=i[6],v=i[1],x=i[4],y=i[7],_=i[2],M=i[5],S=i[8];return r[0]=a*f+o*v+s*_,r[3]=a*m+o*x+s*M,r[6]=a*g+o*y+s*S,r[1]=l*f+c*v+h*_,r[4]=l*m+c*x+h*M,r[7]=l*g+c*y+h*S,r[2]=d*f+u*v+p*_,r[5]=d*m+u*x+p*M,r[8]=d*g+u*y+p*S,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],s=e[6],l=e[7],c=e[8];return t*a*c-t*o*l-n*r*c+n*o*s+i*r*l-i*a*s}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],s=e[6],l=e[7],c=e[8],h=c*a-o*l,d=o*s-c*r,u=l*r-a*s,p=t*h+n*d+i*u;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return e[0]=h*f,e[1]=(i*l-c*n)*f,e[2]=(o*n-i*a)*f,e[3]=d*f,e[4]=(c*t-i*s)*f,e[5]=(i*r-o*t)*f,e[6]=u*f,e[7]=(n*s-l*t)*f,e[8]=(a*t-n*r)*f,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,r,a,o){const s=Math.cos(r),l=Math.sin(r);return this.set(n*s,n*l,-n*(s*a+l*o)+a+e,-i*l,i*s,-i*(-l*a+s*o)+o+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,r=i[0],a=i[3],o=i[6],s=i[1],l=i[4],c=i[7];return i[0]=t*r+n*s,i[3]=t*a+n*l,i[6]=t*o+n*c,i[1]=-n*r+t*s,i[4]=-n*a+t*l,i[7]=-n*o+t*c,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<9;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}}function te(e){for(let t=e.length-1;t>=0;--t)if(e[t]>65535)return!0;return!1}function ne(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function ie(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function re(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const ae={[B]:{[z]:ie},[z]:{[B]:re}},oe={legacyMode:!0,get workingColorSpace(){return z},set workingColorSpace(e){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(e,t,n){if(this.legacyMode||t===n||!t||!n)return e;if(ae[t]&&void 0!==ae[t][n]){const i=ae[t][n];return e.r=i(e.r),e.g=i(e.g),e.b=i(e.b),e}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this.workingColorSpace)}},se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},le={r:0,g:0,b:0},ce={h:0,s:0,l:0},he={h:0,s:0,l:0};function de(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}function ue(e,t){return t.r=e.r,t.g=e.g,t.b=e.b,t}class pe{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t="srgb"){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,oe.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i="srgb-linear"){return this.r=e,this.g=t,this.b=n,oe.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i="srgb-linear"){if(e=(e%(r=1)+r)%r,t=Z(t,0,1),n=Z(n,0,1),0===t)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,r=2*n-i;this.r=de(r,i,e+1/3),this.g=de(r,i,e),this.b=de(r,i,e-1/3)}var r;return oe.toWorkingColorSpace(this,i),this}setStyle(e,t="srgb"){function n(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let e;const r=i[1],a=i[2];switch(r){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(e[1],10))/255,this.g=Math.min(255,parseInt(e[2],10))/255,this.b=Math.min(255,parseInt(e[3],10))/255,oe.toWorkingColorSpace(this,t),n(e[4]),this;if(e=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(e[1],10))/100,this.g=Math.min(100,parseInt(e[2],10))/100,this.b=Math.min(100,parseInt(e[3],10))/100,oe.toWorkingColorSpace(this,t),n(e[4]),this;break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const i=parseFloat(e[1])/360,r=parseInt(e[2],10)/100,a=parseInt(e[3],10)/100;return n(e[4]),this.setHSL(i,r,a,t)}}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const e=i[1],n=e.length;if(3===n)return this.r=parseInt(e.charAt(0)+e.charAt(0),16)/255,this.g=parseInt(e.charAt(1)+e.charAt(1),16)/255,this.b=parseInt(e.charAt(2)+e.charAt(2),16)/255,oe.toWorkingColorSpace(this,t),this;if(6===n)return this.r=parseInt(e.charAt(0)+e.charAt(1),16)/255,this.g=parseInt(e.charAt(2)+e.charAt(3),16)/255,this.b=parseInt(e.charAt(4)+e.charAt(5),16)/255,oe.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}setColorName(e,t="srgb"){const n=se[e.toLowerCase()];return void 0!==n?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=ie(e.r),this.g=ie(e.g),this.b=ie(e.b),this}copyLinearToSRGB(e){return this.r=re(e.r),this.g=re(e.g),this.b=re(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e="srgb"){return oe.fromWorkingColorSpace(ue(this,le),e),Z(255*le.r,0,255)<<16^Z(255*le.g,0,255)<<8^Z(255*le.b,0,255)<<0}getHexString(e="srgb"){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t="srgb-linear"){oe.fromWorkingColorSpace(ue(this,le),t);const n=le.r,i=le.g,r=le.b,a=Math.max(n,i,r),o=Math.min(n,i,r);let s,l;const c=(o+a)/2;if(o===a)s=0,l=0;else{const e=a-o;switch(l=c<=.5?e/(a+o):e/(2-a-o),a){case n:s=(i-r)/e+(i<r?6:0);break;case i:s=(r-n)/e+2;break;case r:s=(n-i)/e+4}s/=6}return e.h=s,e.s=l,e.l=c,e}getRGB(e,t="srgb-linear"){return oe.fromWorkingColorSpace(ue(this,le),t),e.r=le.r,e.g=le.g,e.b=le.b,e}getStyle(e="srgb"){return oe.fromWorkingColorSpace(ue(this,le),e),e!==B?`color(${e} ${le.r} ${le.g} ${le.b})`:`rgb(${255*le.r|0},${255*le.g|0},${255*le.b|0})`}offsetHSL(e,t,n){return this.getHSL(ce),ce.h+=e,ce.s+=t,ce.l+=n,this.setHSL(ce.h,ce.s,ce.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ce),e.getHSL(he);const n=K(ce.h,he.h,t),i=K(ce.s,he.s,t),r=K(ce.l,he.l,t);return this.setHSL(n,i,r),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),!0===e.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}let fe;pe.NAMES=se;class me{static getDataURL(e){if(/^data:/i.test(e.src))return e.src;if("undefined"==typeof HTMLCanvasElement)return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{void 0===fe&&(fe=ne("canvas")),fe.width=e.width,fe.height=e.height;const n=fe.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=fe}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const t=ne("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let e=0;e<r.length;e++)r[e]=255*ie(r[e]/255);return n.putImageData(i,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*ie(t[e]/255)):t[e]=ie(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class ge{constructor(e=null){this.isSource=!0,this.uuid=Y(),this.data=e,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.images[this.uuid])return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let e;if(Array.isArray(i)){e=[];for(let t=0,n=i.length;t<n;t++)i[t].isDataTexture?e.push(ve(i[t].image)):e.push(ve(i[t]))}else e=ve(i);n.url=e}return t||(e.images[this.uuid]=n),n}}function ve(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap?me.getDataURL(e):e.data?{data:Array.prototype.slice.call(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let xe=0;class ye extends W{constructor(e=ye.DEFAULT_IMAGE,t=ye.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,o=1023,s=1009,l=1,c=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:xe++}),this.uuid=Y(),this.name="",this.source=new ge(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=o,this.internalFormat=null,this.type=s,this.offset=new $(0,0),this.repeat=new $(1,1),this.center=new $(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ee,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case f:e.x=e.x-Math.floor(e.x);break;case m:e.x=e.x<0?0:1;break;case g:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case f:e.y=e.y-Math.floor(e.y);break;case m:e.y=e.y<0?0:1;break;case g:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}}ye.DEFAULT_IMAGE=null,ye.DEFAULT_MAPPING=300;class _e{constructor(e=0,t=0,n=0,i=1){this.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const a=.01,o=.1,s=e.elements,l=s[0],c=s[4],h=s[8],d=s[1],u=s[5],p=s[9],f=s[2],m=s[6],g=s[10];if(Math.abs(c-d)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(c+d)<o&&Math.abs(h+f)<o&&Math.abs(p+m)<o&&Math.abs(l+u+g-3)<o)return this.set(1,0,0,0),this;t=Math.PI;const e=(l+1)/2,s=(u+1)/2,v=(g+1)/2,x=(c+d)/4,y=(h+f)/4,_=(p+m)/4;return e>s&&e>v?e<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(e),i=x/n,r=y/n):s>v?s<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(s),n=x/i,r=_/i):v<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=y/r,i=_/r),this.set(n,i,r,t),this}let v=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(d-c)*(d-c));return Math.abs(v)<.001&&(v=1),this.x=(m-p)/v,this.y=(h-f)/v,this.z=(d-c)/v,this.w=Math.acos((l+u+g-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Me extends W{constructor(e,t,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new _e(0,0,e,t),this.scissorTest=!1,this.viewport=new _e(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new ye(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:x,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}setSize(e,t,n=1){this.width===e&&this.height===t&&this.depth===n||(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new ge(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,null!==e.depthTexture&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Se extends ye{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=v,this.minFilter=v,this.wrapR=m,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class be extends ye{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=v,this.minFilter=v,this.wrapR=m,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class we{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,i)}static slerpFlat(e,t,n,i,r,a,o){let s=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const d=r[a+0],u=r[a+1],p=r[a+2],f=r[a+3];if(0===o)return e[t+0]=s,e[t+1]=l,e[t+2]=c,void(e[t+3]=h);if(1===o)return e[t+0]=d,e[t+1]=u,e[t+2]=p,void(e[t+3]=f);if(h!==f||s!==d||l!==u||c!==p){let e=1-o;const t=s*d+l*u+c*p+h*f,n=t>=0?1:-1,i=1-t*t;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,t*n);e=Math.sin(e*a)/r,o=Math.sin(o*a)/r}const r=o*n;if(s=s*e+d*r,l=l*e+u*r,c=c*e+p*r,h=h*e+f*r,e===1-o){const e=1/Math.sqrt(s*s+l*l+c*c+h*h);s*=e,l*=e,c*=e,h*=e}}e[t]=s,e[t+1]=l,e[t+2]=c,e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,i,r,a){const o=n[i],s=n[i+1],l=n[i+2],c=n[i+3],h=r[a],d=r[a+1],u=r[a+2],p=r[a+3];return e[t]=o*p+c*h+s*u-l*d,e[t+1]=s*p+c*d+l*h-o*u,e[t+2]=l*p+c*u+o*d-s*h,e[t+3]=c*p-o*h-s*d-l*u,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,r=e._z,a=e._order,o=Math.cos,s=Math.sin,l=o(n/2),c=o(i/2),h=o(r/2),d=s(n/2),u=s(i/2),p=s(r/2);switch(a){case"XYZ":this._x=d*c*h+l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h-d*u*p;break;case"YXZ":this._x=d*c*h+l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h+d*u*p;break;case"ZXY":this._x=d*c*h-l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h-d*u*p;break;case"ZYX":this._x=d*c*h-l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h+d*u*p;break;case"YZX":this._x=d*c*h+l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h-d*u*p;break;case"XZY":this._x=d*c*h-l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h+d*u*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],a=t[1],o=t[5],s=t[9],l=t[2],c=t[6],h=t[10],d=n+o+h;if(d>0){const e=.5/Math.sqrt(d+1);this._w=.25/e,this._x=(c-s)*e,this._y=(r-l)*e,this._z=(a-i)*e}else if(n>o&&n>h){const e=2*Math.sqrt(1+n-o-h);this._w=(c-s)/e,this._x=.25*e,this._y=(i+a)/e,this._z=(r+l)/e}else if(o>h){const e=2*Math.sqrt(1+o-n-h);this._w=(r-l)/e,this._x=(i+a)/e,this._y=.25*e,this._z=(s+c)/e}else{const e=2*Math.sqrt(1+h-n-o);this._w=(a-i)/e,this._x=(r+l)/e,this._y=(s+c)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Z(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(0===n)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,a=e._w,o=t._x,s=t._y,l=t._z,c=t._w;return this._x=n*c+a*o+i*l-r*s,this._y=i*c+a*s+r*o-n*l,this._z=r*c+a*l+n*s-i*o,this._w=a*c-n*o-i*s-r*l,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);const n=this._x,i=this._y,r=this._z,a=this._w;let o=a*e._w+n*e._x+i*e._y+r*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const s=1-o*o;if(s<=Number.EPSILON){const e=1-t;return this._w=e*a+t*this._w,this._x=e*n+t*this._x,this._y=e*i+t*this._y,this._z=e*r+t*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(s),c=Math.atan2(l,o),h=Math.sin((1-t)*c)/l,d=Math.sin(t*c)/l;return this._w=a*h+this._w*d,this._x=n*h+this._x*d,this._y=i*h+this._y*d,this._z=r*h+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(r),n*Math.cos(r),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Ee{constructor(e=0,t=0,n=0){this.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return void 0===n&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Re.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Re.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,a=e.y,o=e.z,s=e.w,l=s*t+a*i-o*n,c=s*n+o*t-r*i,h=s*i+r*n-a*t,d=-r*t-a*n-o*i;return this.x=l*s+d*-r+c*-o-h*-a,this.y=c*s+d*-a+h*-r-l*-o,this.z=h*s+d*-o+l*-a-c*-r,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,a=t.x,o=t.y,s=t.z;return this.x=i*s-r*o,this.y=r*a-n*s,this.z=n*o-i*a,this}projectOnVector(e){const t=e.lengthSq();if(0===t)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Te.copy(this).projectOnVector(e),this.sub(Te)}reflect(e){return this.sub(Te.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Z(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=2*(Math.random()-.5),t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Te=new Ee,Re=new we;class Ce{constructor(e=new Ee(1/0,1/0,1/0),t=new Ee(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0;for(let s=0,l=e.length;s<l;s+=3){const l=e[s],c=e[s+1],h=e[s+2];l<t&&(t=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>o&&(o=h)}return this.min.set(t,n,i),this.max.set(r,a,o),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0;for(let s=0,l=e.count;s<l;s++){const l=e.getX(s),c=e.getY(s),h=e.getZ(s);l<t&&(t=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>o&&(o=h)}return this.min.set(t,n,i),this.max.set(r,a,o),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Ae.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(void 0!==n)if(t&&null!=n.attributes&&void 0!==n.attributes.position){const t=n.attributes.position;for(let n=0,i=t.count;n<i;n++)Ae.fromBufferAttribute(t,n).applyMatrix4(e.matrixWorld),this.expandByPoint(Ae)}else null===n.boundingBox&&n.computeBoundingBox(),Ie.copy(n.boundingBox),Ie.applyMatrix4(e.matrixWorld),this.union(Ie);const i=e.children;for(let e=0,n=i.length;e<n;e++)this.expandByObject(i[e],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Ae),Ae.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(ke),Be.subVectors(this.max,ke),Pe.subVectors(e.a,ke),Le.subVectors(e.b,ke),Fe.subVectors(e.c,ke),Oe.subVectors(Le,Pe),Ne.subVectors(Fe,Le),Ue.subVectors(Pe,Fe);let t=[0,-Oe.z,Oe.y,0,-Ne.z,Ne.y,0,-Ue.z,Ue.y,Oe.z,0,-Oe.x,Ne.z,0,-Ne.x,Ue.z,0,-Ue.x,-Oe.y,Oe.x,0,-Ne.y,Ne.x,0,-Ue.y,Ue.x,0];return!!He(t,Pe,Le,Fe,Be)&&(t=[1,0,0,0,1,0,0,0,1],!!He(t,Pe,Le,Fe,Be)&&(ze.crossVectors(Oe,Ne),t=[ze.x,ze.y,ze.z],He(t,Pe,Le,Fe,Be)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return Ae.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=.5*this.getSize(Ae).length(),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(De[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),De[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),De[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),De[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),De[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),De[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),De[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),De[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(De)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const De=[new Ee,new Ee,new Ee,new Ee,new Ee,new Ee,new Ee,new Ee],Ae=new Ee,Ie=new Ce,Pe=new Ee,Le=new Ee,Fe=new Ee,Oe=new Ee,Ne=new Ee,Ue=new Ee,ke=new Ee,Be=new Ee,ze=new Ee,Ge=new Ee;function He(e,t,n,i,r){for(let a=0,o=e.length-3;a<=o;a+=3){Ge.fromArray(e,a);const o=r.x*Math.abs(Ge.x)+r.y*Math.abs(Ge.y)+r.z*Math.abs(Ge.z),s=t.dot(Ge),l=n.dot(Ge),c=i.dot(Ge);if(Math.max(-Math.max(s,l,c),Math.min(s,l,c))>o)return!1}return!0}const Ve=new Ce,We=new Ee,qe=new Ee,Xe=new Ee;class je{constructor(e=new Ee,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;void 0!==t?n.copy(t):Ve.setFromPoints(e).getCenter(n);let i=0;for(let t=0,r=e.length;t<r;t++)i=Math.max(i,n.distanceToSquared(e[t]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){Xe.subVectors(e,this.center);const t=Xe.lengthSq();if(t>this.radius*this.radius){const e=Math.sqrt(t),n=.5*(e-this.radius);this.center.add(Xe.multiplyScalar(n/e)),this.radius+=n}return this}union(e){return!0===this.center.equals(e.center)?qe.set(0,0,1).multiplyScalar(e.radius):qe.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(We.copy(e.center).add(qe)),this.expandByPoint(We.copy(e.center).sub(qe)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ye=new Ee,Ze=new Ee,Ke=new Ee,Je=new Ee,Qe=new Ee,$e=new Ee,et=new Ee;class tt{constructor(e=new Ee,t=new Ee(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Ye)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Ye.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Ye.copy(this.direction).multiplyScalar(t).add(this.origin),Ye.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Ze.copy(e).add(t).multiplyScalar(.5),Ke.copy(t).sub(e).normalize(),Je.copy(this.origin).sub(Ze);const r=.5*e.distanceTo(t),a=-this.direction.dot(Ke),o=Je.dot(this.direction),s=-Je.dot(Ke),l=Je.lengthSq(),c=Math.abs(1-a*a);let h,d,u,p;if(c>0)if(h=a*s-o,d=a*o-s,p=r*c,h>=0)if(d>=-p)if(d<=p){const e=1/c;h*=e,d*=e,u=h*(h+a*d+2*o)+d*(a*h+d+2*s)+l}else d=r,h=Math.max(0,-(a*d+o)),u=-h*h+d*(d+2*s)+l;else d=-r,h=Math.max(0,-(a*d+o)),u=-h*h+d*(d+2*s)+l;else d<=-p?(h=Math.max(0,-(-a*r+o)),d=h>0?-r:Math.min(Math.max(-r,-s),r),u=-h*h+d*(d+2*s)+l):d<=p?(h=0,d=Math.min(Math.max(-r,-s),r),u=d*(d+2*s)+l):(h=Math.max(0,-(a*r+o)),d=h>0?r:Math.min(Math.max(-r,-s),r),u=-h*h+d*(d+2*s)+l);else d=a>0?-r:r,h=Math.max(0,-(a*d+o)),u=-h*h+d*(d+2*s)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(Ke).multiplyScalar(d).add(Ze),u}intersectSphere(e,t){Ye.subVectors(e.center,this.origin);const n=Ye.dot(this.direction),i=Ye.dot(Ye)-n*n,r=e.radius*e.radius;if(i>r)return null;const a=Math.sqrt(r-i),o=n-a,s=n+a;return o<0&&s<0?null:o<0?this.at(s,t):this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return null===n?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,r,a,o,s;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,d=this.origin;return l>=0?(n=(e.min.x-d.x)*l,i=(e.max.x-d.x)*l):(n=(e.max.x-d.x)*l,i=(e.min.x-d.x)*l),c>=0?(r=(e.min.y-d.y)*c,a=(e.max.y-d.y)*c):(r=(e.max.y-d.y)*c,a=(e.min.y-d.y)*c),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),h>=0?(o=(e.min.z-d.z)*h,s=(e.max.z-d.z)*h):(o=(e.max.z-d.z)*h,s=(e.min.z-d.z)*h),n>s||o>i?null:((o>n||n!=n)&&(n=o),(s<i||i!=i)&&(i=s),i<0?null:this.at(n>=0?n:i,t)))}intersectsBox(e){return null!==this.intersectBox(e,Ye)}intersectTriangle(e,t,n,i,r){Qe.subVectors(t,e),$e.subVectors(n,e),et.crossVectors(Qe,$e);let a,o=this.direction.dot(et);if(o>0){if(i)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}Je.subVectors(this.origin,e);const s=a*this.direction.dot($e.crossVectors(Je,$e));if(s<0)return null;const l=a*this.direction.dot(Qe.cross(Je));if(l<0)return null;if(s+l>o)return null;const c=-a*Je.dot(et);return c<0?null:this.at(c/o,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class nt{constructor(){this.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,r,a,o,s,l,c,h,d,u,p,f,m){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=o,g[13]=s,g[2]=l,g[6]=c,g[10]=h,g[14]=d,g[3]=u,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new nt).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/it.setFromMatrixColumn(e,0).length(),r=1/it.setFromMatrixColumn(e,1).length(),a=1/it.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,i=e.y,r=e.z,a=Math.cos(n),o=Math.sin(n),s=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===e.order){const e=a*c,n=a*h,i=o*c,r=o*h;t[0]=s*c,t[4]=-s*h,t[8]=l,t[1]=n+i*l,t[5]=e-r*l,t[9]=-o*s,t[2]=r-e*l,t[6]=i+n*l,t[10]=a*s}else if("YXZ"===e.order){const e=s*c,n=s*h,i=l*c,r=l*h;t[0]=e+r*o,t[4]=i*o-n,t[8]=a*l,t[1]=a*h,t[5]=a*c,t[9]=-o,t[2]=n*o-i,t[6]=r+e*o,t[10]=a*s}else if("ZXY"===e.order){const e=s*c,n=s*h,i=l*c,r=l*h;t[0]=e-r*o,t[4]=-a*h,t[8]=i+n*o,t[1]=n+i*o,t[5]=a*c,t[9]=r-e*o,t[2]=-a*l,t[6]=o,t[10]=a*s}else if("ZYX"===e.order){const e=a*c,n=a*h,i=o*c,r=o*h;t[0]=s*c,t[4]=i*l-n,t[8]=e*l+r,t[1]=s*h,t[5]=r*l+e,t[9]=n*l-i,t[2]=-l,t[6]=o*s,t[10]=a*s}else if("YZX"===e.order){const e=a*s,n=a*l,i=o*s,r=o*l;t[0]=s*c,t[4]=r-e*h,t[8]=i*h+n,t[1]=h,t[5]=a*c,t[9]=-o*c,t[2]=-l*c,t[6]=n*h+i,t[10]=e-r*h}else if("XZY"===e.order){const e=a*s,n=a*l,i=o*s,r=o*l;t[0]=s*c,t[4]=-h,t[8]=l*c,t[1]=e*h+r,t[5]=a*c,t[9]=n*h-i,t[2]=i*h-n,t[6]=o*c,t[10]=r*h+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(at,e,ot)}lookAt(e,t,n){const i=this.elements;return ct.subVectors(e,t),0===ct.lengthSq()&&(ct.z=1),ct.normalize(),st.crossVectors(n,ct),0===st.lengthSq()&&(1===Math.abs(n.z)?ct.x+=1e-4:ct.z+=1e-4,ct.normalize(),st.crossVectors(n,ct)),st.normalize(),lt.crossVectors(ct,st),i[0]=st.x,i[4]=lt.x,i[8]=ct.x,i[1]=st.y,i[5]=lt.y,i[9]=ct.y,i[2]=st.z,i[6]=lt.z,i[10]=ct.z,this}multiply(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],o=n[4],s=n[8],l=n[12],c=n[1],h=n[5],d=n[9],u=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],x=n[7],y=n[11],_=n[15],M=i[0],S=i[4],b=i[8],w=i[12],E=i[1],T=i[5],R=i[9],C=i[13],D=i[2],A=i[6],I=i[10],P=i[14],L=i[3],F=i[7],O=i[11],N=i[15];return r[0]=a*M+o*E+s*D+l*L,r[4]=a*S+o*T+s*A+l*F,r[8]=a*b+o*R+s*I+l*O,r[12]=a*w+o*C+s*P+l*N,r[1]=c*M+h*E+d*D+u*L,r[5]=c*S+h*T+d*A+u*F,r[9]=c*b+h*R+d*I+u*O,r[13]=c*w+h*C+d*P+u*N,r[2]=p*M+f*E+m*D+g*L,r[6]=p*S+f*T+m*A+g*F,r[10]=p*b+f*R+m*I+g*O,r[14]=p*w+f*C+m*P+g*N,r[3]=v*M+x*E+y*D+_*L,r[7]=v*S+x*T+y*A+_*F,r[11]=v*b+x*R+y*I+_*O,r[15]=v*w+x*C+y*P+_*N,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],a=e[1],o=e[5],s=e[9],l=e[13],c=e[2],h=e[6],d=e[10],u=e[14];return e[3]*(+r*s*h-i*l*h-r*o*d+n*l*d+i*o*u-n*s*u)+e[7]*(+t*s*u-t*l*d+r*a*d-i*a*u+i*l*c-r*s*c)+e[11]*(+t*l*h-t*o*u-r*a*h+n*a*u+r*o*c-n*l*c)+e[15]*(-i*o*c-t*s*h+t*o*d+i*a*h-n*a*d+n*s*c)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],s=e[6],l=e[7],c=e[8],h=e[9],d=e[10],u=e[11],p=e[12],f=e[13],m=e[14],g=e[15],v=h*m*l-f*d*l+f*s*u-o*m*u-h*s*g+o*d*g,x=p*d*l-c*m*l-p*s*u+a*m*u+c*s*g-a*d*g,y=c*f*l-p*h*l+p*o*u-a*f*u-c*o*g+a*h*g,_=p*h*s-c*f*s-p*o*d+a*f*d+c*o*m-a*h*m,M=t*v+n*x+i*y+r*_;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;return e[0]=v*S,e[1]=(f*d*r-h*m*r-f*i*u+n*m*u+h*i*g-n*d*g)*S,e[2]=(o*m*r-f*s*r+f*i*l-n*m*l-o*i*g+n*s*g)*S,e[3]=(h*s*r-o*d*r-h*i*l+n*d*l+o*i*u-n*s*u)*S,e[4]=x*S,e[5]=(c*m*r-p*d*r+p*i*u-t*m*u-c*i*g+t*d*g)*S,e[6]=(p*s*r-a*m*r-p*i*l+t*m*l+a*i*g-t*s*g)*S,e[7]=(a*d*r-c*s*r+c*i*l-t*d*l-a*i*u+t*s*u)*S,e[8]=y*S,e[9]=(p*h*r-c*f*r-p*n*u+t*f*u+c*n*g-t*h*g)*S,e[10]=(a*f*r-p*o*r+p*n*l-t*f*l-a*n*g+t*o*g)*S,e[11]=(c*o*r-a*h*r-c*n*l+t*h*l+a*n*u-t*o*u)*S,e[12]=_*S,e[13]=(c*f*i-p*h*i+p*n*d-t*f*d-c*n*m+t*h*m)*S,e[14]=(p*o*i-a*f*i-p*n*s+t*f*s+a*n*m-t*o*m)*S,e[15]=(a*h*i-c*o*i+c*n*s-t*h*s-a*n*d+t*o*d)*S,this}scale(e){const t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),r=1-n,a=e.x,o=e.y,s=e.z,l=r*a,c=r*o;return this.set(l*a+n,l*o-i*s,l*s+i*o,0,l*o+i*s,c*o+n,c*s-i*a,0,l*s-i*o,c*s+i*a,r*s*s+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,r,a){return this.set(1,n,r,0,e,1,a,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,r=t._x,a=t._y,o=t._z,s=t._w,l=r+r,c=a+a,h=o+o,d=r*l,u=r*c,p=r*h,f=a*c,m=a*h,g=o*h,v=s*l,x=s*c,y=s*h,_=n.x,M=n.y,S=n.z;return i[0]=(1-(f+g))*_,i[1]=(u+y)*_,i[2]=(p-x)*_,i[3]=0,i[4]=(u-y)*M,i[5]=(1-(d+g))*M,i[6]=(m+v)*M,i[7]=0,i[8]=(p+x)*S,i[9]=(m-v)*S,i[10]=(1-(d+f))*S,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let r=it.set(i[0],i[1],i[2]).length();const a=it.set(i[4],i[5],i[6]).length(),o=it.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],rt.copy(this);const s=1/r,l=1/a,c=1/o;return rt.elements[0]*=s,rt.elements[1]*=s,rt.elements[2]*=s,rt.elements[4]*=l,rt.elements[5]*=l,rt.elements[6]*=l,rt.elements[8]*=c,rt.elements[9]*=c,rt.elements[10]*=c,t.setFromRotationMatrix(rt),n.x=r,n.y=a,n.z=o,this}makePerspective(e,t,n,i,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const o=this.elements,s=2*r/(t-e),l=2*r/(n-i),c=(t+e)/(t-e),h=(n+i)/(n-i),d=-(a+r)/(a-r),u=-2*a*r/(a-r);return o[0]=s,o[4]=0,o[8]=c,o[12]=0,o[1]=0,o[5]=l,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=u,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,r,a){const o=this.elements,s=1/(t-e),l=1/(n-i),c=1/(a-r),h=(t+e)*s,d=(n+i)*l,u=(a+r)*c;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=-2*c,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<16;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const it=new Ee,rt=new nt,at=new Ee(0,0,0),ot=new Ee(1,1,1),st=new Ee,lt=new Ee,ct=new Ee,ht=new nt,dt=new we;class ut{constructor(e=0,t=0,n=0,i=ut.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,r=i[0],a=i[4],o=i[8],s=i[1],l=i[5],c=i[9],h=i[2],d=i[6],u=i[10];switch(t){case"XYZ":this._y=Math.asin(Z(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,u),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(d,l),this._z=0);break;case"YXZ":this._x=Math.asin(-Z(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(o,u),this._z=Math.atan2(s,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(Z(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,u),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(s,r));break;case"ZYX":this._y=Math.asin(-Z(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,u),this._z=Math.atan2(s,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin(Z(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(o,u));break;case"XZY":this._z=Math.asin(-Z(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-c,u),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===n&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return ht.makeRotationFromQuaternion(e),this.setFromRotationMatrix(ht,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return dt.setFromEuler(this),this.setFromQuaternion(dt,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}ut.DefaultOrder="XYZ",ut.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class pt{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return 0!=(this.mask&e.mask)}isEnabled(e){return 0!=(this.mask&(1<<e|0))}}let ft=0;const mt=new Ee,gt=new we,vt=new nt,xt=new Ee,yt=new Ee,_t=new Ee,Mt=new we,St=new Ee(1,0,0),bt=new Ee(0,1,0),wt=new Ee(0,0,1),Et={type:"added"},Tt={type:"removed"};class Rt extends W{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:ft++}),this.uuid=Y(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Rt.DefaultUp.clone();const e=new Ee,t=new ut,n=new we,i=new Ee(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new nt},normalMatrix:{value:new ee}}),this.matrix=new nt,this.matrixWorld=new nt,this.matrixAutoUpdate=Rt.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new pt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return gt.setFromAxisAngle(e,t),this.quaternion.multiply(gt),this}rotateOnWorldAxis(e,t){return gt.setFromAxisAngle(e,t),this.quaternion.premultiply(gt),this}rotateX(e){return this.rotateOnAxis(St,e)}rotateY(e){return this.rotateOnAxis(bt,e)}rotateZ(e){return this.rotateOnAxis(wt,e)}translateOnAxis(e,t){return mt.copy(e).applyQuaternion(this.quaternion),this.position.add(mt.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(St,e)}translateY(e){return this.translateOnAxis(bt,e)}translateZ(e){return this.translateOnAxis(wt,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(vt.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?xt.copy(e):xt.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),yt.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?vt.lookAt(yt,xt,this.up):vt.lookAt(xt,yt,this.up),this.quaternion.setFromRotationMatrix(vt),i&&(vt.extractRotation(i.matrixWorld),gt.setFromRotationMatrix(vt),this.quaternion.premultiply(gt.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(Et)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return-1!==t&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Tt)),this}removeFromParent(){const e=this.parent;return null!==e&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(Tt)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),vt.copy(this.matrixWorld).invert(),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),vt.multiply(e.parent.matrixWorld)),e.applyMatrix4(vt),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(e,t);if(void 0!==i)return i}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(yt,e,_t),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(yt,Mt,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const e=this.children;for(let t=0,n=e.length;t<n;t++)e[t].updateWorldMatrix(!1,!0)}}toJSON(e){const t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};function r(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const n=t.shapes;if(Array.isArray(n))for(let t=0,i=n.length;t<i;t++){const i=n[t];r(e.shapes,i)}else r(e.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let n=0,i=this.material.length;n<i;n++)t.push(r(e.materials,this.material[n]));i.material=t}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let t=0;t<this.children.length;t++)i.children.push(this.children[t].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let t=0;t<this.animations.length;t++){const n=this.animations[t];i.animations.push(r(e.animations,n))}}if(t){const t=a(e.geometries),i=a(e.materials),r=a(e.textures),o=a(e.images),s=a(e.shapes),l=a(e.skeletons),c=a(e.animations),h=a(e.nodes);t.length>0&&(n.geometries=t),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),o.length>0&&(n.images=o),s.length>0&&(n.shapes=s),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function a(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(let t=0;t<e.children.length;t++){const n=e.children[t];this.add(n.clone())}return this}}Rt.DefaultUp=new Ee(0,1,0),Rt.DefaultMatrixAutoUpdate=!0;const Ct=new Ee,Dt=new Ee,At=new Ee,It=new Ee,Pt=new Ee,Lt=new Ee,Ft=new Ee,Ot=new Ee,Nt=new Ee,Ut=new Ee;class kt{constructor(e=new Ee,t=new Ee,n=new Ee){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Ct.subVectors(e,t),i.cross(Ct);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(e,t,n,i,r){Ct.subVectors(i,t),Dt.subVectors(n,t),At.subVectors(e,t);const a=Ct.dot(Ct),o=Ct.dot(Dt),s=Ct.dot(At),l=Dt.dot(Dt),c=Dt.dot(At),h=a*l-o*o;if(0===h)return r.set(-2,-1,-1);const d=1/h,u=(l*s-o*c)*d,p=(a*c-o*s)*d;return r.set(1-u-p,p,u)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,It),It.x>=0&&It.y>=0&&It.x+It.y<=1}static getUV(e,t,n,i,r,a,o,s){return this.getBarycoord(e,t,n,i,It),s.set(0,0),s.addScaledVector(r,It.x),s.addScaledVector(a,It.y),s.addScaledVector(o,It.z),s}static isFrontFacing(e,t,n,i){return Ct.subVectors(n,t),Dt.subVectors(e,t),Ct.cross(Dt).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Ct.subVectors(this.c,this.b),Dt.subVectors(this.a,this.b),.5*Ct.cross(Dt).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return kt.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return kt.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,r){return kt.getUV(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return kt.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return kt.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let a,o;Pt.subVectors(i,n),Lt.subVectors(r,n),Ot.subVectors(e,n);const s=Pt.dot(Ot),l=Lt.dot(Ot);if(s<=0&&l<=0)return t.copy(n);Nt.subVectors(e,i);const c=Pt.dot(Nt),h=Lt.dot(Nt);if(c>=0&&h<=c)return t.copy(i);const d=s*h-c*l;if(d<=0&&s>=0&&c<=0)return a=s/(s-c),t.copy(n).addScaledVector(Pt,a);Ut.subVectors(e,r);const u=Pt.dot(Ut),p=Lt.dot(Ut);if(p>=0&&u<=p)return t.copy(r);const f=u*l-s*p;if(f<=0&&l>=0&&p<=0)return o=l/(l-p),t.copy(n).addScaledVector(Lt,o);const m=c*p-u*h;if(m<=0&&h-c>=0&&u-p>=0)return Ft.subVectors(r,i),o=(h-c)/(h-c+(u-p)),t.copy(i).addScaledVector(Ft,o);const g=1/(m+f+d);return a=f*g,o=d*g,t.copy(n).addScaledVector(Pt,a).addScaledVector(Lt,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let Bt=0;class zt extends W{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Bt++}),this.uuid=Y(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=h,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=G,this.stencilZFail=G,this.stencilZPass=G,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if("shading"===t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;continue}const i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t){const t=i(e.textures),r=i(e.images);t.length>0&&(n.textures=t),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(null!==t){const e=t.length;n=new Array(e);for(let i=0;i!==e;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}get vertexTangents(){return console.warn("THREE."+this.type+": .vertexTangents has been removed."),!1}set vertexTangents(e){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}zt.fromType=function(){return null};class Gt extends zt{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new pe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Ht=new Ee,Vt=new $;class Wt{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new pe),t[n++]=r.r,t[n++]=r.g,t[n++]=r.b}return this}copyVector2sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new $),t[n++]=r.x,t[n++]=r.y}return this}copyVector3sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new Ee),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new _e),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z,t[n++]=r.w}return this}applyMatrix3(e){if(2===this.itemSize)for(let t=0,n=this.count;t<n;t++)Vt.fromBufferAttribute(this,t),Vt.applyMatrix3(e),this.setXY(t,Vt.x,Vt.y);else if(3===this.itemSize)for(let t=0,n=this.count;t<n;t++)Ht.fromBufferAttribute(this,t),Ht.applyMatrix3(e),this.setXYZ(t,Ht.x,Ht.y,Ht.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Ht.fromBufferAttribute(this,t),Ht.applyMatrix4(e),this.setXYZ(t,Ht.x,Ht.y,Ht.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Ht.fromBufferAttribute(this,t),Ht.applyNormalMatrix(e),this.setXYZ(t,Ht.x,Ht.y,Ht.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Ht.fromBufferAttribute(this,t),Ht.transformDirection(e),this.setXYZ(t,Ht.x,Ht.y,Ht.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(e.name=this.name),35044!==this.usage&&(e.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(e.updateRange=this.updateRange),e}}class qt extends Wt{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Xt extends Wt{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class jt extends Wt{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Yt=0;const Zt=new nt,Kt=new Rt,Jt=new Ee,Qt=new Ce,$t=new Ce,en=new Ee;class tn extends W{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Yt++}),this.uuid=Y(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(te(e)?Xt:qt)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const t=(new ee).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(e),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(e){return Zt.makeRotationFromQuaternion(e),this.applyMatrix4(Zt),this}rotateX(e){return Zt.makeRotationX(e),this.applyMatrix4(Zt),this}rotateY(e){return Zt.makeRotationY(e),this.applyMatrix4(Zt),this}rotateZ(e){return Zt.makeRotationZ(e),this.applyMatrix4(Zt),this}translate(e,t,n){return Zt.makeTranslation(e,t,n),this.applyMatrix4(Zt),this}scale(e,t,n){return Zt.makeScale(e,t,n),this.applyMatrix4(Zt),this}lookAt(e){return Kt.lookAt(e),Kt.updateMatrix(),this.applyMatrix4(Kt.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Jt).negate(),this.translate(Jt.x,Jt.y,Jt.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const i=e[n];t.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new jt(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ce);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Ee(-1/0,-1/0,-1/0),new Ee(1/0,1/0,1/0));if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(let e=0,n=t.length;e<n;e++){const n=t[e];Qt.setFromBufferAttribute(n),this.morphTargetsRelative?(en.addVectors(this.boundingBox.min,Qt.min),this.boundingBox.expandByPoint(en),en.addVectors(this.boundingBox.max,Qt.max),this.boundingBox.expandByPoint(en)):(this.boundingBox.expandByPoint(Qt.min),this.boundingBox.expandByPoint(Qt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new je);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Ee,1/0);if(e){const n=this.boundingSphere.center;if(Qt.setFromBufferAttribute(e),t)for(let e=0,n=t.length;e<n;e++){const n=t[e];$t.setFromBufferAttribute(n),this.morphTargetsRelative?(en.addVectors(Qt.min,$t.min),Qt.expandByPoint(en),en.addVectors(Qt.max,$t.max),Qt.expandByPoint(en)):(Qt.expandByPoint($t.min),Qt.expandByPoint($t.max))}Qt.getCenter(n);let i=0;for(let t=0,r=e.count;t<r;t++)en.fromBufferAttribute(e,t),i=Math.max(i,n.distanceToSquared(en));if(t)for(let r=0,a=t.length;r<a;r++){const a=t[r],o=this.morphTargetsRelative;for(let t=0,r=a.count;t<r;t++)en.fromBufferAttribute(a,t),o&&(Jt.fromBufferAttribute(e,t),en.add(Jt)),i=Math.max(i,n.distanceToSquared(en))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.array,i=t.position.array,r=t.normal.array,a=t.uv.array,o=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new Wt(new Float32Array(4*o),4));const s=this.getAttribute("tangent").array,l=[],c=[];for(let e=0;e<o;e++)l[e]=new Ee,c[e]=new Ee;const h=new Ee,d=new Ee,u=new Ee,p=new $,f=new $,m=new $,g=new Ee,v=new Ee;function x(e,t,n){h.fromArray(i,3*e),d.fromArray(i,3*t),u.fromArray(i,3*n),p.fromArray(a,2*e),f.fromArray(a,2*t),m.fromArray(a,2*n),d.sub(h),u.sub(h),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(d).multiplyScalar(m.y).addScaledVector(u,-f.y).multiplyScalar(r),v.copy(u).multiplyScalar(f.x).addScaledVector(d,-m.x).multiplyScalar(r),l[e].add(g),l[t].add(g),l[n].add(g),c[e].add(v),c[t].add(v),c[n].add(v))}let y=this.groups;0===y.length&&(y=[{start:0,count:n.length}]);for(let e=0,t=y.length;e<t;++e){const t=y[e],i=t.start;for(let e=i,r=i+t.count;e<r;e+=3)x(n[e+0],n[e+1],n[e+2])}const _=new Ee,M=new Ee,S=new Ee,b=new Ee;function w(e){S.fromArray(r,3*e),b.copy(S);const t=l[e];_.copy(t),_.sub(S.multiplyScalar(S.dot(t))).normalize(),M.crossVectors(b,t);const n=M.dot(c[e])<0?-1:1;s[4*e]=_.x,s[4*e+1]=_.y,s[4*e+2]=_.z,s[4*e+3]=n}for(let e=0,t=y.length;e<t;++e){const t=y[e],i=t.start;for(let e=i,r=i+t.count;e<r;e+=3)w(n[e+0]),w(n[e+1]),w(n[e+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(void 0!==t){let n=this.getAttribute("normal");if(void 0===n)n=new Wt(new Float32Array(3*t.count),3),this.setAttribute("normal",n);else for(let e=0,t=n.count;e<t;e++)n.setXYZ(e,0,0,0);const i=new Ee,r=new Ee,a=new Ee,o=new Ee,s=new Ee,l=new Ee,c=new Ee,h=new Ee;if(e)for(let d=0,u=e.count;d<u;d+=3){const u=e.getX(d+0),p=e.getX(d+1),f=e.getX(d+2);i.fromBufferAttribute(t,u),r.fromBufferAttribute(t,p),a.fromBufferAttribute(t,f),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),o.fromBufferAttribute(n,u),s.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),o.add(c),s.add(c),l.add(c),n.setXYZ(u,o.x,o.y,o.z),n.setXYZ(p,s.x,s.y,s.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let e=0,o=t.count;e<o;e+=3)i.fromBufferAttribute(t,e+0),r.fromBufferAttribute(t,e+1),a.fromBufferAttribute(t,e+2),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),n.setXYZ(e+0,c.x,c.y,c.z),n.setXYZ(e+1,c.x,c.y,c.z),n.setXYZ(e+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(e,t){if(!e||!e.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(void 0===e.attributes[i])continue;const r=n[i].array,a=e.attributes[i],o=a.array,s=a.itemSize*t,l=Math.min(o.length,r.length-s);for(let e=0,t=s;e<l;e++,t++)r[t]=o[e]}return this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)en.fromBufferAttribute(e,t),en.normalize(),e.setXYZ(t,en.x,en.y,en.z)}toNonIndexed(){function e(e,t){const n=e.array,i=e.itemSize,r=e.normalized,a=new n.constructor(t.length*i);let o=0,s=0;for(let r=0,l=t.length;r<l;r++){o=e.isInterleavedBufferAttribute?t[r]*e.data.stride+e.offset:t[r]*i;for(let e=0;e<i;e++)a[s++]=n[o++]}return new Wt(a,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new tn,n=this.index.array,i=this.attributes;for(const r in i){const a=e(i[r],n);t.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const a=[],o=r[i];for(let t=0,i=o.length;t<i;t++){const i=e(o[t],n);a.push(i)}t.morphAttributes[i]=a}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let e=0,n=a.length;e<n;e++){const n=a[e];t.addGroup(n.start,n.count,n.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;null!==t&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const t in n){const i=n[t];e.data.attributes[t]=i.toJSON(e.data)}const i={};let r=!1;for(const t in this.morphAttributes){const n=this.morphAttributes[t],a=[];for(let t=0,i=n.length;t<i;t++){const i=n[t];a.push(i.toJSON(e.data))}a.length>0&&(i[t]=a,r=!0)}r&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return null!==o&&(e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;null!==n&&this.setIndex(n.clone(t));const i=e.attributes;for(const e in i){const n=i[e];this.setAttribute(e,n.clone(t))}const r=e.morphAttributes;for(const e in r){const n=[],i=r[e];for(let e=0,r=i.length;e<r;e++)n.push(i[e].clone(t));this.morphAttributes[e]=n}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let e=0,t=a.length;e<t;e++){const t=a[e];this.addGroup(t.start,t.count,t.materialIndex)}const o=e.boundingBox;null!==o&&(this.boundingBox=o.clone());const s=e.boundingSphere;return null!==s&&(this.boundingSphere=s.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,void 0!==e.parameters&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const nn=new nt,rn=new tt,an=new je,on=new Ee,sn=new Ee,ln=new Ee,cn=new Ee,hn=new Ee,dn=new Ee,un=new Ee,pn=new Ee,fn=new Ee,mn=new $,gn=new $,vn=new $,xn=new Ee,yn=new Ee;class _n extends Rt{constructor(e=new tn,t=new Gt){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}raycast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),an.copy(n.boundingSphere),an.applyMatrix4(r),!1===e.ray.intersectsSphere(an))return;if(nn.copy(r).invert(),rn.copy(e.ray).applyMatrix4(nn),null!==n.boundingBox&&!1===rn.intersectsBox(n.boundingBox))return;let a;const o=n.index,s=n.attributes.position,l=n.morphAttributes.position,c=n.morphTargetsRelative,h=n.attributes.uv,d=n.attributes.uv2,u=n.groups,p=n.drawRange;if(null!==o)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],f=i[r.materialIndex];for(let n=Math.max(r.start,p.start),i=Math.min(o.count,Math.min(r.start+r.count,p.start+p.count));n<i;n+=3){const i=o.getX(n),u=o.getX(n+1),p=o.getX(n+2);a=Mn(this,f,e,rn,s,l,c,h,d,i,u,p),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=r.materialIndex,t.push(a))}}else for(let n=Math.max(0,p.start),r=Math.min(o.count,p.start+p.count);n<r;n+=3){const r=o.getX(n),u=o.getX(n+1),p=o.getX(n+2);a=Mn(this,i,e,rn,s,l,c,h,d,r,u,p),a&&(a.faceIndex=Math.floor(n/3),t.push(a))}else if(void 0!==s)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],o=i[r.materialIndex];for(let n=Math.max(r.start,p.start),i=Math.min(s.count,Math.min(r.start+r.count,p.start+p.count));n<i;n+=3)a=Mn(this,o,e,rn,s,l,c,h,d,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=r.materialIndex,t.push(a))}else for(let n=Math.max(0,p.start),r=Math.min(s.count,p.start+p.count);n<r;n+=3)a=Mn(this,i,e,rn,s,l,c,h,d,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),t.push(a))}}function Mn(e,t,n,i,r,a,o,s,l,c,h,d){on.fromBufferAttribute(r,c),sn.fromBufferAttribute(r,h),ln.fromBufferAttribute(r,d);const u=e.morphTargetInfluences;if(a&&u){un.set(0,0,0),pn.set(0,0,0),fn.set(0,0,0);for(let e=0,t=a.length;e<t;e++){const t=u[e],n=a[e];0!==t&&(cn.fromBufferAttribute(n,c),hn.fromBufferAttribute(n,h),dn.fromBufferAttribute(n,d),o?(un.addScaledVector(cn,t),pn.addScaledVector(hn,t),fn.addScaledVector(dn,t)):(un.addScaledVector(cn.sub(on),t),pn.addScaledVector(hn.sub(sn),t),fn.addScaledVector(dn.sub(ln),t)))}on.add(un),sn.add(pn),ln.add(fn)}e.isSkinnedMesh&&(e.boneTransform(c,on),e.boneTransform(h,sn),e.boneTransform(d,ln));const p=function(e,t,n,i,r,a,o,s){let l;if(l=1===t.side?i.intersectTriangle(o,a,r,!0,s):i.intersectTriangle(r,a,o,2!==t.side,s),null===l)return null;yn.copy(s),yn.applyMatrix4(e.matrixWorld);const c=n.ray.origin.distanceTo(yn);return c<n.near||c>n.far?null:{distance:c,point:yn.clone(),object:e}}(e,t,n,i,on,sn,ln,xn);if(p){s&&(mn.fromBufferAttribute(s,c),gn.fromBufferAttribute(s,h),vn.fromBufferAttribute(s,d),p.uv=kt.getUV(xn,on,sn,ln,mn,gn,vn,new $)),l&&(mn.fromBufferAttribute(l,c),gn.fromBufferAttribute(l,h),vn.fromBufferAttribute(l,d),p.uv2=kt.getUV(xn,on,sn,ln,mn,gn,vn,new $));const e={a:c,b:h,c:d,normal:new Ee,materialIndex:0};kt.getNormal(on,sn,ln,e.normal),p.face=e}return p}class Sn extends tn{constructor(e=1,t=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const o=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const s=[],l=[],c=[],h=[];let d=0,u=0;function p(e,t,n,i,r,a,p,f,m,g,v){const x=a/m,y=p/g,_=a/2,M=p/2,S=f/2,b=m+1,w=g+1;let E=0,T=0;const R=new Ee;for(let a=0;a<w;a++){const o=a*y-M;for(let s=0;s<b;s++){const d=s*x-_;R[e]=d*i,R[t]=o*r,R[n]=S,l.push(R.x,R.y,R.z),R[e]=0,R[t]=0,R[n]=f>0?1:-1,c.push(R.x,R.y,R.z),h.push(s/m),h.push(1-a/g),E+=1}}for(let e=0;e<g;e++)for(let t=0;t<m;t++){const n=d+t+b*e,i=d+t+b*(e+1),r=d+(t+1)+b*(e+1),a=d+(t+1)+b*e;s.push(n,i,a),s.push(i,r,a),T+=6}o.addGroup(u,T,v),u+=T,d+=E}p("z","y","x",-1,-1,n,t,e,a,r,0),p("z","y","x",1,-1,n,t,-e,a,r,1),p("x","z","y",1,1,e,n,t,i,a,2),p("x","z","y",1,-1,e,n,-t,i,a,3),p("x","y","z",1,-1,e,t,n,i,r,4),p("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(s),this.setAttribute("position",new jt(l,3)),this.setAttribute("normal",new jt(c,3)),this.setAttribute("uv",new jt(h,2))}static fromJSON(e){return new Sn(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function bn(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const r=e[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?t[n][i]=r.clone():Array.isArray(r)?t[n][i]=r.slice():t[n][i]=r}}return t}function wn(e){const t={};for(let n=0;n<e.length;n++){const i=bn(e[n]);for(const e in i)t[e]=i[e]}return t}const En={clone:bn,merge:wn};class Tn extends zt{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",this.fragmentShader="\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=bn(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?t.uniforms[n]={type:"t",value:i.toJSON(e).uuid}:i&&i.isColor?t.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?t.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?t.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?t.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?t.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?t.uniforms[n]={type:"m4",value:i.toArray()}:t.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const e in this.extensions)!0===this.extensions[e]&&(n[e]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class Rn extends Rt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new nt,this.projectionMatrix=new nt,this.projectionMatrixInverse=new nt}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class Cn extends Rn{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=2*j*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(.5*X*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*j*Math.atan(Math.tan(.5*X*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,r,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(.5*X*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const e=a.fullWidth,o=a.fullHeight;r+=a.offsetX*i/e,t-=a.offsetY*n/o,i*=a.width/e,n*=a.height/o}const o=this.filmOffset;0!==o&&(r+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Dn=90;class An extends Rt{constructor(e,t,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const i=new Cn(Dn,1,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new Ee(1,0,0)),this.add(i);const r=new Cn(Dn,1,e,t);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new Ee(-1,0,0)),this.add(r);const a=new Cn(Dn,1,e,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new Ee(0,1,0)),this.add(a);const o=new Cn(Dn,1,e,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new Ee(0,-1,0)),this.add(o);const s=new Cn(Dn,1,e,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new Ee(0,0,1)),this.add(s);const l=new Cn(Dn,1,e,t);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new Ee(0,0,-1)),this.add(l)}update(e,t){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,a,o,s,l]=this.children,c=e.getRenderTarget(),h=e.toneMapping,d=e.xr.enabled;e.toneMapping=0,e.xr.enabled=!1;const u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,r),e.setRenderTarget(n,2),e.render(t,a),e.setRenderTarget(n,3),e.render(t,o),e.setRenderTarget(n,4),e.render(t,s),n.texture.generateMipmaps=u,e.setRenderTarget(n,5),e.render(t,l),e.setRenderTarget(c),e.toneMapping=h,e.xr.enabled=d,n.texture.needsPMREMUpdate=!0}}class In extends ye{constructor(e,t,n,i,r,a,o,s,l,c){super(e=void 0!==e?e:[],t=void 0!==t?t:d,n,i,r,a,o,s,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Pn extends Me{constructor(e,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new In(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:x}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",a=new Sn(5,5,5),o=new Tn({name:"CubemapFromEquirect",uniforms:bn(n),vertexShader:i,fragmentShader:r,side:1,blending:0});o.uniforms.tEquirect.value=t;const s=new _n(a,o),l=t.minFilter;return t.minFilter===y&&(t.minFilter=x),new An(1,10,this).update(e,s),t.minFilter=l,s.geometry.dispose(),s.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,n,i);e.setRenderTarget(r)}}const Ln=new Ee,Fn=new Ee,On=new ee;class Nn{constructor(e=new Ee(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Ln.subVectors(n,t).cross(Fn.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const n=e.delta(Ln),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(e.start)?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:t.copy(n).multiplyScalar(r).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||On.getNormalMatrix(e),i=this.coplanarPoint(Ln).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Un=new je,kn=new Ee;class Bn{constructor(e=new Nn,t=new Nn,n=new Nn,i=new Nn,r=new Nn,a=new Nn){this.planes=[e,t,n,i,r,a]}set(e,t,n,i,r,a){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],r=n[1],a=n[2],o=n[3],s=n[4],l=n[5],c=n[6],h=n[7],d=n[8],u=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],x=n[15];return t[0].setComponents(o-i,h-s,f-d,x-m).normalize(),t[1].setComponents(o+i,h+s,f+d,x+m).normalize(),t[2].setComponents(o+r,h+l,f+u,x+g).normalize(),t[3].setComponents(o-r,h-l,f-u,x-g).normalize(),t[4].setComponents(o-a,h-c,f-p,x-v).normalize(),t[5].setComponents(o+a,h+c,f+p,x+v).normalize(),this}intersectsObject(e){const t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),Un.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Un)}intersectsSprite(e){return Un.center.set(0,0,0),Un.radius=.7071067811865476,Un.applyMatrix4(e.matrixWorld),this.intersectsSphere(Un)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let e=0;e<6;e++)if(t[e].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(kn.x=i.normal.x>0?e.max.x:e.min.x,kn.y=i.normal.y>0?e.max.y:e.min.y,kn.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(kn)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function zn(){let e=null,t=!1,n=null,i=null;function r(t,a){n(t,a),i=e.requestAnimationFrame(r)}return{start:function(){!0!==t&&null!==n&&(i=e.requestAnimationFrame(r),t=!0)},stop:function(){e.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function Gn(e,t){const n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,r){if(t.isGLBufferAttribute){const e=i.get(t);return void((!e||e.version<t.version)&&i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const a=i.get(t);void 0===a?i.set(t,function(t,i){const r=t.array,a=t.usage,o=e.createBuffer();let s;if(e.bindBuffer(i,o),e.bufferData(i,r,a),t.onUploadCallback(),r instanceof Float32Array)s=e.FLOAT;else if(r instanceof Uint16Array)if(t.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");s=e.HALF_FLOAT}else s=e.UNSIGNED_SHORT;else if(r instanceof Int16Array)s=e.SHORT;else if(r instanceof Uint32Array)s=e.UNSIGNED_INT;else if(r instanceof Int32Array)s=e.INT;else if(r instanceof Int8Array)s=e.BYTE;else if(r instanceof Uint8Array)s=e.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);s=e.UNSIGNED_BYTE}return{buffer:o,type:s,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}(t,r)):a.version<t.version&&(function(t,i,r){const a=i.array,o=i.updateRange;e.bindBuffer(r,t),-1===o.count?e.bufferSubData(r,0,a):(n?e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a,o.offset,o.count):e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a.subarray(o.offset,o.offset+o.count)),o.count=-1)}(a.buffer,t,r),a.version=t.version)}}}class Hn extends tn{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,a=t/2,o=Math.floor(n),s=Math.floor(i),l=o+1,c=s+1,h=e/o,d=t/s,u=[],p=[],f=[],m=[];for(let e=0;e<c;e++){const t=e*d-a;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-t,0),f.push(0,0,1),m.push(n/o),m.push(1-e/s)}}for(let e=0;e<s;e++)for(let t=0;t<o;t++){const n=t+l*e,i=t+l*(e+1),r=t+1+l*(e+1),a=t+1+l*e;u.push(n,i,a),u.push(i,r,a)}this.setIndex(u),this.setAttribute("position",new jt(p,3)),this.setAttribute("normal",new jt(f,3)),this.setAttribute("uv",new jt(m,2))}static fromJSON(e){return new Hn(e.width,e.height,e.widthSegments,e.heightSegments)}}const Vn={alphamap_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",alphamap_pars_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",alphatest_fragment:"\n#ifdef USE_ALPHATEST\n\n\tif ( diffuseColor.a < alphaTest ) discard;\n\n#endif\n",alphatest_pars_fragment:"\n#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif\n",aomap_fragment:"\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\n\t#endif\n\n#endif\n",aomap_pars_fragment:"\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",bsdfs:"\n\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} // validated\n\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} // validated\n\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4's roughness\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( V * D );\n\n}\n\n#ifdef USE_IRIDESCENCE\n\nvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4's roughness\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = mix(F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence);\n\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( V * D );\n\n}\n\n#endif\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n#if defined( USE_SHEEN )\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat D_Charlie( float roughness, float dotNH ) {\n\n\tfloat alpha = pow2( roughness );\n\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n\n}\n\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\n\treturn sheenColor * ( D * V );\n\n}\n\n#endif\n",iridescence_fragment:"\n\n#ifdef USE_IRIDESCENCE\n\n// XYZ to sRGB color space\nconst mat3 XYZ_TO_REC709 = mat3(\n    3.2404542, -0.9692660,  0.0556434,\n   -1.5371385,  1.8760108, -0.2040259,\n   -0.4985314,  0.0415560,  1.0572252\n);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n   vec3 sqrtF0 = sqrt( fresnel0 );\n   return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n}\n\n// Conversion FO/IOR\nvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n}\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n}\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n   float phase = 2.0 * PI * OPD * 1.0e-9;\n   vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n   vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n   vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n   vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( -pow2( phase ) * var );\n   xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[0] ) * exp( -4.5282e+09 * pow2( phase ) );\n   xyz /= 1.0685e-7;\n\n   vec3 srgb = XYZ_TO_REC709 * xyz;\n   return srgb;\n}\n\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n   vec3 I;\n\n   // Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n   float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n   // Evaluate the cosTheta on the base layer (Snell law)\n   float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\n   // Handle TIR:\n   float cosTheta2Sq = 1.0 - sinTheta2Sq;\n   if ( cosTheta2Sq < 0.0 ) {\n       return vec3( 1.0 );\n   }\n\n   float cosTheta2 = sqrt( cosTheta2Sq );\n\n   // First interface\n   float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n   float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n   float R21 = R12;\n   float T121 = 1.0 - R12;\n   float phi12 = 0.0;\n   if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n   float phi21 = PI - phi12;\n\n   // Second interface\n   vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\n   vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n   vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n   vec3 phi23 = vec3( 0.0 );\n   if ( baseIOR[0] < iridescenceIOR ) phi23[0] = PI;\n   if ( baseIOR[1] < iridescenceIOR ) phi23[1] = PI;\n   if ( baseIOR[2] < iridescenceIOR ) phi23[2] = PI;\n\n   // Phase shift\n   float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n   vec3 phi = vec3( phi21 ) + phi23;\n\n   // Compound terms\n   vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n   vec3 r123 = sqrt( R123 );\n   vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\n   // Reflectance term for m = 0 (DC term amplitude)\n   vec3 C0 = R12 + Rs;\n   I = C0;\n\n   // Reflectance term for m > 0 (pairs of diracs)\n   vec3 Cm = Rs - T121;\n   for ( int m = 1; m <= 2; ++m ) {\n       Cm *= r123;\n       vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n       I += Cm * Sm;\n   }\n\n   // Since out of gamut colors might be produced, negative color values are clamped to 0.\n   return max( I, vec3( 0.0 ) );\n}\n\n#endif\n\n",bumpmap_pars_fragment:"\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",clipping_planes_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\tif ( clipped ) discard;\n\n\t#endif\n\n#endif\n",clipping_planes_pars_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",clipping_planes_pars_vertex:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n#endif\n",clipping_planes_vertex:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvClipPosition = - mvPosition.xyz;\n\n#endif\n",color_fragment:"\n#if defined( USE_COLOR_ALPHA )\n\n\tdiffuseColor *= vColor;\n\n#elif defined( USE_COLOR )\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",color_pars_fragment:"\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",color_pars_vertex:"\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",color_vertex:"\n#if defined( USE_COLOR_ALPHA )\n\n\tvColor = vec4( 1.0 );\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvColor = vec3( 1.0 );\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvColor *= color;\n\n#endif\n\n#ifdef USE_INSTANCING_COLOR\n\n\tvColor.xyz *= instanceColor.xyz;\n\n#endif\n",common:"\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n\n#ifndef saturate\n// <tonemapping_pars_fragment> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\n\treturn fract( sin( sn ) * c );\n\n}\n\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t// dir can be either a direction vector or a normal vector\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n\nbool isPerspectiveMatrix( mat4 m ) {\n\n\treturn m[ 2 ][ 3 ] == - 1.0;\n\n}\n\nvec2 equirectUv( in vec3 dir ) {\n\n\t// dir is assumed to be unit length\n\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\treturn vec2( u, v );\n\n}\n",cube_uv_reflection_fragment:"\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized ).\n\n\tfloat getFace( vec3 direction ) {\n\n\t\tvec3 absDirection = abs( direction );\n\n\t\tfloat face = - 1.0;\n\n\t\tif ( absDirection.x > absDirection.z ) {\n\n\t\t\tif ( absDirection.x > absDirection.y )\n\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t} else {\n\n\t\t\tif ( absDirection.z > absDirection.y )\n\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n\t// RH coordinate system; PMREM face-indexing convention\n\tvec2 getUV( vec3 direction, float face ) {\n\n\t\tvec2 uv;\n\n\t\tif ( face == 0.0 ) {\n\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\n\t\t} else if ( face == 1.0 ) {\n\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\n\t\t} else if ( face == 2.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\n\t\t} else if ( face == 3.0 ) {\n\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\n\t\t} else if ( face == 4.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\n\t\t} else {\n\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\n\t\t}\n\n\t\treturn 0.5 * ( uv + 1.0 );\n\n\t}\n\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\n\t\tfloat face = getFace( direction );\n\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\n\t\tfloat faceSize = exp2( mipInt );\n\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\n\t\tif ( face > 2.0 ) {\n\n\t\t\tuv.y += faceSize;\n\n\t\t\tface -= 3.0;\n\n\t\t}\n\n\t\tuv.x += face * faceSize;\n\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\n\t\t#ifdef texture2DGradEXT\n\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb; // disable anisotropic filtering\n\n\t\t#else\n\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\n\t\t#endif\n\n\t}\n\n\t// These defines must match with PMREMGenerator\n\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\n\tfloat roughnessToMip( float roughness ) {\n\n\t\tfloat mip = 0.0;\n\n\t\tif ( roughness >= r1 ) {\n\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\n\t\t} else if ( roughness >= r4 ) {\n\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\n\t\t} else if ( roughness >= r5 ) {\n\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\n\t\t} else if ( roughness >= r6 ) {\n\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\n\t\t} else {\n\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t}\n\n\t\treturn mip;\n\n\t}\n\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\n\t\tfloat mipF = fract( mip );\n\n\t\tfloat mipInt = floor( mip );\n\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\n\t\tif ( mipF == 0.0 ) {\n\n\t\t\treturn vec4( color0, 1.0 );\n\n\t\t} else {\n\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\n\t\t}\n\n\t}\n\n#endif\n",defaultnormal_vertex:"\nvec3 transformedNormal = objectNormal;\n\n#ifdef USE_INSTANCING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 m = mat3( instanceMatrix );\n\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\n\ttransformedNormal = m * transformedNormal;\n\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",displacementmap_pars_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",displacementmap_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n\n#endif\n",emissivemap_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",emissivemap_pars_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",encodings_fragment:"\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\n",envmap_fragment:"\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvec3 cameraToFrag;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\n\t\t}\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",envmap_common_pars_fragment:"\n#ifdef USE_ENVMAP\n\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif\n",envmap_pars_fragment:"\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",envmap_pars_vertex:"\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",envmap_physical_pars_fragment:"\n#if defined( USE_ENVMAP )\n\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\n\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n#endif\n",envmap_vertex:"\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\n\n\tvFogDepth = - mvPosition.z;\n\n#endif\n",fog_pars_vertex:"\n#ifdef USE_FOG\n\n\tvarying float vFogDepth;\n\n#endif\n",fog_fragment:"\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",fog_pars_fragment:"\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",gradientmap_pars_fragment:"\n\n#ifdef USE_GRADIENTMAP\n\n\tuniform sampler2D gradientMap;\n\n#endif\n\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t// dotNL will be from -1.0 to 1.0\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t#ifdef USE_GRADIENTMAP\n\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\n\t#else\n\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t#endif\n\n}\n",lightmap_fragment:"\n#ifdef USE_LIGHTMAP\n\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n\n#endif\n",lightmap_pars_fragment:"\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",lights_lambert_vertex:"\nvec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\n\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n\n#ifdef DOUBLE_SIDED\n\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n",lights_pars_begin:"\nuniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\treturn irradiance;\n\n}\n\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t\t// page 32, equation 26: E[window1]\n\t\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\t\tif ( cutoffDistance > 0.0 ) {\n\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t\t}\n\n\t\treturn distanceFalloff;\n\n\t#else\n\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t\t}\n\n\t\treturn 1.0;\n\n\t#endif\n\n}\n\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\tif ( spotAttenuation > 0.0 ) {\n\n\t\t\tfloat lightDistance = length( lVector );\n\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t\t} else {\n\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",lights_toon_fragment:"\nToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\n",lights_toon_pars_fragment:"\nvarying vec3 vViewPosition;\n\nstruct ToonMaterial {\n\n\tvec3 diffuseColor;\n\n};\n\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_phong_fragment:"\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"\nvarying vec3 vViewPosition;\n\nstruct BlinnPhongMaterial {\n\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n\n#ifdef IOR\n\n\t#ifdef SPECULAR\n\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\n\t\t#endif\n\n\t\t#ifdef USE_SPECULARCOLORMAP\n\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\n\t\t#endif\n\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\n\t#else\n\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\n\t#endif\n\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n\n#endif\n\n#ifdef USE_CLEARCOAT\n\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_IRIDESCENCE\n\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\n\t#ifdef USE_IRIDESCENCEMAP\n\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\n\t#endif\n\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\n\t#else\n\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\n\t#endif\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor = sheenColor;\n\n\t#ifdef USE_SHEENCOLORMAP\n\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\n\t#endif\n\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\n\t#ifdef USE_SHEENROUGHNESSMAP\n\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\n\t#endif\n\n#endif\n",lights_physical_pars_fragment:'\nstruct PhysicalMaterial {\n\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\n};\n\n// temporary\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\n\n// This is a curve-fit approxmation to the "Charlie sheen" BRDF integrated over the hemisphere from \n// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tfloat r2 = roughness * roughness;\n\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\n\treturn saturate( DG * RECIPROCAL_PI );\n\n}\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\n\treturn fab;\n\n}\n\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\treturn specularColor * fab.x + specularF90 * fab.y;\n\n}\n\n// Fdez-Agüera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\n\t#else\n\n\t\tvec3 Fr = specularColor;\n\n\t#endif\n\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\n\t#endif\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\n\t#else\n\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\n\t#endif\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\n\t#else\n\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\n\t#endif\n\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n',lights_fragment_begin:"\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n#ifdef USE_CLEARCOAT\n\n\tgeometry.clearcoatNormal = clearcoatNormal;\n\n#endif\n\n#ifdef USE_IRIDESCENCE\n\nfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\nif ( material.iridescenceThickness == 0.0 ) {\n\n\tmaterial.iridescence = 0.0;\n\n} else {\n\n\tmaterial.iridescence = saturate( material.iridescence );\n\n}\n\nif ( material.iridescence > 0.0 ) {\n\n\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\n\t// Iridescence F0 approximation\n\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\n}\n\n#endif\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 iblIrradiance = vec3( 0.0 );\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n\n#endif\n",lights_fragment_maps:"\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\n\t#endif\n\n#endif\n",lights_fragment_end:"\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",logdepthbuf_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\n\t// on some platforms. See issue #17623.\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",logdepthbuf_pars_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",logdepthbuf_pars_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\n\t#else\n\n\t\tuniform float logDepthBufFC;\n\n\t#endif\n\n#endif\n",logdepthbuf_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\n\t#else\n\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\t\tgl_Position.z *= gl_Position.w;\n\n\t\t}\n\n\t#endif\n\n#endif\n",map_fragment:"\n#ifdef USE_MAP\n\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\n\t#ifdef DECODE_VIDEO_TEXTURE\n\n\t\t// inline sRGB decode (TODO: Remove this code when https://crbug.com/1256340 is solved)\n\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\n\t#endif\n\n\tdiffuseColor *= sampledDiffuseColor;\n\n#endif\n",map_pars_fragment:"\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",map_particle_fragment:"\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\n#endif\n\n#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, uv );\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n\n#endif\n",map_particle_pars_fragment:"\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tuniform mat3 uvTransform;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",metalnessmap_fragment:"\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",metalnessmap_pars_fragment:"\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",morphcolor_vertex:"\n#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tvColor *= morphTargetBaseInfluence;\n\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t#if defined( USE_COLOR_ALPHA )\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\n\t\t#elif defined( USE_COLOR )\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\n\t\t#endif\n\n\t}\n\n#endif\n",morphnormal_vertex:"\n#ifdef USE_MORPHNORMALS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tobjectNormal *= morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\n\t\t}\n\n\t#else\n\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\n\t#endif\n\n#endif\n",morphtarget_pars_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\tuniform float morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\n\t\t}\n\n\t#else\n\n\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\n\t\t#else\n\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",morphtarget_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *= morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\n\t\t}\n\n\t#else\n\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\n\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",normal_fragment_begin:"\nfloat faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n\n#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno GPUs not able to do dFdx( vViewPosition )\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\t#ifdef USE_TANGENT\n\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\n\t\t#endif\n\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n\n// non perturbed normal for clearcoat among others\n\nvec3 geometryNormal = normal;\n\n",normal_fragment_maps:"\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t#ifdef FLIP_SIDED\n\n\t\tnormal = - normal;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\tnormal = normalize( normalMatrix * normal );\n\n#elif defined( TANGENTSPACE_NORMALMAP )\n\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tnormal = normalize( vTBN * mapN );\n\n\t#else\n\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\n\t#endif\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n\n#endif\n",normal_pars_fragment:"\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",normal_pars_vertex:"\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",normal_vertex:"\n#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n",normalmap_pars_fragment:"\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tuniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\n\t// Normal Mapping Without Precomputed Tangents\n\t// http://www.thetenthplanet.de/archives/1180\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 N = surf_norm; // normalized\n\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n\t}\n\n#endif\n",clearcoat_normal_fragment_begin:"\n#ifdef USE_CLEARCOAT\n\n\tvec3 clearcoatNormal = geometryNormal;\n\n#endif\n",clearcoat_normal_fragment_maps:"\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\n\t#else\n\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\n\t#endif\n\n#endif\n",clearcoat_pars_fragment:"\n\n#ifdef USE_CLEARCOATMAP\n\n\tuniform sampler2D clearcoatMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform sampler2D clearcoatRoughnessMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n\n#endif\n",iridescence_pars_fragment:"\n\n#ifdef USE_IRIDESCENCEMAP\n\n\tuniform sampler2D iridescenceMap;\n\n#endif\n\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\tuniform sampler2D iridescenceThicknessMap;\n\n#endif\n",output_fragment:"\n#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n\n// https://github.com/mrdoob/three.js/pull/22425\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\n\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n",packing:"\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\n\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",project_vertex:"\nvec4 mvPosition = vec4( transformed, 1.0 );\n\n#ifdef USE_INSTANCING\n\n\tmvPosition = instanceMatrix * mvPosition;\n\n#endif\n\nmvPosition = modelViewMatrix * mvPosition;\n\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"\n#ifdef DITHERING\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",dithering_pars_fragment:"\n#ifdef DITHERING\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift according to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",roughnessmap_fragment:"\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",roughnessmap_pars_fragment:"\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",shadowmap_pars_fragment:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\n\t}\n\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\n\t\tfloat occlusion = 1.0;\n\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\n\n\t\tif (hard_shadow != 1.0 ) {\n\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\n\t\t}\n\t\treturn occlusion;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",shadowmap_pars_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",shadowmap_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\n\t#endif\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n",shadowmask_pars_fragment:"\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\tDirectionalLightShadow directionalLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\tSpotLightShadow spotLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\tPointLightShadow pointLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",skinbase_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",skinning_pars_vertex:"\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\n\tmat4 getBoneMatrix( const in float i ) {\n\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\ty = dy * ( y + 0.5 );\n\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\treturn bone;\n\n\t}\n\n#endif\n",skinning_vertex:"\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",skinnormal_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",specularmap_fragment:"\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",specularmap_pars_fragment:"\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",tonemapping_fragment:"\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",tonemapping_pars_fragment:"\n#ifndef saturate\n// <common> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nvec3 RRTAndODTFit( vec3 v ) {\n\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n\n}\n\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\n\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\n\tcolor *= toneMappingExposure / 0.6;\n\n\tcolor = ACESInputMat * color;\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat * color;\n\n\t// Clamp to [0, 1]\n\treturn saturate( color );\n\n}\n\nvec3 CustomToneMapping( vec3 color ) { return color; }\n",transmission_fragment:"\n#ifdef USE_TRANSMISSION\n\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\n\t#endif\n\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif\n",transmission_pars_fragment:"\n#ifdef USE_TRANSMISSION\n\n\t// Transmission code is based on glTF-Sampler-Viewer\n\t// https://github.com/KhronosGroup/glTF-Sample-Viewer\n\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\tuniform sampler2D transmissionMap;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tuniform sampler2D thicknessMap;\n\n\t#endif\n\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec3 vWorldPosition;\n\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\n\t\t// Direction of refracted light.\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\n\t\t// Compute rotation-independant scaling of the model matrix.\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\n\t\t// The thickness is specified in local space.\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\n\t}\n\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\n\t\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\n\t}\n\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\n\t\t#ifdef texture2DLodEXT\n\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\n\t\t#else\n\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\n\t\t#endif\n\n\t}\n\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tif ( attenuationDistance == 0.0 ) {\n\n\t\t\t// Attenuation distance is +∞ (which we indicate by zero), i.e. the transmitted color is not attenuated at all.\n\t\t\treturn radiance;\n\n\t\t} else {\n\n\t\t\t// Compute light attenuation using Beer's law.\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n\t\t\treturn transmittance * radiance;\n\n\t\t}\n\n\t}\n\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\n\t\t// Get the specular component.\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\n\t}\n#endif\n",uv_pars_fragment:"\n#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\n\tvarying vec2 vUv;\n\n#endif\n",uv_pars_vertex:"\n#ifdef USE_UV\n\n\t#ifdef UVS_VERTEX_ONLY\n\n\t\tvec2 vUv;\n\n\t#else\n\n\t\tvarying vec2 vUv;\n\n\t#endif\n\n\tuniform mat3 uvTransform;\n\n#endif\n",uv_vertex:"\n#ifdef USE_UV\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif\n",uv2_pars_fragment:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif\n",uv2_pars_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n\tuniform mat3 uv2Transform;\n\n#endif\n",uv2_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n\n#endif\n",worldpos_vertex:"\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t#ifdef USE_INSTANCING\n\n\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t#endif\n\n\tworldPosition = modelMatrix * worldPosition;\n\n#endif\n",background_vert:"\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",background_frag:"\nuniform sampler2D t2D;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tgl_FragColor = texture2D( t2D, vUv );\n\n\t#ifdef DECODE_VIDEO_TEXTURE\n\n\t\t// inline sRGB decode (TODO: Remove this code when https://crbug.com/1256340 is solved)\n\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\n\t#endif\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",cube_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",cube_frag:"\n#include <envmap_common_pars_fragment>\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",depth_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",depth_frag:"\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",distanceRGBA_vert:"\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",distanceRGBA_frag:"\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",equirect_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",equirect_frag:"\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV = equirectUv( direction );\n\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",linedashed_vert:"\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",linedashed_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",meshbasic_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshbasic_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshlambert_vert:"\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshlambert_frag:"\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\n\t#endif\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshmatcap_vert:"\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",meshmatcap_frag:"\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 ); // default if matcap is missing\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshnormal_vert:"\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",meshnormal_frag:"\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n\t#ifdef OPAQUE\n\n\t\tgl_FragColor.a = 1.0;\n\n\t#endif\n\n}\n",meshphong_vert:"\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphong_frag:"\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphysical_vert:"\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifdef USE_TRANSMISSION\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n#ifdef USE_TRANSMISSION\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif\n}\n",meshphysical_frag:"\n#define STANDARD\n\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef IOR\n\tuniform float ior;\n#endif\n\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\n\t#include <transmission_fragment>\n\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\n\t#ifdef USE_SHEEN\n\n\t\t// Sheen energy compensation approximation calculation can be found at the end of\n\t\t// https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\n\t#endif\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshtoon_vert:"\n#define TOON\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshtoon_frag:"\n#define TOON\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",points_vert:"\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",points_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",shadow_vert:"\n#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",shadow_frag:"\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",sprite_vert:"\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",sprite_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n"},Wn={common:{diffuse:{value:new pe(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new ee},uv2Transform:{value:new ee},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new $(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new pe(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new pe(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ee}},sprite:{diffuse:{value:new pe(16777215)},opacity:{value:1},center:{value:new $(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ee}}},qn={basic:{uniforms:wn([Wn.common,Wn.specularmap,Wn.envmap,Wn.aomap,Wn.lightmap,Wn.fog]),vertexShader:Vn.meshbasic_vert,fragmentShader:Vn.meshbasic_frag},lambert:{uniforms:wn([Wn.common,Wn.specularmap,Wn.envmap,Wn.aomap,Wn.lightmap,Wn.emissivemap,Wn.fog,Wn.lights,{emissive:{value:new pe(0)}}]),vertexShader:Vn.meshlambert_vert,fragmentShader:Vn.meshlambert_frag},phong:{uniforms:wn([Wn.common,Wn.specularmap,Wn.envmap,Wn.aomap,Wn.lightmap,Wn.emissivemap,Wn.bumpmap,Wn.normalmap,Wn.displacementmap,Wn.fog,Wn.lights,{emissive:{value:new pe(0)},specular:{value:new pe(1118481)},shininess:{value:30}}]),vertexShader:Vn.meshphong_vert,fragmentShader:Vn.meshphong_frag},standard:{uniforms:wn([Wn.common,Wn.envmap,Wn.aomap,Wn.lightmap,Wn.emissivemap,Wn.bumpmap,Wn.normalmap,Wn.displacementmap,Wn.roughnessmap,Wn.metalnessmap,Wn.fog,Wn.lights,{emissive:{value:new pe(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Vn.meshphysical_vert,fragmentShader:Vn.meshphysical_frag},toon:{uniforms:wn([Wn.common,Wn.aomap,Wn.lightmap,Wn.emissivemap,Wn.bumpmap,Wn.normalmap,Wn.displacementmap,Wn.gradientmap,Wn.fog,Wn.lights,{emissive:{value:new pe(0)}}]),vertexShader:Vn.meshtoon_vert,fragmentShader:Vn.meshtoon_frag},matcap:{uniforms:wn([Wn.common,Wn.bumpmap,Wn.normalmap,Wn.displacementmap,Wn.fog,{matcap:{value:null}}]),vertexShader:Vn.meshmatcap_vert,fragmentShader:Vn.meshmatcap_frag},points:{uniforms:wn([Wn.points,Wn.fog]),vertexShader:Vn.points_vert,fragmentShader:Vn.points_frag},dashed:{uniforms:wn([Wn.common,Wn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Vn.linedashed_vert,fragmentShader:Vn.linedashed_frag},depth:{uniforms:wn([Wn.common,Wn.displacementmap]),vertexShader:Vn.depth_vert,fragmentShader:Vn.depth_frag},normal:{uniforms:wn([Wn.common,Wn.bumpmap,Wn.normalmap,Wn.displacementmap,{opacity:{value:1}}]),vertexShader:Vn.meshnormal_vert,fragmentShader:Vn.meshnormal_frag},sprite:{uniforms:wn([Wn.sprite,Wn.fog]),vertexShader:Vn.sprite_vert,fragmentShader:Vn.sprite_frag},background:{uniforms:{uvTransform:{value:new ee},t2D:{value:null}},vertexShader:Vn.background_vert,fragmentShader:Vn.background_frag},cube:{uniforms:wn([Wn.envmap,{opacity:{value:1}}]),vertexShader:Vn.cube_vert,fragmentShader:Vn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Vn.equirect_vert,fragmentShader:Vn.equirect_frag},distanceRGBA:{uniforms:wn([Wn.common,Wn.displacementmap,{referencePosition:{value:new Ee},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Vn.distanceRGBA_vert,fragmentShader:Vn.distanceRGBA_frag},shadow:{uniforms:wn([Wn.lights,Wn.fog,{color:{value:new pe(0)},opacity:{value:1}}]),vertexShader:Vn.shadow_vert,fragmentShader:Vn.shadow_frag}};function Xn(e,t,n,i,r,a){const o=new pe(0);let s,l,c=!0===r?0:1,h=null,d=0,u=null;function f(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,a)}return{getClearColor:function(){return o},setClearColor:function(e,t=1){o.set(e),c=t,f(o,c)},getClearAlpha:function(){return c},setClearAlpha:function(e){c=e,f(o,c)},render:function(n,r){let a=!1,m=!0===r.isScene?r.background:null;m&&m.isTexture&&(m=t.get(m));const g=e.xr,v=g.getSession&&g.getSession();v&&"additive"===v.environmentBlendMode&&(m=null),null===m?f(o,c):m&&m.isColor&&(f(m,1),a=!0),(e.autoClear||a)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),m&&(m.isCubeTexture||m.mapping===p)?(void 0===l&&(l=new _n(new Sn(1,1,1),new Tn({name:"BackgroundCubeMaterial",uniforms:bn(qn.cube.uniforms),vertexShader:qn.cube.vertexShader,fragmentShader:qn.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(l)),l.material.uniforms.envMap.value=m,l.material.uniforms.flipEnvMap.value=m.isCubeTexture&&!1===m.isRenderTargetTexture?-1:1,h===m&&d===m.version&&u===e.toneMapping||(l.material.needsUpdate=!0,h=m,d=m.version,u=e.toneMapping),l.layers.enableAll(),n.unshift(l,l.geometry,l.material,0,0,null)):m&&m.isTexture&&(void 0===s&&(s=new _n(new Hn(2,2),new Tn({name:"BackgroundMaterial",uniforms:bn(qn.background.uniforms),vertexShader:qn.background.vertexShader,fragmentShader:qn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute("normal"),Object.defineProperty(s.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(s)),s.material.uniforms.t2D.value=m,!0===m.matrixAutoUpdate&&m.updateMatrix(),s.material.uniforms.uvTransform.value.copy(m.matrix),h===m&&d===m.version&&u===e.toneMapping||(s.material.needsUpdate=!0,h=m,d=m.version,u=e.toneMapping),s.layers.enableAll(),n.unshift(s,s.geometry,s.material,0,0,null))}}}function jn(e,t,n,i){const r=e.getParameter(e.MAX_VERTEX_ATTRIBS),a=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||null!==a,s={},l=p(null);let c=l,h=!1;function d(t){return i.isWebGL2?e.bindVertexArray(t):a.bindVertexArrayOES(t)}function u(t){return i.isWebGL2?e.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function p(e){const t=[],n=[],i=[];for(let e=0;e<r;e++)t[e]=0,n[e]=0,i[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function f(){const e=c.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function m(e){g(e,0)}function g(n,r){const a=c.newAttributes,o=c.enabledAttributes,s=c.attributeDivisors;a[n]=1,0===o[n]&&(e.enableVertexAttribArray(n),o[n]=1),s[n]!==r&&((i.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),s[n]=r)}function v(){const t=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function x(t,n,r,a,o,s){!0!==i.isWebGL2||r!==e.INT&&r!==e.UNSIGNED_INT?e.vertexAttribPointer(t,n,r,a,o,s):e.vertexAttribIPointer(t,n,r,o,s)}function y(){_(),h=!0,c!==l&&(c=l,d(c.object))}function _(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,u,y,_){let M=!1;if(o){const t=function(t,n,r){const o=!0===r.wireframe;let l=s[t.id];void 0===l&&(l={},s[t.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[o];return void 0===h&&(h=p(i.isWebGL2?e.createVertexArray():a.createVertexArrayOES()),c[o]=h),h}(y,u,l);c!==t&&(c=t,d(c.object)),M=function(e,t,n,i){const r=c.attributes,a=t.attributes;let o=0;const s=n.getAttributes();for(const t in s)if(s[t].location>=0){const n=r[t];let i=a[t];if(void 0===i&&("instanceMatrix"===t&&e.instanceMatrix&&(i=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(i=e.instanceColor)),void 0===n)return!0;if(n.attribute!==i)return!0;if(i&&n.data!==i.data)return!0;o++}return c.attributesNum!==o||c.index!==i}(r,y,u,_),M&&function(e,t,n,i){const r={},a=t.attributes;let o=0;const s=n.getAttributes();for(const t in s)if(s[t].location>=0){let n=a[t];void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[t]=i,o++}c.attributes=r,c.attributesNum=o,c.index=i}(r,y,u,_)}else{const e=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===e||(c.geometry=y.id,c.program=u.id,c.wireframe=e,M=!0)}null!==_&&n.update(_,e.ELEMENT_ARRAY_BUFFER),(M||h)&&(h=!1,function(r,a,o,s){if(!1===i.isWebGL2&&(r.isInstancedMesh||s.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;f();const l=s.attributes,c=o.getAttributes(),h=a.defaultAttributeValues;for(const t in c){const i=c[t];if(i.location>=0){let a=l[t];if(void 0===a&&("instanceMatrix"===t&&r.instanceMatrix&&(a=r.instanceMatrix),"instanceColor"===t&&r.instanceColor&&(a=r.instanceColor)),void 0!==a){const t=a.normalized,o=a.itemSize,l=n.get(a);if(void 0===l)continue;const c=l.buffer,h=l.type,d=l.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data,l=n.stride,u=a.offset;if(n.isInstancedInterleavedBuffer){for(let e=0;e<i.locationSize;e++)g(i.location+e,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let e=0;e<i.locationSize;e++)m(i.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<i.locationSize;e++)x(i.location+e,o/i.locationSize,h,t,l*d,(u+o/i.locationSize*e)*d)}else{if(a.isInstancedBufferAttribute){for(let e=0;e<i.locationSize;e++)g(i.location+e,a.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=a.meshPerAttribute*a.count)}else for(let e=0;e<i.locationSize;e++)m(i.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<i.locationSize;e++)x(i.location+e,o/i.locationSize,h,t,o*d,o/i.locationSize*e*d)}}else if(void 0!==h){const n=h[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(i.location,n);break;case 3:e.vertexAttrib3fv(i.location,n);break;case 4:e.vertexAttrib4fv(i.location,n);break;default:e.vertexAttrib1fv(i.location,n)}}}}v()}(r,l,u,y),null!==_&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(_).buffer))},reset:y,resetDefaultState:_,dispose:function(){y();for(const e in s){const t=s[e];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete s[e]}},releaseStatesOfGeometry:function(e){if(void 0===s[e.id])return;const t=s[e.id];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete s[e.id]},releaseStatesOfProgram:function(e){for(const t in s){const n=s[t];if(void 0===n[e.id])continue;const i=n[e.id];for(const e in i)u(i[e].object),delete i[e];delete n[e.id]}},initAttributes:f,enableAttribute:m,disableUnusedAttributes:v}}function Yn(e,t,n,i){const r=i.isWebGL2;let a;this.setMode=function(e){a=e},this.render=function(t,i){e.drawArrays(a,t,i),n.update(i,a,1)},this.renderInstances=function(i,o,s){if(0===s)return;let l,c;if(r)l=e,c="drawArraysInstanced";else if(l=t.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](a,i,o,s),n.update(o,a,s)}}function Zn(e,t,n){let i;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext;let o=void 0!==n.precision?n.precision:"highp";const s=r(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);const l=a||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),p=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),f=e.getParameter(e.MAX_VERTEX_ATTRIBS),m=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),v=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),x=d>0,y=a||t.has("OES_texture_float");return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");i=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:u,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:x,floatFragmentTextures:y,floatVertexTextures:x&&y,maxSamples:a?e.getParameter(e.MAX_SAMPLES):0}}function Kn(e){const t=this;let n=null,i=0,r=!1,a=!1;const o=new Nn,s=new ee,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(e,n,i,r){const a=null!==e?e.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const t=i+4*a,r=n.matrixWorldInverse;s.getNormalMatrix(r),(null===c||c.length<t)&&(c=new Float32Array(t));for(let t=0,n=i;t!==a;++t,n+=4)o.copy(e[t]).applyMatrix4(r,s),o.normal.toArray(c,n),c[n+3]=o.constant}l.value=c,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t,a){const o=0!==e.length||t||0!==i||r;return r=t,n=h(e,a,0),i=e.length,o},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1,c()},this.setState=function(t,o,s){const d=t.clippingPlanes,u=t.clipIntersection,p=t.clipShadows,f=e.get(t);if(!r||null===d||0===d.length||a&&!p)a?h(null):c();else{const e=a?0:i,t=4*e;let r=f.clippingState||null;l.value=r,r=h(d,o,t,s);for(let e=0;e!==t;++e)r[e]=n[e];f.clippingState=r,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=e}}}function Jn(e){let t=new WeakMap;function n(e,t){return 303===t?e.mapping=d:304===t&&(e.mapping=u),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){const a=r.mapping;if(303===a||304===a){if(t.has(r))return n(t.get(r).texture,r.mapping);{const a=r.image;if(a&&a.height>0){const o=new Pn(a.height/2);return o.fromEquirectangularTexture(e,r),t.set(r,o),r.addEventListener("dispose",i),n(o.texture,r.mapping)}return null}}}return r},dispose:function(){t=new WeakMap}}}qn.physical={uniforms:wn([qn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new $(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new pe(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new $},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new pe(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new pe(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Vn.meshphysical_vert,fragmentShader:Vn.meshphysical_frag};class Qn extends Rn{constructor(e=-1,t=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,a=n+e,o=i+t,s=i-t;if(null!==this.view&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=e*this.view.offsetX,a=r+e*this.view.width,o-=t*this.view.offsetY,s=o-t*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,s,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}const $n=[.125,.215,.35,.446,.526,.582],ei=new Qn,ti=new pe;let ni=null;const ii=(1+Math.sqrt(5))/2,ri=1/ii,ai=[new Ee(1,1,1),new Ee(-1,1,1),new Ee(1,1,-1),new Ee(-1,1,-1),new Ee(0,ii,ri),new Ee(0,ii,-ri),new Ee(ri,0,ii),new Ee(-ri,0,ii),new Ee(ii,ri,0),new Ee(-ii,ri,0)];class oi{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){ni=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=hi(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=ci(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(ni),e.scissorTest=!1,li(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===d||e.mapping===u?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),ni=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:x,minFilter:x,generateMipmaps:!1,type:w,format:T,encoding:U,depthBuffer:!1},i=si(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=si(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let r=e;const a=e-4+1+$n.length;for(let o=0;o<a;o++){const a=Math.pow(2,r);n.push(a);let s=1/a;o>e-4?s=$n[o-e+4-1]:0===o&&(s=0),i.push(s);const l=1/(a-2),c=-l,h=1+l,d=[c,c,h,c,h,h,c,c,h,h,c,h],u=6,p=6,f=3,m=2,g=1,v=new Float32Array(f*p*u),x=new Float32Array(m*p*u),y=new Float32Array(g*p*u);for(let e=0;e<u;e++){const t=e%3*2/3-1,n=e>2?0:-1,i=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];v.set(i,f*p*e),x.set(d,m*p*e);const r=[e,e,e,e,e,e];y.set(r,g*p*e)}const _=new tn;_.setAttribute("position",new Wt(v,f)),_.setAttribute("uv",new Wt(x,m)),_.setAttribute("faceIndex",new Wt(y,g)),t.push(_),r>4&&r--}return{lodPlanes:t,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(20),r=new Ee(0,1,0);return new Tn({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,e,t)}return i}_compileMaterial(e){const t=new _n(this._lodPlanes[0],e);this._renderer.compile(t,ei)}_sceneToCubeUV(e,t,n,i){const r=new Cn(90,1,t,n),a=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],s=this._renderer,l=s.autoClear,c=s.toneMapping;s.getClearColor(ti),s.toneMapping=0,s.autoClear=!1;const h=new Gt({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),d=new _n(new Sn,h);let u=!1;const p=e.background;p?p.isColor&&(h.color.copy(p),e.background=null,u=!0):(h.color.copy(ti),u=!0);for(let t=0;t<6;t++){const n=t%3;0===n?(r.up.set(0,a[t],0),r.lookAt(o[t],0,0)):1===n?(r.up.set(0,0,a[t]),r.lookAt(0,o[t],0)):(r.up.set(0,a[t],0),r.lookAt(0,0,o[t]));const l=this._cubeSize;li(i,n*l,t>2?l:0,l,l),s.setRenderTarget(i),u&&s.render(d,r),s.render(e,r)}d.geometry.dispose(),d.material.dispose(),s.toneMapping=c,s.autoClear=l,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===d||e.mapping===u;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=hi()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=ci());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new _n(this._lodPlanes[0],r);r.uniforms.envMap.value=e;const o=this._cubeSize;li(t,0,0,3*o,2*o),n.setRenderTarget(t),n.render(a,ei)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let t=1;t<this._lodPlanes.length;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=ai[(t-1)%ai.length];this._blur(e,t-1,t,n,i)}t.autoClear=n}_blur(e,t,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",r),this._halfBlur(a,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,a,o){const s=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new _n(this._lodPlanes[i],l),h=l.uniforms,d=this._sizeLods[n]-1,u=isFinite(r)?Math.PI/(2*d):2*Math.PI/39,p=r/u,f=isFinite(r)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let e=0;e<20;++e){const t=e/p,n=Math.exp(-t*t/2);m.push(n),0===e?g+=n:e<f&&(g+=2*n)}for(let e=0;e<m.length;e++)m[e]=m[e]/g;h.envMap.value=e.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value="latitudinal"===a,o&&(h.poleAxis.value=o);const{_lodMax:v}=this;h.dTheta.value=u,h.mipInt.value=v-n;const x=this._sizeLods[i];li(t,3*x*(i>v-4?i-v+4:0),4*(this._cubeSize-x),3*x,2*x),s.setRenderTarget(t),s.render(c,ei)}}function si(e,t,n){const i=new Me(e,t,n);return i.texture.mapping=p,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function li(e,t,n,i,r){e.viewport.set(t,n,i,r),e.scissor.set(t,n,i,r)}function ci(){return new Tn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function hi(){return new Tn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function di(e){let t=new WeakMap,n=null;function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping,o=303===a||304===a,s=a===d||a===u;if(o||s){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=t.get(r);return null===n&&(n=new oi(e)),i=o?n.fromEquirectangular(r,i):n.fromCubemap(r,i),t.set(r,i),i.texture}if(t.has(r))return t.get(r).texture;{const a=r.image;if(o&&a&&a.height>0||s&&a&&function(e){let t=0;for(let n=0;n<6;n++)void 0!==e[n]&&t++;return 6===t}(a)){null===n&&(n=new oi(e));const a=o?n.fromEquirectangular(r):n.fromCubemap(r);return t.set(r,a),r.addEventListener("dispose",i),a.texture}return null}}}return r},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function ui(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function pi(e,t,n,i){const r={},a=new WeakMap;function o(e){const s=e.target;null!==s.index&&t.remove(s.index);for(const e in s.attributes)t.remove(s.attributes[e]);s.removeEventListener("dispose",o),delete r[s.id];const l=a.get(s);l&&(t.remove(l),a.delete(s)),i.releaseStatesOfGeometry(s),!0===s.isInstancedBufferGeometry&&delete s._maxInstanceCount,n.memory.geometries--}function s(e){const n=[],i=e.index,r=e.attributes.position;let o=0;if(null!==i){const e=i.array;o=i.version;for(let t=0,i=e.length;t<i;t+=3){const i=e[t+0],r=e[t+1],a=e[t+2];n.push(i,r,r,a,a,i)}}else{const e=r.array;o=r.version;for(let t=0,i=e.length/3-1;t<i;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e)}}const s=new(te(n)?Xt:qt)(n,1);s.version=o;const l=a.get(e);l&&t.remove(l),a.set(e,s)}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",o),r[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const n in i)t.update(i[n],e.ARRAY_BUFFER);const r=n.morphAttributes;for(const n in r){const i=r[n];for(let n=0,r=i.length;n<r;n++)t.update(i[n],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){const t=a.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&s(e)}else s(e);return a.get(e)}}}function fi(e,t,n,i){const r=i.isWebGL2;let a,o,s;this.setMode=function(e){a=e},this.setIndex=function(e){o=e.type,s=e.bytesPerElement},this.render=function(t,i){e.drawElements(a,i,o,t*s),n.update(i,a,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,d;if(r)h=e,d="drawElementsInstanced";else if(h=t.get("ANGLE_instanced_arrays"),d="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[d](a,l,o,i*s,c),n.update(l,a,c)}}function mi(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,i,r){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=r*(n/3);break;case e.LINES:t.lines+=r*(n/2);break;case e.LINE_STRIP:t.lines+=r*(n-1);break;case e.LINE_LOOP:t.lines+=r*n;break;case e.POINTS:t.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function gi(e,t){return e[0]-t[0]}function vi(e,t){return Math.abs(t[1])-Math.abs(e[1])}function xi(e,t){let n=1;const i=t.isInterleavedBufferAttribute?t.data.array:t.array;i instanceof Int8Array?n=127:i instanceof Int16Array?n=32767:i instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i),e.divideScalar(n)}function yi(e,t,n){const i={},r=new Float32Array(8),a=new WeakMap,o=new _e,s=[];for(let e=0;e<8;e++)s[e]=[e,0];return{update:function(l,c,h,d){const u=l.morphTargetInfluences;if(!0===t.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,f=void 0!==p?p.length:0;let m=a.get(c);if(void 0===m||m.count!==f){void 0!==m&&m.texture.dispose();const x=void 0!==c.morphAttributes.position,y=void 0!==c.morphAttributes.normal,_=void 0!==c.morphAttributes.color,M=c.morphAttributes.position||[],S=c.morphAttributes.normal||[],w=c.morphAttributes.color||[];let E=0;!0===x&&(E=1),!0===y&&(E=2),!0===_&&(E=3);let T=c.attributes.position.count*E,R=1;T>t.maxTextureSize&&(R=Math.ceil(T/t.maxTextureSize),T=t.maxTextureSize);const C=new Float32Array(T*R*4*f),D=new Se(C,T,R,f);D.type=b,D.needsUpdate=!0;const A=4*E;for(let P=0;P<f;P++){const L=M[P],F=S[P],O=w[P],N=T*R*4*P;for(let U=0;U<L.count;U++){const k=U*A;!0===x&&(o.fromBufferAttribute(L,U),!0===L.normalized&&xi(o,L),C[N+k+0]=o.x,C[N+k+1]=o.y,C[N+k+2]=o.z,C[N+k+3]=0),!0===y&&(o.fromBufferAttribute(F,U),!0===F.normalized&&xi(o,F),C[N+k+4]=o.x,C[N+k+5]=o.y,C[N+k+6]=o.z,C[N+k+7]=0),!0===_&&(o.fromBufferAttribute(O,U),!0===O.normalized&&xi(o,O),C[N+k+8]=o.x,C[N+k+9]=o.y,C[N+k+10]=o.z,C[N+k+11]=4===O.itemSize?o.w:1)}}function I(){D.dispose(),a.delete(c),c.removeEventListener("dispose",I)}m={count:f,texture:D,size:new $(T,R)},a.set(c,m),c.addEventListener("dispose",I)}let g=0;for(let B=0;B<u.length;B++)g+=u[B];const v=c.morphTargetsRelative?1:1-g;d.getUniforms().setValue(e,"morphTargetBaseInfluence",v),d.getUniforms().setValue(e,"morphTargetInfluences",u),d.getUniforms().setValue(e,"morphTargetsTexture",m.texture,n),d.getUniforms().setValue(e,"morphTargetsTextureSize",m.size)}else{const z=void 0===u?0:u.length;let G=i[c.id];if(void 0===G||G.length!==z){G=[];for(let X=0;X<z;X++)G[X]=[X,0];i[c.id]=G}for(let j=0;j<z;j++){const Y=G[j];Y[0]=j,Y[1]=u[j]}G.sort(vi);for(let Z=0;Z<8;Z++)Z<z&&G[Z][1]?(s[Z][0]=G[Z][0],s[Z][1]=G[Z][1]):(s[Z][0]=Number.MAX_SAFE_INTEGER,s[Z][1]=0);s.sort(gi);const H=c.morphAttributes.position,V=c.morphAttributes.normal;let W=0;for(let K=0;K<8;K++){const J=s[K],Q=J[0],ee=J[1];Q!==Number.MAX_SAFE_INTEGER&&ee?(H&&c.getAttribute("morphTarget"+K)!==H[Q]&&c.setAttribute("morphTarget"+K,H[Q]),V&&c.getAttribute("morphNormal"+K)!==V[Q]&&c.setAttribute("morphNormal"+K,V[Q]),r[K]=ee,W+=ee):(H&&!0===c.hasAttribute("morphTarget"+K)&&c.deleteAttribute("morphTarget"+K),V&&!0===c.hasAttribute("morphNormal"+K)&&c.deleteAttribute("morphNormal"+K),r[K]=0)}const q=c.morphTargetsRelative?1:1-W;d.getUniforms().setValue(e,"morphTargetBaseInfluence",q),d.getUniforms().setValue(e,"morphTargetInfluences",r)}}}}function _i(e,t,n,i){let r=new WeakMap;function a(e){const t=e.target;t.removeEventListener("dispose",a),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(o){const s=i.render.frame,l=o.geometry,c=t.get(o,l);return r.get(c)!==s&&(t.update(c),r.set(c,s)),o.isInstancedMesh&&(!1===o.hasEventListener("dispose",a)&&o.addEventListener("dispose",a),n.update(o.instanceMatrix,e.ARRAY_BUFFER),null!==o.instanceColor&&n.update(o.instanceColor,e.ARRAY_BUFFER)),c},dispose:function(){r=new WeakMap}}}const Mi=new ye,Si=new Se,bi=new be,wi=new In,Ei=[],Ti=[],Ri=new Float32Array(16),Ci=new Float32Array(9),Di=new Float32Array(4);function Ai(e,t,n){const i=e[0];if(i<=0||i>0)return e;const r=t*n;let a=Ei[r];if(void 0===a&&(a=new Float32Array(r),Ei[r]=a),0!==t){i.toArray(a,0);for(let i=1,r=0;i!==t;++i)r+=n,e[i].toArray(a,r)}return a}function Ii(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function Pi(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function Li(e,t){let n=Ti[t];void 0===n&&(n=new Int32Array(t),Ti[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Fi(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Oi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Ii(n,t))return;e.uniform2fv(this.addr,t),Pi(n,t)}}function Ni(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Ii(n,t))return;e.uniform3fv(this.addr,t),Pi(n,t)}}function Ui(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Ii(n,t))return;e.uniform4fv(this.addr,t),Pi(n,t)}}function ki(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ii(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),Pi(n,t)}else{if(Ii(n,i))return;Di.set(i),e.uniformMatrix2fv(this.addr,!1,Di),Pi(n,i)}}function Bi(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ii(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),Pi(n,t)}else{if(Ii(n,i))return;Ci.set(i),e.uniformMatrix3fv(this.addr,!1,Ci),Pi(n,i)}}function zi(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ii(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),Pi(n,t)}else{if(Ii(n,i))return;Ri.set(i),e.uniformMatrix4fv(this.addr,!1,Ri),Pi(n,i)}}function Gi(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function Hi(e,t){const n=this.cache;Ii(n,t)||(e.uniform2iv(this.addr,t),Pi(n,t))}function Vi(e,t){const n=this.cache;Ii(n,t)||(e.uniform3iv(this.addr,t),Pi(n,t))}function Wi(e,t){const n=this.cache;Ii(n,t)||(e.uniform4iv(this.addr,t),Pi(n,t))}function qi(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function Xi(e,t){const n=this.cache;Ii(n,t)||(e.uniform2uiv(this.addr,t),Pi(n,t))}function ji(e,t){const n=this.cache;Ii(n,t)||(e.uniform3uiv(this.addr,t),Pi(n,t))}function Yi(e,t){const n=this.cache;Ii(n,t)||(e.uniform4uiv(this.addr,t),Pi(n,t))}function Zi(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(t||Mi,r)}function Ki(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||bi,r)}function Ji(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(t||wi,r)}function Qi(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(t||Si,r)}function $i(e,t){e.uniform1fv(this.addr,t)}function er(e,t){const n=Ai(t,this.size,2);e.uniform2fv(this.addr,n)}function tr(e,t){const n=Ai(t,this.size,3);e.uniform3fv(this.addr,n)}function nr(e,t){const n=Ai(t,this.size,4);e.uniform4fv(this.addr,n)}function ir(e,t){const n=Ai(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function rr(e,t){const n=Ai(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function ar(e,t){const n=Ai(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function or(e,t){e.uniform1iv(this.addr,t)}function sr(e,t){e.uniform2iv(this.addr,t)}function lr(e,t){e.uniform3iv(this.addr,t)}function cr(e,t){e.uniform4iv(this.addr,t)}function hr(e,t){e.uniform1uiv(this.addr,t)}function dr(e,t){e.uniform2uiv(this.addr,t)}function ur(e,t){e.uniform3uiv(this.addr,t)}function pr(e,t){e.uniform4uiv(this.addr,t)}function fr(e,t,n){const i=t.length,r=Li(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.setTexture2D(t[e]||Mi,r[e])}function mr(e,t,n){const i=t.length,r=Li(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.setTexture3D(t[e]||bi,r[e])}function gr(e,t,n){const i=t.length,r=Li(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.setTextureCube(t[e]||wi,r[e])}function vr(e,t,n){const i=t.length,r=Li(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.setTexture2DArray(t[e]||Si,r[e])}class xr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Fi;case 35664:return Oi;case 35665:return Ni;case 35666:return Ui;case 35674:return ki;case 35675:return Bi;case 35676:return zi;case 5124:case 35670:return Gi;case 35667:case 35671:return Hi;case 35668:case 35672:return Vi;case 35669:case 35673:return Wi;case 5125:return qi;case 36294:return Xi;case 36295:return ji;case 36296:return Yi;case 35678:case 36198:case 36298:case 36306:case 35682:return Zi;case 35679:case 36299:case 36307:return Ki;case 35680:case 36300:case 36308:case 36293:return Ji;case 36289:case 36303:case 36311:case 36292:return Qi}}(t.type)}}class yr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return $i;case 35664:return er;case 35665:return tr;case 35666:return nr;case 35674:return ir;case 35675:return rr;case 35676:return ar;case 5124:case 35670:return or;case 35667:case 35671:return sr;case 35668:case 35672:return lr;case 35669:case 35673:return cr;case 5125:return hr;case 36294:return dr;case 36295:return ur;case 36296:return pr;case 35678:case 36198:case 36298:case 36306:case 35682:return fr;case 35679:case 36299:case 36307:return mr;case 35680:case 36300:case 36308:case 36293:return gr;case 36289:case 36303:case 36311:case 36292:return vr}}(t.type)}}class _r{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(e,t[a.id],n)}}}const Mr=/(\w+)(\])?(\[|\.)?/g;function Sr(e,t){e.seq.push(t),e.map[t.id]=t}function br(e,t,n){const i=e.name,r=i.length;for(Mr.lastIndex=0;;){const a=Mr.exec(i),o=Mr.lastIndex;let s=a[1];const l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===r){Sr(n,void 0===c?new xr(s,e,t):new yr(s,e,t));break}{let e=n.map[s];void 0===e&&(e=new _r(s),Sr(n,e)),n=e}}}class wr{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);br(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,i){const r=this.map[t];void 0!==r&&r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];void 0!==i&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const a=t[r],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const r=e[i];r.id in t&&n.push(r)}return n}}function Er(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}let Tr=0;function Rr(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(i&&""===r)return"";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const i=parseInt(a[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(e,t){const n=e.split("\n"),i=[],r=Math.max(t-6,0),a=Math.min(t+6,n.length);for(let e=r;e<a;e++){const r=e+1;i.push(`${r===t?">":" "} ${r}: ${n[e]}`)}return i.join("\n")}(e.getShaderSource(t),i)}return r}function Cr(e,t){const n=function(e){switch(e){case U:return["Linear","( value )"];case k:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}}(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function Dr(e,t){let n;switch(t){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Ar(e){return""!==e}function Ir(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Pr(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Lr=/^[ \t]*#include +<([\w\d./]+)>/gm;function Fr(e){return e.replace(Lr,Or)}function Or(e,t){const n=Vn[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return Fr(n)}const Nr=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Ur=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function kr(e){return e.replace(Ur,zr).replace(Nr,Br)}function Br(e,t,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),zr(0,t,n,i)}function zr(e,t,n,i){let r="";for(let e=parseInt(t);e<parseInt(n);e++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function Gr(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Hr(e,t,n,i){const r=e.getContext(),a=n.defines;let o=n.vertexShader,s=n.fragmentShader;const l=function(e){let t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),c=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case d:case u:t="ENVMAP_TYPE_CUBE";break;case p:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),h=function(e){let t="ENVMAP_MODE_REFLECTION";return e.envMap&&e.envMapMode===u&&(t="ENVMAP_MODE_REFRACTION"),t}(n),f=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),m=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),g=n.isWebGL2?"":function(e){return[e.extensionDerivatives||e.envMapCubeUVHeight||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Ar).join("\n")}(n),v=function(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(a),x=r.createProgram();let y,_,M=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(y=[v].filter(Ar).join("\n"),y.length>0&&(y+="\n"),_=[g,v].filter(Ar).join("\n"),_.length>0&&(_+="\n")):(y=[Gr(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Ar).join("\n"),_=[g,Gr(n),"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+h:"",n.envMap?"#define "+f:"",m?"#define CUBEUV_TEXEL_WIDTH "+m.texelWidth:"",m?"#define CUBEUV_TEXEL_HEIGHT "+m.texelHeight:"",m?"#define CUBEUV_MAX_MIP "+m.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?Vn.tonemapping_pars_fragment:"",0!==n.toneMapping?Dr("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Vn.encodings_pars_fragment,Cr("linearToOutputTexel",n.outputEncoding),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Ar).join("\n")),o=Fr(o),o=Ir(o,n),o=Pr(o,n),s=Fr(s),s=Ir(s,n),s=Pr(s,n),o=kr(o),s=kr(s),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(M="#version 300 es\n",y=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+y,_=["#define varying in",n.glslVersion===H?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===H?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const S=M+y+o,b=M+_+s,w=Er(r,r.VERTEX_SHADER,S),E=Er(r,r.FRAGMENT_SHADER,b);if(r.attachShader(x,w),r.attachShader(x,E),void 0!==n.index0AttributeName?r.bindAttribLocation(x,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(x,0,"position"),r.linkProgram(x),e.debug.checkShaderErrors){const e=r.getProgramInfoLog(x).trim(),t=r.getShaderInfoLog(w).trim(),n=r.getShaderInfoLog(E).trim();let i=!0,a=!0;if(!1===r.getProgramParameter(x,r.LINK_STATUS)){i=!1;const t=Rr(r,w,"vertex"),n=Rr(r,E,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(x,r.VALIDATE_STATUS)+"\n\nProgram Info Log: "+e+"\n"+t+"\n"+n)}else""!==e?console.warn("THREE.WebGLProgram: Program Info Log:",e):""!==t&&""!==n||(a=!1);a&&(this.diagnostics={runnable:i,programLog:e,vertexShader:{log:t,prefix:y},fragmentShader:{log:n,prefix:_}})}let T,R;return r.deleteShader(w),r.deleteShader(E),this.getUniforms=function(){return void 0===T&&(T=new wr(r,x)),T},this.getAttributes=function(){return void 0===R&&(R=function(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=e.getActiveAttrib(t,r),a=i.name;let o=1;i.type===e.FLOAT_MAT2&&(o=2),i.type===e.FLOAT_MAT3&&(o=3),i.type===e.FLOAT_MAT4&&(o=4),n[a]={type:i.type,location:e.getAttribLocation(t,a),locationSize:o}}return n}(r,x)),R},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(x),this.program=void 0},this.name=n.shaderName,this.id=Tr++,this.cacheKey=t,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=E,this}let Vr=0;class Wr{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return!1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,0===e.usedTimes&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;return!1===t.has(e)&&t.set(e,new Set),t.get(e)}_getShaderStage(e){const t=this.shaderCache;if(!1===t.has(e)){const n=new qr(e);t.set(e,n)}return t.get(e)}}class qr{constructor(e){this.id=Vr++,this.code=e,this.usedTimes=0}}function Xr(e,t,n,i,r,a,o){const s=new pt,l=new Wr,c=[],h=r.isWebGL2,d=r.logarithmicDepthBuffer,u=r.vertexTextures;let f=r.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(a,s,c,g,v){const x=g.fog,y=v.geometry,_=a.isMeshStandardMaterial?g.environment:null,M=(a.isMeshStandardMaterial?n:t).get(a.envMap||_),S=M&&M.mapping===p?M.image.height:null,b=m[a.type];null!==a.precision&&(f=r.getMaxPrecision(a.precision),f!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",f,"instead."));const w=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,E=void 0!==w?w.length:0;let T,R,C,D,A=0;if(void 0!==y.morphAttributes.position&&(A=1),void 0!==y.morphAttributes.normal&&(A=2),void 0!==y.morphAttributes.color&&(A=3),b){const e=qn[b];T=e.vertexShader,R=e.fragmentShader}else T=a.vertexShader,R=a.fragmentShader,l.update(a),C=l.getVertexShaderID(a),D=l.getFragmentShaderID(a);const I=e.getRenderTarget(),P=a.alphaTest>0,L=a.clearcoat>0,F=a.iridescence>0;return{isWebGL2:h,shaderID:b,shaderName:a.type,vertexShader:T,fragmentShader:R,defines:a.defines,customVertexShaderID:C,customFragmentShaderID:D,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:f,instancing:!0===v.isInstancedMesh,instancingColor:!0===v.isInstancedMesh&&null!==v.instanceColor,supportsVertexTextures:u,outputEncoding:null===I?e.outputEncoding:!0===I.isXRRenderTarget?I.texture.encoding:U,map:!!a.map,matcap:!!a.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:S,lightMap:!!a.lightMap,aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:1===a.normalMapType,tangentSpaceNormalMap:0===a.normalMapType,decodeVideoTexture:!!a.map&&!0===a.map.isVideoTexture&&a.map.encoding===k,clearcoat:L,clearcoatMap:L&&!!a.clearcoatMap,clearcoatRoughnessMap:L&&!!a.clearcoatRoughnessMap,clearcoatNormalMap:L&&!!a.clearcoatNormalMap,iridescence:F,iridescenceMap:F&&!!a.iridescenceMap,iridescenceThicknessMap:F&&!!a.iridescenceThicknessMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularColorMap:!!a.specularColorMap,opaque:!1===a.transparent&&1===a.blending,alphaMap:!!a.alphaMap,alphaTest:P,gradientMap:!!a.gradientMap,sheen:a.sheen>0,sheenColorMap:!!a.sheenColorMap,sheenRoughnessMap:!!a.sheenRoughnessMap,transmission:a.transmission>0,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!y.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!y.attributes.color&&4===y.attributes.color.itemSize,vertexUvs:!!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatMap||a.clearcoatRoughnessMap||a.clearcoatNormalMap||a.iridescenceMap||a.iridescenceThicknessMap||a.displacementMap||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheenColorMap||a.sheenRoughnessMap),uvsVertexOnly:!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatNormalMap||a.iridescenceMap||a.iridescenceThicknessMap||a.transmission>0||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheen>0||a.sheenColorMap||a.sheenRoughnessMap||!a.displacementMap),fog:!!x,useFog:!0===a.fog,fogExp2:x&&x.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===v.isSkinnedMesh,morphTargets:void 0!==y.morphAttributes.position,morphNormals:void 0!==y.morphAttributes.normal,morphColors:void 0!==y.morphAttributes.color,morphTargetsCount:E,morphTextureStride:A,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numRectAreaLights:s.rectArea.length,numHemiLights:s.hemi.length,numDirLightShadows:s.directionalShadowMap.length,numPointLightShadows:s.pointShadowMap.length,numSpotLightShadows:s.spotShadowMap.length,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:a.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:a.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:!!a.depthPacking,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:h||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||i.has("EXT_shader_texture_lod"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(function(e,t){e.push(t.precision),e.push(t.outputEncoding),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.combine),e.push(t.vertexUvs),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){s.disableAll(),t.isWebGL2&&s.enable(0),t.supportsVertexTextures&&s.enable(1),t.instancing&&s.enable(2),t.instancingColor&&s.enable(3),t.map&&s.enable(4),t.matcap&&s.enable(5),t.envMap&&s.enable(6),t.lightMap&&s.enable(7),t.aoMap&&s.enable(8),t.emissiveMap&&s.enable(9),t.bumpMap&&s.enable(10),t.normalMap&&s.enable(11),t.objectSpaceNormalMap&&s.enable(12),t.tangentSpaceNormalMap&&s.enable(13),t.clearcoat&&s.enable(14),t.clearcoatMap&&s.enable(15),t.clearcoatRoughnessMap&&s.enable(16),t.clearcoatNormalMap&&s.enable(17),t.iridescence&&s.enable(18),t.iridescenceMap&&s.enable(19),t.iridescenceThicknessMap&&s.enable(20),t.displacementMap&&s.enable(21),t.specularMap&&s.enable(22),t.roughnessMap&&s.enable(23),t.metalnessMap&&s.enable(24),t.gradientMap&&s.enable(25),t.alphaMap&&s.enable(26),t.alphaTest&&s.enable(27),t.vertexColors&&s.enable(28),t.vertexAlphas&&s.enable(29),t.vertexUvs&&s.enable(30),t.vertexTangents&&s.enable(31),t.uvsVertexOnly&&s.enable(32),t.fog&&s.enable(33),e.push(s.mask),s.disableAll(),t.useFog&&s.enable(0),t.flatShading&&s.enable(1),t.logarithmicDepthBuffer&&s.enable(2),t.skinning&&s.enable(3),t.morphTargets&&s.enable(4),t.morphNormals&&s.enable(5),t.morphColors&&s.enable(6),t.premultipliedAlpha&&s.enable(7),t.shadowMapEnabled&&s.enable(8),t.physicallyCorrectLights&&s.enable(9),t.doubleSided&&s.enable(10),t.flipSided&&s.enable(11),t.useDepthPacking&&s.enable(12),t.dithering&&s.enable(13),t.specularIntensityMap&&s.enable(14),t.specularColorMap&&s.enable(15),t.transmission&&s.enable(16),t.transmissionMap&&s.enable(17),t.thicknessMap&&s.enable(18),t.sheen&&s.enable(19),t.sheenColorMap&&s.enable(20),t.sheenRoughnessMap&&s.enable(21),t.decodeVideoTexture&&s.enable(22),t.opaque&&s.enable(23),e.push(s.mask)}(n,t),n.push(e.outputEncoding)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=m[e.type];let n;if(t){const e=qn[t];n=En.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,t=c.length;e<t;e++){const t=c[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new Hr(e,n,t,a),c.push(i)),i},releaseProgram:function(e){if(0==--e.usedTimes){const t=c.indexOf(e);c[t]=c[c.length-1],c.pop(),e.destroy()}},releaseShaderCache:function(e){l.remove(e)},programs:c,dispose:function(){l.dispose()}}}function jr(){let e=new WeakMap;return{get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function Yr(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Zr(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Kr(){const e=[];let t=0;const n=[],i=[],r=[];function a(n,i,r,a,o,s){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:o,group:s},e[t]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=o,l.group=s),t++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){t=0,n.length=0,i.length=0,r.length=0},push:function(e,t,o,s,l,c){const h=a(e,t,o,s,l,c);o.transmission>0?i.push(h):!0===o.transparent?r.push(h):n.push(h)},unshift:function(e,t,o,s,l,c){const h=a(e,t,o,s,l,c);o.transmission>0?i.unshift(h):!0===o.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=t,i=e.length;n<i;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||Yr),i.length>1&&i.sort(t||Zr),r.length>1&&r.sort(t||Zr)}}}function Jr(){let e=new WeakMap;return{get:function(t,n){let i;return!1===e.has(t)?(i=new Kr,e.set(t,[i])):n>=e.get(t).length?(i=new Kr,e.get(t).push(i)):i=e.get(t)[n],i},dispose:function(){e=new WeakMap}}}function Qr(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new Ee,color:new pe};break;case"SpotLight":n={position:new Ee,direction:new Ee,color:new pe,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Ee,color:new pe,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Ee,skyColor:new pe,groundColor:new pe};break;case"RectAreaLight":n={color:new pe,position:new Ee,halfWidth:new Ee,halfHeight:new Ee}}return e[t.id]=n,n}}}let $r=0;function ea(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function ta(e,t){const n=new Qr,i=function(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)r.probe.push(new Ee);const a=new Ee,o=new nt,s=new nt;return{setup:function(a,o){let s=0,l=0,c=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let h=0,d=0,u=0,p=0,f=0,m=0,g=0,v=0;a.sort(ea);const x=!0!==o?Math.PI:1;for(let e=0,t=a.length;e<t;e++){const t=a[e],o=t.color,y=t.intensity,_=t.distance,M=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)s+=o.r*y*x,l+=o.g*y*x,c+=o.b*y*x;else if(t.isLightProbe)for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],y);else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*x),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.directionalShadow[h]=n,r.directionalShadowMap[h]=M,r.directionalShadowMatrix[h]=t.shadow.matrix,m++}r.directional[h]=e,h++}else if(t.isSpotLight){const e=n.get(t);if(e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(o).multiplyScalar(y*x),e.distance=_,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.spotShadow[u]=n,r.spotShadowMap[u]=M,r.spotShadowMatrix[u]=t.shadow.matrix,v++}r.spot[u]=e,u++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(o).multiplyScalar(y),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[p]=e,p++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*x),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,r.pointShadow[d]=n,r.pointShadowMap[d]=M,r.pointShadowMatrix[d]=t.shadow.matrix,g++}r.point[d]=e,d++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(y*x),e.groundColor.copy(t.groundColor).multiplyScalar(y*x),r.hemi[f]=e,f++}}p>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=Wn.LTC_FLOAT_1,r.rectAreaLTC2=Wn.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=Wn.LTC_HALF_1,r.rectAreaLTC2=Wn.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=s,r.ambient[1]=l,r.ambient[2]=c;const y=r.hash;y.directionalLength===h&&y.pointLength===d&&y.spotLength===u&&y.rectAreaLength===p&&y.hemiLength===f&&y.numDirectionalShadows===m&&y.numPointShadows===g&&y.numSpotShadows===v||(r.directional.length=h,r.spot.length=u,r.rectArea.length=p,r.point.length=d,r.hemi.length=f,r.directionalShadow.length=m,r.directionalShadowMap.length=m,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=m,r.pointShadowMatrix.length=g,r.spotShadowMatrix.length=v,y.directionalLength=h,y.pointLength=d,y.spotLength=u,y.rectAreaLength=p,y.hemiLength=f,y.numDirectionalShadows=m,y.numPointShadows=g,y.numSpotShadows=v,r.version=$r++)},setupView:function(e,t){let n=0,i=0,l=0,c=0,h=0;const d=t.matrixWorldInverse;for(let t=0,u=e.length;t<u;t++){const u=e[t];if(u.isDirectionalLight){const e=r.directional[n];e.direction.setFromMatrixPosition(u.matrixWorld),a.setFromMatrixPosition(u.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(d),n++}else if(u.isSpotLight){const e=r.spot[l];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(d),e.direction.setFromMatrixPosition(u.matrixWorld),a.setFromMatrixPosition(u.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(d),l++}else if(u.isRectAreaLight){const e=r.rectArea[c];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(d),s.identity(),o.copy(u.matrixWorld),o.premultiply(d),s.extractRotation(o),e.halfWidth.set(.5*u.width,0,0),e.halfHeight.set(0,.5*u.height,0),e.halfWidth.applyMatrix4(s),e.halfHeight.applyMatrix4(s),c++}else if(u.isPointLight){const e=r.point[i];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(d),i++}else if(u.isHemisphereLight){const e=r.hemi[h];e.direction.setFromMatrixPosition(u.matrixWorld),e.direction.transformDirection(d),h++}}},state:r}}function na(e,t){const n=new ta(e,t),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(e){n.setup(i,e)},setupLightsView:function(e){n.setupView(i,e)},pushLight:function(e){i.push(e)},pushShadow:function(e){r.push(e)}}}function ia(e,t){let n=new WeakMap;return{get:function(i,r=0){let a;return!1===n.has(i)?(a=new na(e,t),n.set(i,[a])):r>=n.get(i).length?(a=new na(e,t),n.get(i).push(a)):a=n.get(i)[r],a},dispose:function(){n=new WeakMap}}}class ra extends zt{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class aa extends zt{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new Ee,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function oa(e,t,n){let i=new Bn;const r=new $,a=new $,o=new _e,s=new ra({depthPacking:3201}),l=new aa,c={},h=n.maxTextureSize,d={0:1,1:0,2:2},u=new Tn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new $},radius:{value:4}},vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n",fragmentShader:"\nuniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n\n#include <packing>\n\nvoid main() {\n\n\tconst float samples = float( VSM_SAMPLES );\n\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\n\t// This seems totally useless but it's a crazy work around for a Adreno compiler bug\n\t// float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\n\t\t#ifdef HORIZONTAL_PASS\n\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\n\t\t#else\n\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\n\t\t#endif\n\n\t}\n\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n\n}\n"}),p=u.clone();p.defines.HORIZONTAL_PASS=1;const f=new tn;f.setAttribute("position",new Wt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new _n(f,u),g=this;function x(n,i){const r=t.update(m);u.defines.VSM_SAMPLES!==n.blurSamples&&(u.defines.VSM_SAMPLES=n.blurSamples,p.defines.VSM_SAMPLES=n.blurSamples,u.needsUpdate=!0,p.needsUpdate=!0),u.uniforms.shadow_pass.value=n.map.texture,u.uniforms.resolution.value=n.mapSize,u.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,r,u,m,null),p.uniforms.shadow_pass.value=n.mapPass.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,r,p,m,null)}function y(t,n,i,r,a,o){let h=null;const u=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(h=void 0!==u?u:!0===i.isPointLight?l:s,e.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0){const e=h.uuid,t=n.uuid;let i=c[e];void 0===i&&(i={},c[e]=i);let r=i[t];void 0===r&&(r=h.clone(),i[t]=r),h=r}return h.visible=n.visible,h.wireframe=n.wireframe,h.side=3===o?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:d[n.side],h.alphaMap=n.alphaMap,h.alphaTest=n.alphaTest,h.clipShadows=n.clipShadows,h.clippingPlanes=n.clippingPlanes,h.clipIntersection=n.clipIntersection,h.displacementMap=n.displacementMap,h.displacementScale=n.displacementScale,h.displacementBias=n.displacementBias,h.wireframeLinewidth=n.wireframeLinewidth,h.linewidth=n.linewidth,!0===i.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(i.matrixWorld),h.nearDistance=r,h.farDistance=a),h}function _(n,r,a,o,s){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===s)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=t.update(n),r=n.material;if(Array.isArray(r)){const t=i.groups;for(let l=0,c=t.length;l<c;l++){const c=t[l],h=r[c.materialIndex];if(h&&h.visible){const t=y(n,h,o,a.near,a.far,s);e.renderBufferDirect(a,null,i,t,n,c)}}}else if(r.visible){const t=y(n,r,o,a.near,a.far,s);e.renderBufferDirect(a,null,i,t,n,null)}}const l=n.children;for(let e=0,t=l.length;e<t;e++)_(l[e],r,a,o,s)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,n,s){if(!1===g.enabled)return;if(!1===g.autoUpdate&&!1===g.needsUpdate)return;if(0===t.length)return;const l=e.getRenderTarget(),c=e.getActiveCubeFace(),d=e.getActiveMipmapLevel(),u=e.state;u.setBlending(0),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);for(let l=0,c=t.length;l<c;l++){const c=t[l],d=c.shadow;if(void 0===d){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===d.autoUpdate&&!1===d.needsUpdate)continue;r.copy(d.mapSize);const p=d.getFrameExtents();if(r.multiply(p),a.copy(d.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(a.x=Math.floor(h/p.x),r.x=a.x*p.x,d.mapSize.x=a.x),r.y>h&&(a.y=Math.floor(h/p.y),r.y=a.y*p.y,d.mapSize.y=a.y)),null!==d.map||d.isPointLightShadow||3!==this.type||(d.map=new Me(r.x,r.y),d.map.texture.name=c.name+".shadowMap",d.mapPass=new Me(r.x,r.y),d.camera.updateProjectionMatrix()),null===d.map){const e={minFilter:v,magFilter:v,format:T};d.map=new Me(r.x,r.y,e),d.map.texture.name=c.name+".shadowMap",d.camera.updateProjectionMatrix()}e.setRenderTarget(d.map),e.clear();const f=d.getViewportCount();for(let e=0;e<f;e++){const t=d.getViewport(e);o.set(a.x*t.x,a.y*t.y,a.x*t.z,a.y*t.w),u.viewport(o),d.updateMatrices(c,e),i=d.getFrustum(),_(n,s,d.camera,c,this.type)}d.isPointLightShadow||3!==this.type||x(d,s),d.needsUpdate=!1}g.needsUpdate=!1,e.setRenderTarget(l,c,d)}}function sa(e,t,n){const i=n.isWebGL2,r=new function(){let t=!1;const n=new _e;let i=null;const r=new _e(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,a,o,s){!0===s&&(t*=o,i*=o,a*=o),n.set(t,i,a,o),!1===r.equals(n)&&(e.clearColor(t,i,a,o),r.copy(n))},reset:function(){t=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){let t=!1,n=null,i=null,r=null;return{setTest:function(t){t?B(e.DEPTH_TEST):z(e.DEPTH_TEST)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){if(t)switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}else e.depthFunc(e.LEQUAL);i=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:function(){t=!1,n=null,i=null,r=null}}},o=new function(){let t=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null;return{setTest:function(n){t||(n?B(e.STENCIL_TEST):z(e.STENCIL_TEST))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,o){i===t&&r===n&&a===o||(e.stencilFunc(t,n,o),i=t,r=n,a=o)},setOp:function(t,n,i){o===t&&s===n&&l===i||(e.stencilOp(t,n,i),o=t,s=n,l=i)},setLocked:function(e){t=e},setClear:function(t){c!==t&&(e.clearStencil(t),c=t)},reset:function(){t=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null}}};let s={},l={},c=new WeakMap,d=[],u=null,p=!1,f=null,m=null,g=null,v=null,x=null,y=null,_=null,M=!1,S=null,b=null,w=null,E=null,T=null;const R=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let C=!1,D=0;const A=e.getParameter(e.VERSION);-1!==A.indexOf("WebGL")?(D=parseFloat(/^WebGL (\d)/.exec(A)[1]),C=D>=1):-1!==A.indexOf("OpenGL ES")&&(D=parseFloat(/^OpenGL ES (\d)/.exec(A)[1]),C=D>=2);let I=null,P={};const L=e.getParameter(e.SCISSOR_BOX),F=e.getParameter(e.VIEWPORT),O=(new _e).fromArray(L),N=(new _e).fromArray(F);function U(t,n,i){const r=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let t=0;t<i;t++)e.texImage2D(n+t,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,r);return a}const k={};function B(t){!0!==s[t]&&(e.enable(t),s[t]=!0)}function z(t){!1!==s[t]&&(e.disable(t),s[t]=!1)}k[e.TEXTURE_2D]=U(e.TEXTURE_2D,e.TEXTURE_2D,1),k[e.TEXTURE_CUBE_MAP]=U(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),B(e.DEPTH_TEST),a.setFunc(3),W(!1),q(1),B(e.CULL_FACE),V(0);const G={[h]:e.FUNC_ADD,101:e.FUNC_SUBTRACT,102:e.FUNC_REVERSE_SUBTRACT};if(i)G[103]=e.MIN,G[104]=e.MAX;else{const e=t.get("EXT_blend_minmax");null!==e&&(G[103]=e.MIN_EXT,G[104]=e.MAX_EXT)}const H={200:e.ZERO,201:e.ONE,202:e.SRC_COLOR,204:e.SRC_ALPHA,210:e.SRC_ALPHA_SATURATE,208:e.DST_COLOR,206:e.DST_ALPHA,203:e.ONE_MINUS_SRC_COLOR,205:e.ONE_MINUS_SRC_ALPHA,209:e.ONE_MINUS_DST_COLOR,207:e.ONE_MINUS_DST_ALPHA};function V(t,n,i,r,a,o,s,l){if(0!==t){if(!1===p&&(B(e.BLEND),p=!0),5===t)a=a||n,o=o||i,s=s||r,n===m&&a===x||(e.blendEquationSeparate(G[n],G[a]),m=n,x=a),i===g&&r===v&&o===y&&s===_||(e.blendFuncSeparate(H[i],H[r],H[o],H[s]),g=i,v=r,y=o,_=s),f=t,M=null;else if(t!==f||l!==M){if(m===h&&x===h||(e.blendEquation(e.FUNC_ADD),m=h,x=h),l)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}g=null,v=null,y=null,_=null,f=t,M=l}}else!0===p&&(z(e.BLEND),p=!1)}function W(t){S!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),S=t)}function q(t){0!==t?(B(e.CULL_FACE),t!==b&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):z(e.CULL_FACE),b=t}function X(t,n,i){t?(B(e.POLYGON_OFFSET_FILL),E===n&&T===i||(e.polygonOffset(n,i),E=n,T=i)):z(e.POLYGON_OFFSET_FILL)}function j(t){void 0===t&&(t=e.TEXTURE0+R-1),I!==t&&(e.activeTexture(t),I=t)}return{buffers:{color:r,depth:a,stencil:o},enable:B,disable:z,bindFramebuffer:function(t,n){return l[t]!==n&&(e.bindFramebuffer(t,n),l[t]=n,i&&(t===e.DRAW_FRAMEBUFFER&&(l[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(l[e.DRAW_FRAMEBUFFER]=n)),!0)},drawBuffers:function(i,r){let a=d,o=!1;if(i)if(a=c.get(r),void 0===a&&(a=[],c.set(r,a)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(a.length!==t.length||a[0]!==e.COLOR_ATTACHMENT0){for(let n=0,i=t.length;n<i;n++)a[n]=e.COLOR_ATTACHMENT0+n;a.length=t.length,o=!0}}else a[0]!==e.COLOR_ATTACHMENT0&&(a[0]=e.COLOR_ATTACHMENT0,o=!0);else a[0]!==e.BACK&&(a[0]=e.BACK,o=!0);o&&(n.isWebGL2?e.drawBuffers(a):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(a))},useProgram:function(t){return u!==t&&(e.useProgram(t),u=t,!0)},setBlending:V,setMaterial:function(t,n){2===t.side?z(e.CULL_FACE):B(e.CULL_FACE);let i=1===t.side;n&&(i=!i),W(i),1===t.blending&&!1===t.transparent?V(0):V(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);const s=t.stencilWrite;o.setTest(s),s&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?B(e.SAMPLE_ALPHA_TO_COVERAGE):z(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:W,setCullFace:q,setLineWidth:function(t){t!==w&&(C&&e.lineWidth(t),w=t)},setPolygonOffset:X,setScissorTest:function(t){t?B(e.SCISSOR_TEST):z(e.SCISSOR_TEST)},activeTexture:j,bindTexture:function(t,n){null===I&&j();let i=P[I];void 0===i&&(i={type:void 0,texture:void 0},P[I]=i),i.type===t&&i.texture===n||(e.bindTexture(t,n||k[t]),i.type=t,i.texture=n)},unbindTexture:function(){const t=P[I];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===O.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),O.copy(t))},viewport:function(t){!1===N.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),N.copy(t))},reset:function(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),!0===i&&(e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),s={},I=null,P={},l={},c=new WeakMap,d=[],u=null,p=!1,f=null,m=null,g=null,v=null,x=null,y=null,_=null,M=!1,S=null,b=null,w=null,E=null,T=null,O.set(0,0,e.canvas.width,e.canvas.height),N.set(0,0,e.canvas.width,e.canvas.height),r.reset(),a.reset(),o.reset()}}}function la(e,t,n,i,r,a,o){const s=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,d=r.maxSamples,u=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,p=/OculusBrowser/g.test(navigator.userAgent),D=new WeakMap;let A;const I=new WeakMap;let P=!1;try{P="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function L(e,t){return P?new OffscreenCanvas(e,t):ne("canvas")}function F(e,t,n,i){let r=1;if((e.width>i||e.height>i)&&(r=i/Math.max(e.width,e.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const i=t?Q:Math.floor,a=i(r*e.width),o=i(r*e.height);void 0===A&&(A=L(a,o));const s=n?L(a,o):A;return s.width=a,s.height=o,s.getContext("2d").drawImage(e,0,0,a,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+o+")."),s}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function O(e){return J(e.width)&&J(e.height)}function N(e,t){return e.generateMipmaps&&t&&e.minFilter!==v&&e.minFilter!==x}function B(t){e.generateMipmap(t)}function z(n,i,r,a,o=!1){if(!1===s)return i;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;return i===e.RED&&(r===e.FLOAT&&(l=e.R32F),r===e.HALF_FLOAT&&(l=e.R16F),r===e.UNSIGNED_BYTE&&(l=e.R8)),i===e.RG&&(r===e.FLOAT&&(l=e.RG32F),r===e.HALF_FLOAT&&(l=e.RG16F),r===e.UNSIGNED_BYTE&&(l=e.RG8)),i===e.RGBA&&(r===e.FLOAT&&(l=e.RGBA32F),r===e.HALF_FLOAT&&(l=e.RGBA16F),r===e.UNSIGNED_BYTE&&(l=a===k&&!1===o?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(l=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(l=e.RGB5_A1)),l!==e.R16F&&l!==e.R32F&&l!==e.RG16F&&l!==e.RG32F&&l!==e.RGBA16F&&l!==e.RGBA32F||t.get("EXT_color_buffer_float"),l}function G(e,t,n){return!0===N(e,n)||e.isFramebufferTexture&&e.minFilter!==v&&e.minFilter!==x?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function H(t){return t===v||1004===t||1005===t?e.NEAREST:e.LINEAR}function W(e){const t=e.target;t.removeEventListener("dispose",W),function(e){const t=i.get(e);if(void 0===t.__webglInit)return;const n=e.source,r=I.get(n);if(r){const i=r[t.__cacheKey];i.usedTimes--,0===i.usedTimes&&X(e),0===Object.keys(r).length&&I.delete(n)}i.remove(e)}(t),t.isVideoTexture&&D.delete(t)}function q(t){const n=t.target;n.removeEventListener("dispose",q),function(t){const n=t.texture,r=i.get(t),a=i.get(n);if(void 0!==a.__webglTexture&&(e.deleteTexture(a.__webglTexture),o.memory.textures--),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++)e.deleteFramebuffer(r.__webglFramebuffer[t]),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[t]);else{if(e.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&e.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let t=0;t<r.__webglColorRenderbuffer.length;t++)r.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(r.__webglColorRenderbuffer[t]);r.__webglDepthRenderbuffer&&e.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(t.isWebGLMultipleRenderTargets)for(let t=0,r=n.length;t<r;t++){const r=i.get(n[t]);r.__webglTexture&&(e.deleteTexture(r.__webglTexture),o.memory.textures--),i.remove(n[t])}i.remove(n),i.remove(t)}(n)}function X(t){const n=i.get(t);e.deleteTexture(n.__webglTexture);const r=t.source;delete I.get(r)[n.__cacheKey],o.memory.textures--}let j=0;function Y(t,r){const a=i.get(t);if(t.isVideoTexture&&function(e){const t=o.render.frame;D.get(e)!==t&&(D.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version){const e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==e.complete)return void te(a,t,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_2D,a.__webglTexture)}const Z={[f]:e.REPEAT,[m]:e.CLAMP_TO_EDGE,[g]:e.MIRRORED_REPEAT},K={[v]:e.NEAREST,1004:e.NEAREST_MIPMAP_NEAREST,1005:e.NEAREST_MIPMAP_LINEAR,[x]:e.LINEAR,1007:e.LINEAR_MIPMAP_NEAREST,[y]:e.LINEAR_MIPMAP_LINEAR};function $(n,a,o){if(o?(e.texParameteri(n,e.TEXTURE_WRAP_S,Z[a.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,Z[a.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,Z[a.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,K[a.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,K[a.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),a.wrapS===m&&a.wrapT===m||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,e.TEXTURE_MAG_FILTER,H(a.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,H(a.minFilter)),a.minFilter!==v&&a.minFilter!==x&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===t.has("EXT_texture_filter_anisotropic")){const o=t.get("EXT_texture_filter_anisotropic");if(a.type===b&&!1===t.has("OES_texture_float_linear"))return;if(!1===s&&a.type===w&&!1===t.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function ee(t,n){let i=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",W));const r=n.source;let a=I.get(r);void 0===a&&(a={},I.set(r,a));const s=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.encoding),t.join()}(n);if(s!==t.__cacheKey){void 0===a[s]&&(a[s]={texture:e.createTexture(),usedTimes:0},o.memory.textures++,i=!0),a[s].usedTimes++;const r=a[t.__cacheKey];void 0!==r&&(a[t.__cacheKey].usedTimes--,0===r.usedTimes&&X(n)),t.__cacheKey=s,t.__webglTexture=a[s].texture}return i}function te(t,i,r){let o=e.TEXTURE_2D;i.isDataArrayTexture&&(o=e.TEXTURE_2D_ARRAY),i.isData3DTexture&&(o=e.TEXTURE_3D);const l=ee(t,i),c=i.source;if(n.activeTexture(e.TEXTURE0+r),n.bindTexture(o,t.__webglTexture),c.version!==c.__currentVersion||!0===l){e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE);const t=function(e){return!s&&(e.wrapS!==m||e.wrapT!==m||e.minFilter!==v&&e.minFilter!==x)}(i)&&!1===O(i.image);let r=F(i.image,t,!1,h);r=le(i,r);const d=O(r)||s,u=a.convert(i.format,i.encoding);let p,f=a.convert(i.type),g=z(i.internalFormat,u,f,i.encoding,i.isVideoTexture);$(o,i,d);const y=i.mipmaps,_=s&&!0!==i.isVideoTexture,w=void 0===c.__currentVersion||!0===l,D=G(i,r,d);if(i.isDepthTexture)g=e.DEPTH_COMPONENT,s?g=i.type===b?e.DEPTH_COMPONENT32F:i.type===S?e.DEPTH_COMPONENT24:i.type===E?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:i.type===b&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),i.format===R&&g===e.DEPTH_COMPONENT&&i.type!==M&&i.type!==S&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=S,f=a.convert(i.type)),i.format===C&&g===e.DEPTH_COMPONENT&&(g=e.DEPTH_STENCIL,i.type!==E&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=E,f=a.convert(i.type))),w&&(_?n.texStorage2D(e.TEXTURE_2D,1,g,r.width,r.height):n.texImage2D(e.TEXTURE_2D,0,g,r.width,r.height,0,u,f,null));else if(i.isDataTexture)if(y.length>0&&d){_&&w&&n.texStorage2D(e.TEXTURE_2D,D,g,y[0].width,y[0].height);for(let t=0,i=y.length;t<i;t++)p=y[t],_?n.texSubImage2D(e.TEXTURE_2D,t,0,0,p.width,p.height,u,f,p.data):n.texImage2D(e.TEXTURE_2D,t,g,p.width,p.height,0,u,f,p.data);i.generateMipmaps=!1}else _?(w&&n.texStorage2D(e.TEXTURE_2D,D,g,r.width,r.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,r.width,r.height,u,f,r.data)):n.texImage2D(e.TEXTURE_2D,0,g,r.width,r.height,0,u,f,r.data);else if(i.isCompressedTexture){_&&w&&n.texStorage2D(e.TEXTURE_2D,D,g,y[0].width,y[0].height);for(let t=0,r=y.length;t<r;t++)p=y[t],i.format!==T?null!==u?_?n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,p.width,p.height,u,p.data):n.compressedTexImage2D(e.TEXTURE_2D,t,g,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):_?n.texSubImage2D(e.TEXTURE_2D,t,0,0,p.width,p.height,u,f,p.data):n.texImage2D(e.TEXTURE_2D,t,g,p.width,p.height,0,u,f,p.data)}else if(i.isDataArrayTexture)_?(w&&n.texStorage3D(e.TEXTURE_2D_ARRAY,D,g,r.width,r.height,r.depth),n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,r.width,r.height,r.depth,u,f,r.data)):n.texImage3D(e.TEXTURE_2D_ARRAY,0,g,r.width,r.height,r.depth,0,u,f,r.data);else if(i.isData3DTexture)_?(w&&n.texStorage3D(e.TEXTURE_3D,D,g,r.width,r.height,r.depth),n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,r.width,r.height,r.depth,u,f,r.data)):n.texImage3D(e.TEXTURE_3D,0,g,r.width,r.height,r.depth,0,u,f,r.data);else if(i.isFramebufferTexture){if(w)if(_)n.texStorage2D(e.TEXTURE_2D,D,g,r.width,r.height);else{let t=r.width,i=r.height;for(let r=0;r<D;r++)n.texImage2D(e.TEXTURE_2D,r,g,t,i,0,u,f,null),t>>=1,i>>=1}}else if(y.length>0&&d){_&&w&&n.texStorage2D(e.TEXTURE_2D,D,g,y[0].width,y[0].height);for(let t=0,i=y.length;t<i;t++)p=y[t],_?n.texSubImage2D(e.TEXTURE_2D,t,0,0,u,f,p):n.texImage2D(e.TEXTURE_2D,t,g,u,f,p);i.generateMipmaps=!1}else _?(w&&n.texStorage2D(e.TEXTURE_2D,D,g,r.width,r.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,u,f,r)):n.texImage2D(e.TEXTURE_2D,0,g,u,f,r);N(i,d)&&B(o),c.__currentVersion=c.version,i.onUpdate&&i.onUpdate(i)}t.__version=i.version}function ie(t,r,o,s,l){const c=a.convert(o.format,o.encoding),h=a.convert(o.type),d=z(o.internalFormat,c,h,o.encoding);i.get(r).__hasExternalTextures||(l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?n.texImage3D(l,0,d,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,d,r.width,r.height,0,c,h,null)),n.bindFramebuffer(e.FRAMEBUFFER,t),se(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,l,i.get(o).__webglTexture,0,oe(r)):e.framebufferTexture2D(e.FRAMEBUFFER,s,l,i.get(o).__webglTexture,0),n.bindFramebuffer(e.FRAMEBUFFER,null)}function re(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let r=e.DEPTH_COMPONENT16;if(i||se(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===b?r=e.DEPTH_COMPONENT32F:t.type===S&&(r=e.DEPTH_COMPONENT24));const i=oe(n);se(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,i,r,n.width,n.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,i,r,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,r,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const r=oe(n);i&&!1===se(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):se(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=!0===n.isWebGLMultipleRenderTargets?n.texture:[n.texture];for(let r=0;r<t.length;r++){const o=t[r],s=a.convert(o.format,o.encoding),l=a.convert(o.type),c=z(o.internalFormat,s,l,o.encoding),h=oe(n);i&&!1===se(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,h,c,n.width,n.height):se(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,h,c,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,c,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function ae(t){const r=i.get(t),a=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),Y(r.depthTexture,0);const a=i.get(r.depthTexture).__webglTexture,o=oe(r);if(r.depthTexture.format===R)se(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0);else{if(r.depthTexture.format!==C)throw new Error("Unknown depthTexture format");se(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,a,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,a,0)}}(r.__webglFramebuffer,t)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=e.createRenderbuffer(),re(r.__webglDepthbuffer[i],t,!1)}else n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),re(r.__webglDepthbuffer,t,!1);n.bindFramebuffer(e.FRAMEBUFFER,null)}function oe(e){return Math.min(d,e.samples)}function se(e){const n=i.get(e);return s&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function le(e,n){const i=e.encoding,r=e.format,a=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||e.format===V||i!==U&&(i===k?!1===s?!0===t.has("EXT_sRGB")&&r===T?(e.format=V,e.minFilter=x,e.generateMipmaps=!1):n=me.sRGBToLinear(n):r===T&&a===_||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",i)),n}this.allocateTextureUnit=function(){const e=j;return e>=l&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+l),j+=1,e},this.resetTextureUnits=function(){j=0},this.setTexture2D=Y,this.setTexture2DArray=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?te(a,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture))},this.setTexture3D=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?te(a,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_3D,a.__webglTexture))},this.setTextureCube=function(t,r){const o=i.get(t);t.version>0&&o.__version!==t.version?function(t,i,r){if(6!==i.image.length)return;const o=ee(t,i),l=i.source;if(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture),l.version!==l.__currentVersion||!0===o){e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE);const t=i.isCompressedTexture||i.image[0].isCompressedTexture,r=i.image[0]&&i.image[0].isDataTexture,h=[];for(let e=0;e<6;e++)h[e]=t||r?r?i.image[e].image:i.image[e]:F(i.image[e],!1,!0,c),h[e]=le(i,h[e]);const d=h[0],u=O(d)||s,p=a.convert(i.format,i.encoding),f=a.convert(i.type),m=z(i.internalFormat,p,f,i.encoding),g=s&&!0!==i.isVideoTexture,v=void 0===l.__currentVersion||!0===o;let x,y=G(i,d,u);if($(e.TEXTURE_CUBE_MAP,i,u),t){g&&v&&n.texStorage2D(e.TEXTURE_CUBE_MAP,y,m,d.width,d.height);for(let t=0;t<6;t++){x=h[t].mipmaps;for(let r=0;r<x.length;r++){const a=x[r];i.format!==T?null!==p?g?n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,p,a.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,m,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):g?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,p,f,a.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,m,a.width,a.height,0,p,f,a.data)}}}else{x=i.mipmaps,g&&v&&(x.length>0&&y++,n.texStorage2D(e.TEXTURE_CUBE_MAP,y,m,h[0].width,h[0].height));for(let t=0;t<6;t++)if(r){g?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,h[t].width,h[t].height,p,f,h[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,m,h[t].width,h[t].height,0,p,f,h[t].data);for(let i=0;i<x.length;i++){const r=x[i].image[t].image;g?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,r.width,r.height,p,f,r.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,m,r.width,r.height,0,p,f,r.data)}}else{g?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,p,f,h[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,m,p,f,h[t]);for(let i=0;i<x.length;i++){const r=x[i];g?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,p,f,r.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,m,p,f,r.image[t])}}}N(i,u)&&B(e.TEXTURE_CUBE_MAP),l.__currentVersion=l.version,i.onUpdate&&i.onUpdate(i)}t.__version=i.version}(o,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_CUBE_MAP,o.__webglTexture))},this.rebindTextures=function(t,n,r){const a=i.get(t);void 0!==n&&ie(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),void 0!==r&&ae(t)},this.setupRenderTarget=function(t){const l=t.texture,c=i.get(t),h=i.get(l);t.addEventListener("dispose",q),!0!==t.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=e.createTexture()),h.__version=l.version,o.memory.textures++);const d=!0===t.isWebGLCubeRenderTarget,u=!0===t.isWebGLMultipleRenderTargets,p=O(t)||s;if(d){c.__webglFramebuffer=[];for(let t=0;t<6;t++)c.__webglFramebuffer[t]=e.createFramebuffer()}else{if(c.__webglFramebuffer=e.createFramebuffer(),u)if(r.drawBuffers){const n=t.texture;for(let t=0,r=n.length;t<r;t++){const r=i.get(n[t]);void 0===r.__webglTexture&&(r.__webglTexture=e.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(s&&t.samples>0&&!1===se(t)){const i=u?l:[l];c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer);for(let n=0;n<i.length;n++){const r=i[n];c.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,c.__webglColorRenderbuffer[n]);const o=a.convert(r.format,r.encoding),s=a.convert(r.type),l=z(r.internalFormat,o,s,r.encoding),h=oe(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,h,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,c.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),re(c.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(d){n.bindTexture(e.TEXTURE_CUBE_MAP,h.__webglTexture),$(e.TEXTURE_CUBE_MAP,l,p);for(let n=0;n<6;n++)ie(c.__webglFramebuffer[n],t,l,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n);N(l,p)&&B(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(u){const r=t.texture;for(let a=0,o=r.length;a<o;a++){const o=r[a],s=i.get(o);n.bindTexture(e.TEXTURE_2D,s.__webglTexture),$(e.TEXTURE_2D,o,p),ie(c.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D),N(o,p)&&B(e.TEXTURE_2D)}n.unbindTexture()}else{let i=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(s?i=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(i,h.__webglTexture),$(i,l,p),ie(c.__webglFramebuffer,t,l,e.COLOR_ATTACHMENT0,i),N(l,p)&&B(i),n.unbindTexture()}t.depthBuffer&&ae(t)},this.updateRenderTargetMipmap=function(t){const r=O(t)||s,a=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let o=0,s=a.length;o<s;o++){const s=a[o];if(N(s,r)){const r=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=i.get(s).__webglTexture;n.bindTexture(r,a),B(r),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(s&&t.samples>0&&!1===se(t)){const r=t.isWebGLMultipleRenderTargets?t.texture:[t.texture],a=t.width,o=t.height;let s=e.COLOR_BUFFER_BIT;const l=[],c=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,h=i.get(t),d=!0===t.isWebGLMultipleRenderTargets;if(d)for(let t=0;t<r.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,h.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,h.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,h.__webglMultisampledFramebuffer),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,h.__webglFramebuffer);for(let n=0;n<r.length;n++){l.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&l.push(c);const u=void 0!==h.__ignoreDepthValues&&h.__ignoreDepthValues;if(!1===u&&(t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)),d&&e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,h.__webglColorRenderbuffer[n]),!0===u&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[c]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[c])),d){const t=i.get(r[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,o,0,0,a,o,s,e.NEAREST),p&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l)}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),d)for(let t=0;t<r.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,h.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,h.__webglColorRenderbuffer[t]);const a=i.get(r[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,h.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,h.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=ae,this.setupFrameBufferTexture=ie,this.useMultisampledRTT=se}function ca(e,t,n){const i=n.isWebGL2;return{convert:function(n,r=null){let a;if(n===_)return e.UNSIGNED_BYTE;if(1017===n)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===n)return e.UNSIGNED_SHORT_5_5_5_1;if(1010===n)return e.BYTE;if(1011===n)return e.SHORT;if(n===M)return e.UNSIGNED_SHORT;if(1013===n)return e.INT;if(n===S)return e.UNSIGNED_INT;if(n===b)return e.FLOAT;if(n===w)return i?e.HALF_FLOAT:(a=t.get("OES_texture_half_float"),null!==a?a.HALF_FLOAT_OES:null);if(1021===n)return e.ALPHA;if(n===T)return e.RGBA;if(1024===n)return e.LUMINANCE;if(1025===n)return e.LUMINANCE_ALPHA;if(n===R)return e.DEPTH_COMPONENT;if(n===C)return e.DEPTH_STENCIL;if(1028===n)return e.RED;if(1022===n)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),e.RGBA;if(n===V)return a=t.get("EXT_sRGB"),null!==a?a.SRGB_ALPHA_EXT:null;if(n===D)return e.RED_INTEGER;if(1030===n)return e.RG;if(1031===n)return e.RG_INTEGER;if(1033===n)return e.RGBA_INTEGER;if(n===A||n===I||n===P||n===L)if(r===k){if(a=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===a)return null;if(n===A)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===I)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===P)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===L)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(a=t.get("WEBGL_compressed_texture_s3tc"),null===a)return null;if(n===A)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===I)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===P)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===L)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===n||35841===n||35842===n||35843===n){if(a=t.get("WEBGL_compressed_texture_pvrtc"),null===a)return null;if(35840===n)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===n)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===n)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===n)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===n)return a=t.get("WEBGL_compressed_texture_etc1"),null!==a?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===n||37496===n){if(a=t.get("WEBGL_compressed_texture_etc"),null===a)return null;if(37492===n)return r===k?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(37496===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(37808===n||37809===n||37810===n||37811===n||37812===n||37813===n||37814===n||37815===n||37816===n||37817===n||37818===n||37819===n||37820===n||37821===n){if(a=t.get("WEBGL_compressed_texture_astc"),null===a)return null;if(37808===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===n)return r===k?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===n){if(a=t.get("EXT_texture_compression_bptc"),null===a)return null;if(36492===n)return r===k?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}return n===E?i?e.UNSIGNED_INT_24_8:(a=t.get("WEBGL_depth_texture"),null!==a?a.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[n]?e[n]:null}}}class ha extends Cn{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class da extends Rt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const ua={type:"move"};class pa{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new da,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new da,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ee,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ee),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new da,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ee,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ee),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,a=null;const o=this._targetRay,s=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState)if(null!==o&&(i=t.getPose(e.targetRaySpace,n),null!==i&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(ua))),l&&e.hand){a=!0;for(const i of e.hand.values()){const e=t.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const e=new da;e.matrixAutoUpdate=!1,e.visible=!1,l.joints[i.jointName]=e,l.add(e)}const r=l.joints[i.jointName];null!==e&&(r.matrix.fromArray(e.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=e.radius),r.visible=null!==e}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],o=i.position.distanceTo(r.position),s=.02,c=.005;l.inputState.pinching&&o>s+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&o<=s-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==s&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),null!==r&&(s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),r.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(r.linearVelocity)):s.hasLinearVelocity=!1,r.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(r.angularVelocity)):s.hasAngularVelocity=!1));return null!==o&&(o.visible=null!==i),null!==s&&(s.visible=null!==r),null!==l&&(l.visible=null!==a),this}}class fa extends ye{constructor(e,t,n,i,r,a,o,s,l,c){if((c=void 0!==c?c:R)!==R&&c!==C)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===R&&(n=S),void 0===n&&c===C&&(n=E),super(null,i,r,a,o,s,c,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==o?o:v,this.minFilter=void 0!==s?s:v,this.flipY=!1,this.generateMipmaps=!1}}class ma extends W{constructor(e,t){super();const n=this;let i=null,r=1,a=null,o="local-floor",s=null,l=null,c=null,h=null,d=null,u=null;const p=t.getContextAttributes();let f=null,m=null;const g=[],v=new Map,x=new Cn;x.layers.enable(1),x.viewport=new _e;const y=new Cn;y.layers.enable(2),y.viewport=new _e;const M=[x,y],b=new ha;b.layers.enable(1),b.layers.enable(2);let w=null,D=null;function A(e){const t=v.get(e.inputSource);void 0!==t&&t.dispatchEvent({type:e.type,data:e.inputSource})}function I(){i.removeEventListener("select",A),i.removeEventListener("selectstart",A),i.removeEventListener("selectend",A),i.removeEventListener("squeeze",A),i.removeEventListener("squeezestart",A),i.removeEventListener("squeezeend",A),i.removeEventListener("end",I),i.removeEventListener("inputsourceschange",P),v.forEach((function(e,t){void 0!==e&&e.disconnect(t)})),v.clear(),w=null,D=null,e.setRenderTarget(f),d=null,h=null,c=null,i=null,m=null,U.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function P(e){const t=i.inputSources;for(let e=0;e<t.length;e++){const n="right"===t[e].handedness?1:0;v.set(t[e],g[n])}for(let t=0;t<e.removed.length;t++){const n=e.removed[t],i=v.get(n);i&&(i.dispatchEvent({type:"disconnected",data:n}),v.delete(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t],i=v.get(n);i&&i.dispatchEvent({type:"connected",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=g[e];return void 0===t&&(t=new pa,g[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=g[e];return void 0===t&&(t=new pa,g[e]=t),t.getGripSpace()},this.getHand=function(e){let t=g[e];return void 0===t&&(t=new pa,g[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){o=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s||a},this.setReferenceSpace=function(e){s=e},this.getBaseLayer=function(){return null!==h?h:d},this.getBinding=function(){return c},this.getFrame=function(){return u},this.getSession=function(){return i},this.setSession=async function(l){if(i=l,null!==i){if(f=e.getRenderTarget(),i.addEventListener("select",A),i.addEventListener("selectstart",A),i.addEventListener("selectend",A),i.addEventListener("squeeze",A),i.addEventListener("squeezestart",A),i.addEventListener("squeezeend",A),i.addEventListener("end",I),i.addEventListener("inputsourceschange",P),!0!==p.xrCompatible&&await t.makeXRCompatible(),void 0===i.renderState.layers||!1===e.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||p.antialias,alpha:p.alpha,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,t,n),i.updateRenderState({baseLayer:d}),m=new Me(d.framebufferWidth,d.framebufferHeight,{format:T,type:_,encoding:e.outputEncoding})}else{let n=null,a=null,o=null;p.depth&&(o=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=p.stencil?C:R,a=p.stencil?E:S);const s={colorFormat:e.outputEncoding===k?t.SRGB8_ALPHA8:t.RGBA8,depthFormat:o,scaleFactor:r};c=new XRWebGLBinding(i,t),h=c.createProjectionLayer(s),i.updateRenderState({layers:[h]}),m=new Me(h.textureWidth,h.textureHeight,{format:T,type:_,depthTexture:new fa(h.textureWidth,h.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:p.stencil,encoding:e.outputEncoding,samples:p.antialias?4:0}),e.properties.get(m).__ignoreDepthValues=h.ignoreDepthValues}m.isXRRenderTarget=!0,this.setFoveation(1),s=null,a=await i.requestReferenceSpace(o),U.setContext(i),U.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const L=new Ee,F=new Ee;function O(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===i)return;b.near=y.near=x.near=e.near,b.far=y.far=x.far=e.far,w===b.near&&D===b.far||(i.updateRenderState({depthNear:b.near,depthFar:b.far}),w=b.near,D=b.far);const t=e.parent,n=b.cameras;O(b,t);for(let e=0;e<n.length;e++)O(n[e],t);b.matrixWorld.decompose(b.position,b.quaternion,b.scale),e.position.copy(b.position),e.quaternion.copy(b.quaternion),e.scale.copy(b.scale),e.matrix.copy(b.matrix),e.matrixWorld.copy(b.matrixWorld);const r=e.children;for(let e=0,t=r.length;e<t;e++)r[e].updateMatrixWorld(!0);2===n.length?function(e,t,n){L.setFromMatrixPosition(t.matrixWorld),F.setFromMatrixPosition(n.matrixWorld);const i=L.distanceTo(F),r=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=r[14]/(r[10]-1),s=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],d=(a[8]+1)/a[0],u=o*h,p=o*d,f=i/(-h+d),m=f*-h;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(f),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=o+f,v=s+f,x=u-m,y=p+(i-m),_=l*s/v*g,M=c*s/v*g;e.projectionMatrix.makePerspective(x,y,_,M,g,v)}(b,x,y):b.projectionMatrix.copy(x.projectionMatrix)},this.getCamera=function(){return b},this.getFoveation=function(){return null!==h?h.fixedFoveation:null!==d?d.fixedFoveation:void 0},this.setFoveation=function(e){null!==h&&(h.fixedFoveation=e),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=e)};let N=null;const U=new zn;U.setAnimationLoop((function(t,n){if(l=n.getViewerPose(s||a),u=n,null!==l){const t=l.views;null!==d&&(e.setRenderTargetFramebuffer(m,d.framebuffer),e.setRenderTarget(m));let n=!1;t.length!==b.cameras.length&&(b.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const r=t[i];let a=null;if(null!==d)a=d.getViewport(r);else{const t=c.getViewSubImage(h,r);a=t.viewport,0===i&&(e.setRenderTargetTextures(m,t.colorTexture,h.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(m))}let o=M[i];void 0===o&&(o=new Cn,o.layers.enable(i),o.viewport=new _e,M[i]=o),o.matrix.fromArray(r.transform.matrix),o.projectionMatrix.fromArray(r.projectionMatrix),o.viewport.set(a.x,a.y,a.width,a.height),0===i&&b.matrix.copy(o.matrix),!0===n&&b.cameras.push(o)}}const r=i.inputSources;for(let e=0;e<g.length;e++){const t=r[e],i=v.get(t);void 0!==i&&i.update(t,n,s||a)}N&&N(t,n),u=null})),this.setAnimationLoop=function(e){N=e},this.dispose=function(){}}}function ga(e,t){function n(n,i){n.opacity.value=i.opacity,i.color&&n.diffuse.value.copy(i.color),i.emissive&&n.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(n.map.value=i.map),i.alphaMap&&(n.alphaMap.value=i.alphaMap),i.bumpMap&&(n.bumpMap.value=i.bumpMap,n.bumpScale.value=i.bumpScale,1===i.side&&(n.bumpScale.value*=-1)),i.displacementMap&&(n.displacementMap.value=i.displacementMap,n.displacementScale.value=i.displacementScale,n.displacementBias.value=i.displacementBias),i.emissiveMap&&(n.emissiveMap.value=i.emissiveMap),i.normalMap&&(n.normalMap.value=i.normalMap,n.normalScale.value.copy(i.normalScale),1===i.side&&n.normalScale.value.negate()),i.specularMap&&(n.specularMap.value=i.specularMap),i.alphaTest>0&&(n.alphaTest.value=i.alphaTest);const r=t.get(i).envMap;if(r&&(n.envMap.value=r,n.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,n.reflectivity.value=i.reflectivity,n.ior.value=i.ior,n.refractionRatio.value=i.refractionRatio),i.lightMap){n.lightMap.value=i.lightMap;const t=!0!==e.physicallyCorrectLights?Math.PI:1;n.lightMapIntensity.value=i.lightMapIntensity*t}let a,o;i.aoMap&&(n.aoMap.value=i.aoMap,n.aoMapIntensity.value=i.aoMapIntensity),i.map?a=i.map:i.specularMap?a=i.specularMap:i.displacementMap?a=i.displacementMap:i.normalMap?a=i.normalMap:i.bumpMap?a=i.bumpMap:i.roughnessMap?a=i.roughnessMap:i.metalnessMap?a=i.metalnessMap:i.alphaMap?a=i.alphaMap:i.emissiveMap?a=i.emissiveMap:i.clearcoatMap?a=i.clearcoatMap:i.clearcoatNormalMap?a=i.clearcoatNormalMap:i.clearcoatRoughnessMap?a=i.clearcoatRoughnessMap:i.iridescenceMap?a=i.iridescenceMap:i.iridescenceThicknessMap?a=i.iridescenceThicknessMap:i.specularIntensityMap?a=i.specularIntensityMap:i.specularColorMap?a=i.specularColorMap:i.transmissionMap?a=i.transmissionMap:i.thicknessMap?a=i.thicknessMap:i.sheenColorMap?a=i.sheenColorMap:i.sheenRoughnessMap&&(a=i.sheenRoughnessMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),n.uvTransform.value.copy(a.matrix)),i.aoMap?o=i.aoMap:i.lightMap&&(o=i.lightMap),void 0!==o&&(o.isWebGLRenderTarget&&(o=o.texture),!0===o.matrixAutoUpdate&&o.updateMatrix(),n.uv2Transform.value.copy(o.matrix))}return{refreshFogUniforms:function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)},refreshMaterialUniforms:function(e,i,r,a,o){i.isMeshBasicMaterial||i.isMeshLambertMaterial?n(e,i):i.isMeshToonMaterial?(n(e,i),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,i)):i.isMeshPhongMaterial?(n(e,i),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}(e,i)):i.isMeshStandardMaterial?(n(e,i),function(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}(e,i),i.isMeshPhysicalMaterial&&function(e,t,n){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap)),t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap),t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&e.clearcoatNormalScale.value.negate())),t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap)),t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=n.texture,e.transmissionSamplerSize.value.set(n.width,n.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor)),e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap)}(e,i,o)):i.isMeshMatcapMaterial?(n(e,i),function(e,t){t.matcap&&(e.matcap.value=t.matcap)}(e,i)):i.isMeshDepthMaterial?n(e,i):i.isMeshDistanceMaterial?(n(e,i),function(e,t){e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(e,i)):i.isMeshNormalMaterial?n(e,i):i.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(e,i),i.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,i)):i.isPointsMaterial?function(e,t,n,i){let r;e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*n,e.scale.value=.5*i,t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest),t.map?r=t.map:t.alphaMap&&(r=t.alphaMap),void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix))}(e,i,r,a):i.isSpriteMaterial?function(e,t){let n;e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest),t.map?n=t.map:t.alphaMap&&(n=t.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(e,i):i.isShadowMaterial?(e.color.value.copy(i.color),e.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function va(e={}){this.isWebGLRenderer=!0;const t=void 0!==e.canvas?e.canvas:function(){const e=ne("canvas");return e.style.display="block",e}(),n=void 0!==e.context?e.context:null,i=void 0===e.depth||e.depth,r=void 0===e.stencil||e.stencil,a=void 0!==e.antialias&&e.antialias,o=void 0===e.premultipliedAlpha||e.premultipliedAlpha,s=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,l=void 0!==e.powerPreference?e.powerPreference:"default",c=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat;let h;h=null!==n?n.getContextAttributes().alpha:void 0!==e.alpha&&e.alpha;let d=null,u=null;const p=[],f=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=U,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const m=this;let g=!1,v=0,x=0,M=null,S=-1,E=null;const R=new _e,C=new _e;let D=null,A=t.width,I=t.height,P=1,L=null,F=null;const O=new _e(0,0,A,I),N=new _e(0,0,A,I);let k=!1;const B=new Bn;let z=!1,G=!1,H=null;const V=new nt,W=new $,q=new Ee,X={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function j(){return null===M?P:1}let Y,Z,K,J,ee,te,ie,re,ae,oe,se,le,ce,he,de,ue,pe,fe,me,ge,ve,xe,ye,Se=n;function be(e,n){for(let i=0;i<e.length;i++){const r=e[i],a=t.getContext(r,n);if(null!==a)return a}return null}try{const e={alpha:!0,depth:i,stencil:r,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:s,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in t&&t.setAttribute("data-engine","three.js r141"),t.addEventListener("webglcontextlost",Re,!1),t.addEventListener("webglcontextrestored",Ce,!1),t.addEventListener("webglcontextcreationerror",De,!1),null===Se){const t=["webgl2","webgl","experimental-webgl"];if(!0===m.isWebGL1Renderer&&t.shift(),Se=be(t,e),null===Se)throw be(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===Se.getShaderPrecisionFormat&&(Se.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function we(){Y=new ui(Se),Z=new Zn(Se,Y,e),Y.init(Z),xe=new ca(Se,Y,Z),K=new sa(Se,Y,Z),J=new mi(Se),ee=new jr,te=new la(Se,Y,K,ee,Z,xe,J),ie=new Jn(m),re=new di(m),ae=new Gn(Se,Z),ye=new jn(Se,Y,ae,Z),oe=new pi(Se,ae,J,ye),se=new _i(Se,oe,ae,J),me=new yi(Se,Z,te),ue=new Kn(ee),le=new Xr(m,ie,re,Y,Z,ye,ue),ce=new ga(m,ee),he=new Jr,de=new ia(Y,Z),fe=new Xn(m,ie,K,se,h,o),pe=new oa(m,se,Z),ge=new Yn(Se,Y,J,Z),ve=new fi(Se,Y,J,Z),J.programs=le.programs,m.capabilities=Z,m.extensions=Y,m.properties=ee,m.renderLists=he,m.shadowMap=pe,m.state=K,m.info=J}we();const Te=new ma(m,Se);function Re(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),g=!0}function Ce(){console.log("THREE.WebGLRenderer: Context Restored."),g=!1;const e=J.autoReset,t=pe.enabled,n=pe.autoUpdate,i=pe.needsUpdate,r=pe.type;we(),J.autoReset=e,pe.enabled=t,pe.autoUpdate=n,pe.needsUpdate=i,pe.type=r}function De(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Ae(e){const t=e.target;t.removeEventListener("dispose",Ae),function(e){(function(e){const t=ee.get(e).programs;void 0!==t&&(t.forEach((function(e){le.releaseProgram(e)})),e.isShaderMaterial&&le.releaseShaderCache(e))})(e),ee.remove(e)}(t)}this.xr=Te,this.getContext=function(){return Se},this.getContextAttributes=function(){return Se.getContextAttributes()},this.forceContextLoss=function(){const e=Y.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=Y.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return P},this.setPixelRatio=function(e){void 0!==e&&(P=e,this.setSize(A,I,!1))},this.getSize=function(e){return e.set(A,I)},this.setSize=function(e,n,i){Te.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(A=e,I=n,t.width=Math.floor(e*P),t.height=Math.floor(n*P),!1!==i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return e.set(A*P,I*P).floor()},this.setDrawingBufferSize=function(e,n,i){A=e,I=n,P=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return e.copy(R)},this.getViewport=function(e){return e.copy(O)},this.setViewport=function(e,t,n,i){e.isVector4?O.set(e.x,e.y,e.z,e.w):O.set(e,t,n,i),K.viewport(R.copy(O).multiplyScalar(P).floor())},this.getScissor=function(e){return e.copy(N)},this.setScissor=function(e,t,n,i){e.isVector4?N.set(e.x,e.y,e.z,e.w):N.set(e,t,n,i),K.scissor(C.copy(N).multiplyScalar(P).floor())},this.getScissorTest=function(){return k},this.setScissorTest=function(e){K.setScissorTest(k=e)},this.setOpaqueSort=function(e){L=e},this.setTransparentSort=function(e){F=e},this.getClearColor=function(e){return e.copy(fe.getClearColor())},this.setClearColor=function(){fe.setClearColor.apply(fe,arguments)},this.getClearAlpha=function(){return fe.getClearAlpha()},this.setClearAlpha=function(){fe.setClearAlpha.apply(fe,arguments)},this.clear=function(e=!0,t=!0,n=!0){let i=0;e&&(i|=Se.COLOR_BUFFER_BIT),t&&(i|=Se.DEPTH_BUFFER_BIT),n&&(i|=Se.STENCIL_BUFFER_BIT),Se.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Re,!1),t.removeEventListener("webglcontextrestored",Ce,!1),t.removeEventListener("webglcontextcreationerror",De,!1),he.dispose(),de.dispose(),ee.dispose(),ie.dispose(),re.dispose(),se.dispose(),ye.dispose(),le.dispose(),Te.dispose(),Te.removeEventListener("sessionstart",Pe),Te.removeEventListener("sessionend",Le),H&&(H.dispose(),H=null),Fe.stop()},this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=X);const o=r.isMesh&&r.matrixWorld.determinant()<0,s=function(e,t,n,i,r){!0!==t.isScene&&(t=X),te.resetTextureUnits();const a=t.fog,o=i.isMeshStandardMaterial?t.environment:null,s=null===M?m.outputEncoding:!0===M.isXRRenderTarget?M.texture.encoding:U,l=(i.isMeshStandardMaterial?re:ie).get(i.envMap||o),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!i.normalMap&&!!n.attributes.tangent,d=!!n.morphAttributes.position,p=!!n.morphAttributes.normal,f=!!n.morphAttributes.color,g=i.toneMapped?m.toneMapping:0,v=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,x=void 0!==v?v.length:0,y=ee.get(i),_=u.state.lights;if(!0===z&&(!0===G||e!==E)){const t=e===E&&i.id===S;ue.setState(i,e,t)}let b=!1;i.version===y.__version?y.needsLights&&y.lightsStateVersion!==_.state.version||y.outputEncoding!==s||r.isInstancedMesh&&!1===y.instancing?b=!0:r.isInstancedMesh||!0!==y.instancing?r.isSkinnedMesh&&!1===y.skinning?b=!0:r.isSkinnedMesh||!0!==y.skinning?y.envMap!==l||!0===i.fog&&y.fog!==a?b=!0:void 0===y.numClippingPlanes||y.numClippingPlanes===ue.numPlanes&&y.numIntersection===ue.numIntersection?(y.vertexAlphas!==c||y.vertexTangents!==h||y.morphTargets!==d||y.morphNormals!==p||y.morphColors!==f||y.toneMapping!==g||!0===Z.isWebGL2&&y.morphTargetsCount!==x)&&(b=!0):b=!0:b=!0:b=!0:(b=!0,y.__version=i.version);let w=y.currentProgram;!0===b&&(w=Be(i,t,r));let T=!1,R=!1,C=!1;const D=w.getUniforms(),A=y.uniforms;if(K.useProgram(w.program)&&(T=!0,R=!0,C=!0),i.id!==S&&(S=i.id,R=!0),T||E!==e){if(D.setValue(Se,"projectionMatrix",e.projectionMatrix),Z.logarithmicDepthBuffer&&D.setValue(Se,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),E!==e&&(E=e,R=!0,C=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const t=D.map.cameraPosition;void 0!==t&&t.setValue(Se,q.setFromMatrixPosition(e.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&D.setValue(Se,"isOrthographic",!0===e.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&D.setValue(Se,"viewMatrix",e.matrixWorldInverse)}if(r.isSkinnedMesh){D.setOptional(Se,r,"bindMatrix"),D.setOptional(Se,r,"bindMatrixInverse");const e=r.skeleton;e&&(Z.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),D.setValue(Se,"boneTexture",e.boneTexture,te),D.setValue(Se,"boneTextureSize",e.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const L=n.morphAttributes;var F,O;return(void 0!==L.position||void 0!==L.normal||void 0!==L.color&&!0===Z.isWebGL2)&&me.update(r,n,i,w),(R||y.receiveShadow!==r.receiveShadow)&&(y.receiveShadow=r.receiveShadow,D.setValue(Se,"receiveShadow",r.receiveShadow)),R&&(D.setValue(Se,"toneMappingExposure",m.toneMappingExposure),y.needsLights&&(O=C,(F=A).ambientLightColor.needsUpdate=O,F.lightProbe.needsUpdate=O,F.directionalLights.needsUpdate=O,F.directionalLightShadows.needsUpdate=O,F.pointLights.needsUpdate=O,F.pointLightShadows.needsUpdate=O,F.spotLights.needsUpdate=O,F.spotLightShadows.needsUpdate=O,F.rectAreaLights.needsUpdate=O,F.hemisphereLights.needsUpdate=O),a&&!0===i.fog&&ce.refreshFogUniforms(A,a),ce.refreshMaterialUniforms(A,i,P,I,H),wr.upload(Se,y.uniformsList,A,te)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(wr.upload(Se,y.uniformsList,A,te),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&D.setValue(Se,"center",r.center),D.setValue(Se,"modelViewMatrix",r.modelViewMatrix),D.setValue(Se,"modelMatrix",r.matrixWorld),w}(e,t,n,i,r);K.setMaterial(i,o);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,d=1;!0===i.wireframe&&(l=oe.getWireframeAttribute(n),d=2),ye.setup(r,i,s,n,l);let p=ge;null!==l&&(h=ae.get(l),p=ve,p.setIndex(h));const f=null!==l?l.count:c.count,g=n.drawRange.start*d,v=n.drawRange.count*d,x=null!==a?a.start*d:0,y=null!==a?a.count*d:1/0,_=Math.max(g,x),b=Math.min(f,g+v,x+y)-1,w=Math.max(0,b-_+1);if(0!==w){if(r.isMesh)!0===i.wireframe?(K.setLineWidth(i.wireframeLinewidth*j()),p.setMode(Se.LINES)):p.setMode(Se.TRIANGLES);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),K.setLineWidth(e*j()),r.isLineSegments?p.setMode(Se.LINES):r.isLineLoop?p.setMode(Se.LINE_LOOP):p.setMode(Se.LINE_STRIP)}else r.isPoints?p.setMode(Se.POINTS):r.isSprite&&p.setMode(Se.TRIANGLES);if(r.isInstancedMesh)p.renderInstances(_,w,r.count);else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);p.renderInstances(_,w,e)}else p.render(_,w)}},this.compile=function(e,t){u=de.get(e),u.init(),f.push(u),e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(u.pushLight(e),e.castShadow&&u.pushShadow(e))})),u.setupLights(m.physicallyCorrectLights),e.traverse((function(t){const n=t.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++)Be(n[i],e,t);else Be(n,e,t)})),f.pop(),u=null};let Ie=null;function Pe(){Fe.stop()}function Le(){Fe.start()}const Fe=new zn;function Oe(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)u.pushLight(e),e.castShadow&&u.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||B.intersectsSprite(e)){i&&q.setFromMatrixPosition(e.matrixWorld).applyMatrix4(V);const t=se.update(e),r=e.material;r.visible&&d.push(e,t,r,n,q.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==J.render.frame&&(e.skeleton.update(),e.skeleton.frame=J.render.frame),!e.frustumCulled||B.intersectsObject(e))){i&&q.setFromMatrixPosition(e.matrixWorld).applyMatrix4(V);const t=se.update(e),r=e.material;if(Array.isArray(r)){const i=t.groups;for(let a=0,o=i.length;a<o;a++){const o=i[a],s=r[o.materialIndex];s&&s.visible&&d.push(e,t,s,n,q.z,o)}}else r.visible&&d.push(e,t,r,n,q.z,null)}const r=e.children;for(let e=0,a=r.length;e<a;e++)Oe(r[e],t,n,i)}function Ne(e,t,n,i){const r=e.opaque,o=e.transmissive,s=e.transparent;u.setupLightsView(n),o.length>0&&function(e,t,n){const i=Z.isWebGL2;null===H&&(H=new Me(1,1,{generateMipmaps:!0,type:Y.has("EXT_color_buffer_half_float")?w:_,minFilter:y,samples:i&&!0===a?4:0})),m.getDrawingBufferSize(W),i?H.setSize(W.x,W.y):H.setSize(Q(W.x),Q(W.y));const r=m.getRenderTarget();m.setRenderTarget(H),m.clear();const o=m.toneMapping;m.toneMapping=0,Ue(e,t,n),m.toneMapping=o,te.updateMultisampleRenderTarget(H),te.updateRenderTargetMipmap(H),m.setRenderTarget(r)}(r,t,n),i&&K.viewport(R.copy(i)),r.length>0&&Ue(r,t,n),o.length>0&&Ue(o,t,n),s.length>0&&Ue(s,t,n),K.buffers.depth.setTest(!0),K.buffers.depth.setMask(!0),K.buffers.color.setMask(!0),K.setPolygonOffset(!1)}function Ue(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){const a=e[r],o=a.object,s=a.geometry,l=null===i?a.material:i,c=a.group;o.layers.test(n.layers)&&ke(o,t,n,s,l,c)}}function ke(e,t,n,i,r,a){e.onBeforeRender(m,t,n,i,r,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(m,t,n,i,e,a),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,m.renderBufferDirect(n,t,i,r,e,a),r.side=0,r.needsUpdate=!0,m.renderBufferDirect(n,t,i,r,e,a),r.side=2):m.renderBufferDirect(n,t,i,r,e,a),e.onAfterRender(m,t,n,i,r,a)}function Be(e,t,n){!0!==t.isScene&&(t=X);const i=ee.get(e),r=u.state.lights,a=u.state.shadowsArray,o=r.state.version,s=le.getParameters(e,r.state,a,t,n),l=le.getProgramCacheKey(s);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=(e.isMeshStandardMaterial?re:ie).get(e.envMap||i.environment),void 0===c&&(e.addEventListener("dispose",Ae),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===o)return ze(e,s),h}else s.uniforms=le.getUniforms(e),e.onBuild(n,s,m),e.onBeforeCompile(s,m),h=le.acquireProgram(s,l),c.set(l,h),i.uniforms=s.uniforms;const d=i.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(d.clippingPlanes=ue.uniform),ze(e,s),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=o,i.needsLights&&(d.ambientLightColor.value=r.state.ambient,d.lightProbe.value=r.state.probe,d.directionalLights.value=r.state.directional,d.directionalLightShadows.value=r.state.directionalShadow,d.spotLights.value=r.state.spot,d.spotLightShadows.value=r.state.spotShadow,d.rectAreaLights.value=r.state.rectArea,d.ltc_1.value=r.state.rectAreaLTC1,d.ltc_2.value=r.state.rectAreaLTC2,d.pointLights.value=r.state.point,d.pointLightShadows.value=r.state.pointShadow,d.hemisphereLights.value=r.state.hemi,d.directionalShadowMap.value=r.state.directionalShadowMap,d.directionalShadowMatrix.value=r.state.directionalShadowMatrix,d.spotShadowMap.value=r.state.spotShadowMap,d.spotShadowMatrix.value=r.state.spotShadowMatrix,d.pointShadowMap.value=r.state.pointShadowMap,d.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=h.getUniforms(),f=wr.seqWithValue(p.seq,d);return i.currentProgram=h,i.uniformsList=f,h}function ze(e,t){const n=ee.get(e);n.outputEncoding=t.outputEncoding,n.instancing=t.instancing,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}Fe.setAnimationLoop((function(e){Ie&&Ie(e)})),"undefined"!=typeof self&&Fe.setContext(self),this.setAnimationLoop=function(e){Ie=e,Te.setAnimationLoop(e),null===e?Fe.stop():Fe.start()},Te.addEventListener("sessionstart",Pe),Te.addEventListener("sessionend",Le),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===g)return;!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),!0===Te.enabled&&!0===Te.isPresenting&&(!0===Te.cameraAutoUpdate&&Te.updateCamera(t),t=Te.getCamera()),!0===e.isScene&&e.onBeforeRender(m,e,t,M),u=de.get(e,f.length),u.init(),f.push(u),V.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),B.setFromProjectionMatrix(V),G=this.localClippingEnabled,z=ue.init(this.clippingPlanes,G,t),d=he.get(e,p.length),d.init(),p.push(d),Oe(e,t,0,m.sortObjects),d.finish(),!0===m.sortObjects&&d.sort(L,F),!0===z&&ue.beginShadows();const n=u.state.shadowsArray;if(pe.render(n,e,t),!0===z&&ue.endShadows(),!0===this.info.autoReset&&this.info.reset(),fe.render(d,e),u.setupLights(m.physicallyCorrectLights),t.isArrayCamera){const n=t.cameras;for(let t=0,i=n.length;t<i;t++){const i=n[t];Ne(d,e,i,i.viewport)}}else Ne(d,e,t);null!==M&&(te.updateMultisampleRenderTarget(M),te.updateRenderTargetMipmap(M)),!0===e.isScene&&e.onAfterRender(m,e,t),ye.resetDefaultState(),S=-1,E=null,f.pop(),u=f.length>0?f[f.length-1]:null,p.pop(),d=p.length>0?p[p.length-1]:null},this.getActiveCubeFace=function(){return v},this.getActiveMipmapLevel=function(){return x},this.getRenderTarget=function(){return M},this.setRenderTargetTextures=function(e,t,n){ee.get(e.texture).__webglTexture=t,ee.get(e.depthTexture).__webglTexture=n;const i=ee.get(e);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===Y.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){const n=ee.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,n=0){M=e,v=t,x=n;let i=!0;if(e){const t=ee.get(e);void 0!==t.__useDefaultFramebuffer?(K.bindFramebuffer(Se.FRAMEBUFFER,null),i=!1):void 0===t.__webglFramebuffer?te.setupRenderTarget(e):t.__hasExternalTextures&&te.rebindTextures(e,ee.get(e.texture).__webglTexture,ee.get(e.depthTexture).__webglTexture)}let r=null,a=!1,o=!1;if(e){const n=e.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(o=!0);const i=ee.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(r=i[t],a=!0):r=Z.isWebGL2&&e.samples>0&&!1===te.useMultisampledRTT(e)?ee.get(e).__webglMultisampledFramebuffer:i,R.copy(e.viewport),C.copy(e.scissor),D=e.scissorTest}else R.copy(O).multiplyScalar(P).floor(),C.copy(N).multiplyScalar(P).floor(),D=k;if(K.bindFramebuffer(Se.FRAMEBUFFER,r)&&Z.drawBuffers&&i&&K.drawBuffers(e,r),K.viewport(R),K.scissor(C),K.setScissorTest(D),a){const i=ee.get(e.texture);Se.framebufferTexture2D(Se.FRAMEBUFFER,Se.COLOR_ATTACHMENT0,Se.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n)}else if(o){const i=ee.get(e.texture),r=t||0;Se.framebufferTextureLayer(Se.FRAMEBUFFER,Se.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r)}S=-1},this.readRenderTargetPixels=function(e,t,n,i,r,a,o){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=ee.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){K.bindFramebuffer(Se.FRAMEBUFFER,s);try{const o=e.texture,s=o.format,l=o.type;if(s!==T&&xe.convert(s)!==Se.getParameter(Se.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===w&&(Y.has("EXT_color_buffer_half_float")||Z.isWebGL2&&Y.has("EXT_color_buffer_float"));if(!(l===_||xe.convert(l)===Se.getParameter(Se.IMPLEMENTATION_COLOR_READ_TYPE)||l===b&&(Z.isWebGL2||Y.has("OES_texture_float")||Y.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&Se.readPixels(t,n,i,r,xe.convert(s),xe.convert(l),a)}finally{const e=null!==M?ee.get(M).__webglFramebuffer:null;K.bindFramebuffer(Se.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i);te.setTexture2D(t,0),Se.copyTexSubImage2D(Se.TEXTURE_2D,n,0,0,e.x,e.y,r,a),K.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i=0){const r=t.image.width,a=t.image.height,o=xe.convert(n.format),s=xe.convert(n.type);te.setTexture2D(n,0),Se.pixelStorei(Se.UNPACK_FLIP_Y_WEBGL,n.flipY),Se.pixelStorei(Se.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),Se.pixelStorei(Se.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?Se.texSubImage2D(Se.TEXTURE_2D,i,e.x,e.y,r,a,o,s,t.image.data):t.isCompressedTexture?Se.compressedTexSubImage2D(Se.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,o,t.mipmaps[0].data):Se.texSubImage2D(Se.TEXTURE_2D,i,e.x,e.y,o,s,t.image),0===i&&n.generateMipmaps&&Se.generateMipmap(Se.TEXTURE_2D),K.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,i,r=0){if(m.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const a=e.max.x-e.min.x+1,o=e.max.y-e.min.y+1,s=e.max.z-e.min.z+1,l=xe.convert(i.format),c=xe.convert(i.type);let h;if(i.isData3DTexture)te.setTexture3D(i,0),h=Se.TEXTURE_3D;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");te.setTexture2DArray(i,0),h=Se.TEXTURE_2D_ARRAY}Se.pixelStorei(Se.UNPACK_FLIP_Y_WEBGL,i.flipY),Se.pixelStorei(Se.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),Se.pixelStorei(Se.UNPACK_ALIGNMENT,i.unpackAlignment);const d=Se.getParameter(Se.UNPACK_ROW_LENGTH),u=Se.getParameter(Se.UNPACK_IMAGE_HEIGHT),p=Se.getParameter(Se.UNPACK_SKIP_PIXELS),f=Se.getParameter(Se.UNPACK_SKIP_ROWS),g=Se.getParameter(Se.UNPACK_SKIP_IMAGES),v=n.isCompressedTexture?n.mipmaps[0]:n.image;Se.pixelStorei(Se.UNPACK_ROW_LENGTH,v.width),Se.pixelStorei(Se.UNPACK_IMAGE_HEIGHT,v.height),Se.pixelStorei(Se.UNPACK_SKIP_PIXELS,e.min.x),Se.pixelStorei(Se.UNPACK_SKIP_ROWS,e.min.y),Se.pixelStorei(Se.UNPACK_SKIP_IMAGES,e.min.z),n.isDataTexture||n.isData3DTexture?Se.texSubImage3D(h,r,t.x,t.y,t.z,a,o,s,l,c,v.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Se.compressedTexSubImage3D(h,r,t.x,t.y,t.z,a,o,s,l,v.data)):Se.texSubImage3D(h,r,t.x,t.y,t.z,a,o,s,l,c,v),Se.pixelStorei(Se.UNPACK_ROW_LENGTH,d),Se.pixelStorei(Se.UNPACK_IMAGE_HEIGHT,u),Se.pixelStorei(Se.UNPACK_SKIP_PIXELS,p),Se.pixelStorei(Se.UNPACK_SKIP_ROWS,f),Se.pixelStorei(Se.UNPACK_SKIP_IMAGES,g),0===r&&i.generateMipmaps&&Se.generateMipmap(h),K.unbindTexture()},this.initTexture=function(e){te.setTexture2D(e,0),K.unbindTexture()},this.resetState=function(){v=0,x=0,M=null,K.reset(),ye.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}(class extends va{}).prototype.isWebGL1Renderer=!0;class xa extends Rt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),t}}class ya extends zt{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new pe(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}class _a extends ye{constructor(e,t,n,i,r,a,o,s,l,c,h,d){super(null,a,o,s,l,c,i,r,h,d),this.isCompressedTexture=!0,this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class Ma extends ye{constructor(e,t,n,i,r,a,o,s,l){super(e,t,n,i,r,a,o,s,l),this.isCanvasTexture=!0,this.needsUpdate=!0}}function Sa(){let e=0,t=0,n=0,i=0;function r(r,a,o,s){e=r,t=o,n=-3*r+3*a-2*o-s,i=2*r-2*a+o+s}return{initCatmullRom:function(e,t,n,i,a){r(t,n,a*(n-e),a*(i-t))},initNonuniformCatmullRom:function(e,t,n,i,a,o,s){let l=(t-e)/a-(n-e)/(a+o)+(n-t)/o,c=(n-t)/o-(i-t)/(o+s)+(i-n)/s;l*=o,c*=o,r(t,n,l,c)},calc:function(r){const a=r*r;return e+t*r+n*a+i*(a*r)}}}new Ee,new Sa,new Sa,new Sa,new Ee,new Ee,new Ee,new kt;class ba extends Tn{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class wa extends zt{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new pe(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new pe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}const Ea={ShadowMaterial:class extends zt{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new pe(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}},SpriteMaterial:class extends zt{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new pe(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}},RawShaderMaterial:ba,ShaderMaterial:Tn,PointsMaterial:class extends zt{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new pe(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}},MeshPhysicalMaterial:class extends wa{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new $(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Z(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new pe(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new pe(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new pe(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}},MeshStandardMaterial:wa,MeshPhongMaterial:class extends zt{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new pe(16777215),this.specular=new pe(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new pe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}},MeshToonMaterial:class extends zt{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new pe(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new pe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}},MeshNormalMaterial:class extends zt{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}},MeshLambertMaterial:class extends zt{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new pe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new pe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}},MeshDepthMaterial:ra,MeshDistanceMaterial:aa,MeshBasicMaterial:Gt,MeshMatcapMaterial:class extends zt{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new pe(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}},LineDashedMaterial:class extends ya{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}},LineBasicMaterial:ya,Material:zt};zt.fromType=function(e){return new Ea[e]};const Ta={arraySlice:function(e,t,n){return Ta.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){const t=e.length,n=new Array(t);for(let e=0;e!==t;++e)n[e]=e;return n.sort((function(t,n){return e[t]-e[n]})),n},sortedArray:function(e,t,n){const i=e.length,r=new e.constructor(i);for(let a=0,o=0;o!==i;++a){const i=n[a]*t;for(let n=0;n!==t;++n)r[o++]=e[i+n]}return r},flattenJSON:function(e,t,n,i){let r=1,a=e[0];for(;void 0!==a&&void 0===a[i];)a=e[r++];if(void 0===a)return;let o=a[i];if(void 0!==o)if(Array.isArray(o))do{o=a[i],void 0!==o&&(t.push(a.time),n.push.apply(n,o)),a=e[r++]}while(void 0!==a);else if(void 0!==o.toArray)do{o=a[i],void 0!==o&&(t.push(a.time),o.toArray(n,n.length)),a=e[r++]}while(void 0!==a);else do{o=a[i],void 0!==o&&(t.push(a.time),n.push(o)),a=e[r++]}while(void 0!==a)},subclip:function(e,t,n,i,r=30){const a=e.clone();a.name=t;const o=[];for(let e=0;e<a.tracks.length;++e){const t=a.tracks[e],s=t.getValueSize(),l=[],c=[];for(let e=0;e<t.times.length;++e){const a=t.times[e]*r;if(!(a<n||a>=i)){l.push(t.times[e]);for(let n=0;n<s;++n)c.push(t.values[e*s+n])}}0!==l.length&&(t.times=Ta.convertArray(l,t.times.constructor),t.values=Ta.convertArray(c,t.values.constructor),o.push(t))}a.tracks=o;let s=1/0;for(let e=0;e<a.tracks.length;++e)s>a.tracks[e].times[0]&&(s=a.tracks[e].times[0]);for(let e=0;e<a.tracks.length;++e)a.tracks[e].shift(-1*s);return a.resetDuration(),a},makeClipAdditive:function(e,t=0,n=e,i=30){i<=0&&(i=30);const r=n.tracks.length,a=t/i;for(let t=0;t<r;++t){const i=n.tracks[t],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const o=e.tracks.find((function(e){return e.name===i.name&&e.ValueTypeName===r}));if(void 0===o)continue;let s=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(s=l/3);let c=0;const h=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const d=i.times.length-1;let u;if(a<=i.times[0]){const e=s,t=l-s;u=Ta.arraySlice(i.values,e,t)}else if(a>=i.times[d]){const e=d*l+s,t=e+l-s;u=Ta.arraySlice(i.values,e,t)}else{const e=i.createInterpolant(),t=s,n=l-s;e.evaluate(a),u=Ta.arraySlice(e.resultBuffer,t,n)}"quaternion"===r&&(new we).fromArray(u).normalize().conjugate().toArray(u);const p=o.times.length;for(let e=0;e<p;++e){const t=e*h+c;if("quaternion"===r)we.multiplyQuaternionsFlat(o.values,t,u,0,o.values,t);else{const e=h-2*c;for(let n=0;n<e;++n)o.values[t+n]-=u[n]}}}return e.blendMode=2501,e}};class Ra{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],r=t[n-1];e:{t:{let a;n:{i:if(!(e<i)){for(let a=n+2;;){if(void 0===i){if(e<r)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(r=i,i=t[++n],e<i)break t}a=t.length;break n}if(e>=r)break e;{const o=t[1];e<o&&(n=2,r=o);for(let a=n-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(n===a)break;if(i=r,r=t[--n-1],e>=r)break t}a=n,n=0}}for(;n<a;){const i=n+a>>>1;e<t[i]?a=i:n=i+1}if(i=t[n],r=t[n-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===i)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=e*i;for(let e=0;e!==i;++e)t[e]=n[r+e];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Ca extends Ra{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(e,t,n){const i=this.parameterPositions;let r=e-2,a=e+1,o=i[r],s=i[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:r=e,o=2*t-n;break;case 2402:r=i.length-2,o=t+i[r]-i[r+1];break;default:r=e,o=n}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=e,s=2*n-t;break;case 2402:a=1,s=n+i[1]-i[0];break;default:a=e-1,s=t}const l=.5*(n-t),c=this.valueSize;this._weightPrev=l/(t-o),this._weightNext=l/(s-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,l=s-o,c=this._offsetPrev,h=this._offsetNext,d=this._weightPrev,u=this._weightNext,p=(n-t)/(i-t),f=p*p,m=f*p,g=-d*m+2*d*f-d*p,v=(1+d)*m+(-1.5-2*d)*f+(-.5+d)*p+1,x=(-1-u)*m+(1.5+u)*f+.5*p,y=u*m-u*f;for(let e=0;e!==o;++e)r[e]=g*a[c+e]+v*a[l+e]+x*a[s+e]+y*a[h+e];return r}}class Da extends Ra{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,l=s-o,c=(n-t)/(i-t),h=1-c;for(let e=0;e!==o;++e)r[e]=a[l+e]*h+a[s+e]*c;return r}}class Aa extends Ra{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class Ia{constructor(e,t,n,i){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Ta.convertArray(t,this.TimeBufferType),this.values=Ta.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:Ta.convertArray(e.times,Array),values:Ta.convertArray(e.values,Array)};const t=e.getInterpolation();t!==e.DefaultInterpolation&&(n.interpolation=t)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Aa(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Da(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Ca(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case F:t=this.InterpolantFactoryMethodDiscrete;break;case O:t=this.InterpolantFactoryMethodLinear;break;case N:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(t);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return F;case this.InterpolantFactoryMethodLinear:return O;case this.InterpolantFactoryMethodSmooth:return N}}getValueSize(){return this.values.length/this.times.length}shift(e){if(0!==e){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(1!==e){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<e;)++r;for(;-1!==a&&n[a]>t;)--a;if(++a,0!==r||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const e=this.getValueSize();this.times=Ta.arraySlice(n,r,a),this.values=Ta.arraySlice(this.values,r*e,a*e)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let t=0;t!==r;t++){const i=n[t];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,i),e=!1;break}if(null!==a&&a>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,i,a),e=!1;break}a=i}if(void 0!==i&&Ta.isTypedArray(i))for(let t=0,n=i.length;t!==n;++t){const n=i[t];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,n),e=!1;break}}return e}optimize(){const e=Ta.arraySlice(this.times),t=Ta.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===N,r=e.length-1;let a=1;for(let o=1;o<r;++o){let r=!1;const s=e[o];if(s!==e[o+1]&&(1!==o||s!==e[0]))if(i)r=!0;else{const e=o*n,i=e-n,a=e+n;for(let o=0;o!==n;++o){const n=t[e+o];if(n!==t[i+o]||n!==t[a+o]){r=!0;break}}}if(r){if(o!==a){e[a]=e[o];const i=o*n,r=a*n;for(let e=0;e!==n;++e)t[r+e]=t[i+e]}++a}}if(r>0){e[a]=e[r];for(let e=r*n,i=a*n,o=0;o!==n;++o)t[i+o]=t[e+o];++a}return a!==e.length?(this.times=Ta.arraySlice(e,0,a),this.values=Ta.arraySlice(t,0,a*n)):(this.times=e,this.values=t),this}clone(){const e=Ta.arraySlice(this.times,0),t=Ta.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,e,t);return n.createInterpolant=this.createInterpolant,n}}Ia.prototype.TimeBufferType=Float32Array,Ia.prototype.ValueBufferType=Float32Array,Ia.prototype.DefaultInterpolation=O;class Pa extends Ia{}Pa.prototype.ValueTypeName="bool",Pa.prototype.ValueBufferType=Array,Pa.prototype.DefaultInterpolation=F,Pa.prototype.InterpolantFactoryMethodLinear=void 0,Pa.prototype.InterpolantFactoryMethodSmooth=void 0,class extends Ia{}.prototype.ValueTypeName="color",class extends Ia{}.prototype.ValueTypeName="number";class La extends Ra{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=(n-t)/(i-t);let l=e*o;for(let e=l+o;l!==e;l+=4)we.slerpFlat(r,0,a,l-o,a,l,s);return r}}class Fa extends Ia{InterpolantFactoryMethodLinear(e){return new La(this.times,this.values,this.getValueSize(),e)}}Fa.prototype.ValueTypeName="quaternion",Fa.prototype.DefaultInterpolation=O,Fa.prototype.InterpolantFactoryMethodSmooth=void 0;class Oa extends Ia{}Oa.prototype.ValueTypeName="string",Oa.prototype.ValueBufferType=Array,Oa.prototype.DefaultInterpolation=F,Oa.prototype.InterpolantFactoryMethodLinear=void 0,Oa.prototype.InterpolantFactoryMethodSmooth=void 0,class extends Ia{}.prototype.ValueTypeName="vector",new class{constructor(e,t,n){const i=this;let r,a=!1,o=0,s=0;const l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){s++,!1===a&&void 0!==i.onStart&&i.onStart(e,o,s),a=!0},this.itemEnd=function(e){o++,void 0!==i.onProgress&&i.onProgress(e,o,s),o===s&&(a=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return r?r(e):e},this.setURLModifier=function(e){return r=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){const t=l.indexOf(e);return-1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(let t=0,n=l.length;t<n;t+=2){const n=l[t],i=l[t+1];if(n.global&&(n.lastIndex=0),n.test(e))return i}return null}}};const Na=new RegExp("[\\[\\]\\.:\\/]","g"),Ua="[^\\[\\]\\.:\\/]",ka="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Ba=/((?:WC+[\/:])*)/.source.replace("WC",Ua),za=/(WCOD+)?/.source.replace("WCOD",ka),Ga=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ua),Ha=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ua),Va=new RegExp("^"+Ba+za+Ga+Ha+"$"),Wa=["material","materials","bones"];class qa{constructor(e,t,n){this.path=t,this.parsedPath=n||qa.parseTrackName(t),this.node=qa.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new qa.Composite(e,t,n):new qa(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(Na,"")}static parseTrackName(e){const t=Va.exec(e);if(null===t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const e=n.nodeName.substring(i+1);-1!==Wa.indexOf(e)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=e)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(void 0===t||""===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(void 0!==n)return n}if(e.children){const n=function(e){for(let i=0;i<e.length;i++){const r=e[i];if(r.name===t||r.uuid===t)return r;const a=n(r.children);if(a)return a}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let r=t.propertyIndex;if(e||(e=qa.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let i=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(let t=0;t<e.length;t++)if(e[t].name===i){i=t;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==i){if(void 0===e[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[i]}}const a=e[i];if(void 0===a){const n=t.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",e)}let o=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?o=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(o=this.Versioning.MatrixWorldNeedsUpdate);let s=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==e.morphTargetDictionary[r]&&(r=e.morphTargetDictionary[r])}s=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(s=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(s=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[s],this.setValue=this.SetterByBindingTypeAndVersioning[s][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}qa.Composite=class{constructor(e,t,n){const i=n||qa.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}},qa.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},qa.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},qa.prototype.GetterByBindingType=[qa.prototype._getValue_direct,qa.prototype._getValue_array,qa.prototype._getValue_arrayElement,qa.prototype._getValue_toArray],qa.prototype.SetterByBindingTypeAndVersioning=[[qa.prototype._setValue_direct,qa.prototype._setValue_direct_setNeedsUpdate,qa.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[qa.prototype._setValue_array,qa.prototype._setValue_array_setNeedsUpdate,qa.prototype._setValue_array_setMatrixWorldNeedsUpdate],[qa.prototype._setValue_arrayElement,qa.prototype._setValue_arrayElement_setNeedsUpdate,qa.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[qa.prototype._setValue_fromArray,qa.prototype._setValue_fromArray_setNeedsUpdate,qa.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];const Xa=new ArrayBuffer(4),ja=(new Float32Array(Xa),new Uint32Array(Xa),new Uint32Array(512)),Ya=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(ja[e]=0,ja[256|e]=32768,Ya[e]=24,Ya[256|e]=24):t<-14?(ja[e]=1024>>-t-14,ja[256|e]=1024>>-t-14|32768,Ya[e]=-t-1,Ya[256|e]=-t-1):t<=15?(ja[e]=t+15<<10,ja[256|e]=t+15<<10|32768,Ya[e]=13,Ya[256|e]=13):t<128?(ja[e]=31744,ja[256|e]=64512,Ya[e]=24,Ya[256|e]=24):(ja[e]=31744,ja[256|e]=64512,Ya[e]=13,Ya[256|e]=13)}const Za=new Uint32Array(2048),Ka=new Uint32Array(64),Ja=new Uint32Array(64);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;0==(8388608&t);)t<<=1,n-=8388608;t&=-8388609,n+=947912704,Za[e]=t|n}for(let e=1024;e<2048;++e)Za[e]=939524096+(e-1024<<13);for(let e=1;e<31;++e)Ka[e]=e<<23;Ka[31]=1199570944,Ka[32]=2147483648;for(let e=33;e<63;++e)Ka[e]=2147483648+(e-32<<23);Ka[63]=3347054592;for(let e=1;e<64;++e)32!==e&&(Ja[e]=1024);class Qa extends be{constructor(e,t,n,i){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(e,t,n,i)}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"141"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="141");var $a=function(e,t,n,i){this.x=e,this.y=t,this.width=n,this.height=i,this.finalX=e+n,this.finalY=t+i};$a.prototype.set=function(e,t,n,i,r,a){return this.x=e,this.y=t,this.finalX=n,this.finalY=i,this.width=r,this.height=a,this},$a.prototype.fits=function(e){var t=e.image.width,n=e.image.height;return t<=this.width&&n<=this.height},$a.prototype.fitsPerfectly=function(e){var t=e.image.width,n=e.image.height;return t==this.width&&n==this.height},$a.prototype.overlaps=function(e){return this.x<e.x+e.width&&this.x+this.width>e.x&&this.y<e.y+e.height&&this.y+this.height>e.y};var eo=function(e){if(this.MAX_TEXTURE_SIZE=4096,e){for(var t in this.dataURLs=new Object,e){var n=e[t];if(n instanceof _a)throw new Error("CompressedTextures are not supported.");if(void 0===n.image.toDataURL){var i=document.createElement("canvas");i.width=n.image.naturalWidth,i.height=n.image.naturalHeight,i.getContext("2d").drawImage(n.image,0,0),this.dataURLs[t]=i.toDataURL()}else this.dataURLs[t]=n.image.toDataURL()}this.canvas=document.createElement("canvas"),this.textureCount=0,this.maxWidth=0,this.maxHeight=0;var r="";for(t in e)this.textureCount++,(s=e[t]).area=s.image.width*s.image.height,s.image.width>this.maxWidth&&(this.maxWidth=s.image.width),s.image.height>this.maxHeight&&(this.maxHeight=s.image.height),r+=t+",";r=r.substring(0,r.length-1),this.textureCache=new Object,this.node=new Object,this.node.rectangle=new $a(0,0,this.maxWidth*this.textureCount,this.maxHeight*this.textureCount),this.textureOffsets=new Object,this.allNodes=[],this.insert(this.node,this.findNextTexture(e),e),this.ranges=new Object;var a=this.calculateImageSize(e);this.canvas.width=a.width,this.canvas.height=a.height;var o=this.canvas.getContext("2d");for(t in this.context=o,this.textureOffsets){for(var s=e[t],l=this.textureOffsets[t].x,c=this.textureOffsets[t].y,h=s.image.width,d=s.image.height,u=c;u<c+d;u+=d)for(var p=l;p<l+h;p+=h)o.drawImage(s.image,p,u,h,d);var f=new Object;f.startU=l/a.width,f.endU=(l+h)/a.width,f.startV=1-c/a.height,f.endV=1-(c+d)/a.height,this.ranges[t]=f}this.ranges=this.makeCanvasPowerOfTwo(void 0,this.ranges),this.mergedTexture=new Ma(this.canvas),this.mergedTexture.wrapS=m,this.mergedTexture.wrapT=m,this.mergedTexture.minFilter=v,this.mergedTexture.magFilter=v,this.mergedTexture.needsUpdate=!0}};eo.prototype.isTextureAlreadyInserted=function(e,t){var n=t[e],i=this.dataURLs[e];for(var r in t)if(r!=e){var a=t[r];if(i==this.dataURLs[r]&&a.offset.x==n.offset.x&&a.offset.y==n.offset.y&&a.offset.z==n.offset.z&&a.repeat.x==n.repeat.x&&a.repeat.y==n.repeat.y&&a.flipX==n.flipX&&a.flipY==n.flipY&&a.wrapS==n.wrapS&&a.wrapT==n.wrapT&&this.textureOffsets[r])return this.textureOffsets[r]}return!1},eo.prototype.insert=function(e,t,n){var i=n[t],r=this.isTextureAlreadyInserted(t,n);if(r)return this.textureOffsets[t]=r,void(null!=(A=this.findNextTexture(n))&&this.insert(e,A,n));var a=i.image.width,o=i.image.height;if(e.upperNode){for(var s=this.maxWidth*this.textureCount+this.maxHeight*this.textureCount,l=0,c=!1,h=0;h<this.allNodes.length;h++){var d=this.allNodes[h];if(!d.textureName&&d.rectangle.fits(i)){this.textureOffsets[t]={x:d.rectangle.x,y:d.rectangle.y};var u=this.calculateImageSize(n),p=u.width+u.height;if(p<s&&u.width<=this.MAX_TEXTURE_SIZE&&u.height<=this.MAX_TEXTURE_SIZE){var f=!1;for(var m in this.textureOffsets)if(m!=t){var g=d.rectangle,v=this.textureOffsets[m].x,x=this.textureOffsets[m].y,y=n[m].image,_=new $a(g.x,g.y,a,o),M=new $a(v,x,y.width,y.height);_.overlaps(M)&&(f=!0)}f||(s=p,l=this.allNodes[h],c=!0)}delete this.textureOffsets[t]}}if(!c)throw new Error("Error: Try to use smaller textures.");if(this.textureOffsets[t]={x:l.rectangle.x,y:l.rectangle.y},l.textureName=t,!l.children){var S=new Object,b=new Object;S.upperNode=l,b.upperNode=l,l.children=[S,b];var w=l.rectangle.x,E=l.rectangle.y,T=this.maxWidth*this.textureCount,R=this.maxHeight*this.textureCount;S.rectangle=new $a(w+a,E,T-(w+a),R-E),b.rectangle=new $a(w,E+o,T-w,R-(E+o)),this.allNodes.push(S),this.allNodes.push(b)}null!=(A=this.findNextTexture(n))&&this.insert(e,A,n)}else{var C=e.rectangle.width,D=e.rectangle.height;e.textureName=t,S=new Object,b=new Object,S.upperNode=e,b.upperNode=e,e.children=[S,b],S.rectangle=new $a(a,0,C-a,o),b.rectangle=new $a(0,o,C,D-o),this.textureOffsets[t]={x:e.rectangle.x,y:e.rectangle.y};var A,I=e.children[0];this.allNodes=[e,S,b],null!=(A=this.findNextTexture(n))&&this.insert(I,A,n)}},eo.prototype.makeCanvasPowerOfTwo=function(e,t){var n=!1;e||(e=this.canvas,n=!0);var i=e.width,r=e.height,a=Math.pow(2,Math.ceil(Math.log(i)/Math.log(2))),o=Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))),s=document.createElement("canvas");s.width=a,s.height=o,s.getContext("2d").drawImage(e,0,0),n&&(this.canvas=s);for(const e in t)t[e].startU*=i/a,t[e].endU*=i/a,t[e].startV=1-(1-t[e].startV)*(r/o),t[e].endV=1-(1-t[e].endV)*(r/o);return t},eo.prototype.calculateImageSize=function(e){var t=0,n=0;for(var i in this.textureOffsets){var r=e[i],a=r.image.width,o=r.image.height,s=this.textureOffsets[i].x,l=this.textureOffsets[i].y;s+a>t&&(t=s+a),l+o>n&&(n=l+o)}return{width:t,height:n}},eo.prototype.findNextTexture=function(e){var t,n=-1;for(let r in e){var i=e[r];this.textureCache[r]||i.area>n&&(n=i.area,t=r)}return-1==n?null:(this.textureCache[t]=!0,t)},eo.prototype.rescale=function(e,t){var n=document.createElement("canvas");return n.width=e.width*t,n.height=e.height*t,n.getContext("2d").drawImage(e,0,0,e.width,e.height,0,0,n.width,n.height),n};const to=eo,no={};!function(){var e=no;function t(e,t,n){this.x=e,this.y=t,this.z=n}t.prototype.dot2=function(e,t){return this.x*e+this.y*t},t.prototype.dot3=function(e,t,n){return this.x*e+this.y*t+this.z*n};var n=[new t(1,1,0),new t(-1,1,0),new t(1,-1,0),new t(-1,-1,0),new t(1,0,1),new t(-1,0,1),new t(1,0,-1),new t(-1,0,-1),new t(0,1,1),new t(0,-1,1),new t(0,1,-1),new t(0,-1,-1)],i=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],r=new Array(512),a=new Array(512);e.seed=function(e){e>0&&e<1&&(e*=65536),(e=Math.floor(e))<256&&(e|=e<<8);for(var t=0;t<256;t++){var o;o=1&t?i[t]^255&e:i[t]^e>>8&255,r[t]=r[t+256]=o,a[t]=a[t+256]=n[o%12]}},e.seed(0);var o=.5*(Math.sqrt(3)-1),s=(3-Math.sqrt(3))/6,l=1/6;function c(e){return e*e*e*(e*(6*e-15)+10)}function h(e,t,n){return(1-n)*e+n*t}e.simplex2=function(e,t){var n,i,l=(e+t)*o,c=Math.floor(e+l),h=Math.floor(t+l),d=(c+h)*s,u=e-c+d,p=t-h+d;u>p?(n=1,i=0):(n=0,i=1);var f=u-n+s,m=p-i+s,g=u-1+2*s,v=p-1+2*s,x=a[(c&=255)+r[h&=255]],y=a[c+n+r[h+i]],_=a[c+1+r[h+1]],M=.5-u*u-p*p,S=.5-f*f-m*m,b=.5-g*g-v*v;return 70*((M<0?0:(M*=M)*M*x.dot2(u,p))+(S<0?0:(S*=S)*S*y.dot2(f,m))+(b<0?0:(b*=b)*b*_.dot2(g,v)))},e.simplex3=function(e,t,n){var i,o,s,c,h,d,u=.3333333333333333*(e+t+n),p=Math.floor(e+u),f=Math.floor(t+u),m=Math.floor(n+u),g=(p+f+m)*l,v=e-p+g,x=t-f+g,y=n-m+g;v>=x?x>=y?(i=1,o=0,s=0,c=1,h=1,d=0):v>=y?(i=1,o=0,s=0,c=1,h=0,d=1):(i=0,o=0,s=1,c=1,h=0,d=1):x<y?(i=0,o=0,s=1,c=0,h=1,d=1):v<y?(i=0,o=1,s=0,c=0,h=1,d=1):(i=0,o=1,s=0,c=1,h=1,d=0);var _=v-i+l,M=x-o+l,S=y-s+l,b=v-c+2*l,w=x-h+2*l,E=y-d+2*l,T=v-1+.5,R=x-1+.5,C=y-1+.5,D=a[(p&=255)+r[(f&=255)+r[m&=255]]],A=a[p+i+r[f+o+r[m+s]]],I=a[p+c+r[f+h+r[m+d]]],P=a[p+1+r[f+1+r[m+1]]],L=.6-v*v-x*x-y*y,F=.6-_*_-M*M-S*S,O=.6-b*b-w*w-E*E,N=.6-T*T-R*R-C*C;return 32*((L<0?0:(L*=L)*L*D.dot3(v,x,y))+(F<0?0:(F*=F)*F*A.dot3(_,M,S))+(O<0?0:(O*=O)*O*I.dot3(b,w,E))+(N<0?0:(N*=N)*N*P.dot3(T,R,C)))},e.perlin2=function(e,t){var n=Math.floor(e),i=Math.floor(t);e-=n,t-=i;var o=a[(n&=255)+r[i&=255]].dot2(e,t),s=a[n+r[i+1]].dot2(e,t-1),l=a[n+1+r[i]].dot2(e-1,t),d=a[n+1+r[i+1]].dot2(e-1,t-1),u=c(e);return h(h(o,l,u),h(s,d,u),c(t))},e.perlin3=function(e,t,n){var i=Math.floor(e),o=Math.floor(t),s=Math.floor(n);e-=i,t-=o,n-=s;var l=a[(i&=255)+r[(o&=255)+r[s&=255]]].dot3(e,t,n),d=a[i+r[o+r[s+1]]].dot3(e,t,n-1),u=a[i+r[o+1+r[s]]].dot3(e,t-1,n),p=a[i+r[o+1+r[s+1]]].dot3(e,t-1,n-1),f=a[i+1+r[o+r[s]]].dot3(e-1,t,n),m=a[i+1+r[o+r[s+1]]].dot3(e-1,t,n-1),g=a[i+1+r[o+1+r[s]]].dot3(e-1,t-1,n),v=a[i+1+r[o+1+r[s+1]]].dot3(e-1,t-1,n-1),x=c(e),y=c(t),_=c(n);return h(h(h(l,f,x),h(d,m,x),_),h(h(u,g,x),h(p,v,x),_),y)}}();const io=no;class ro{static Version="1.3";static Build=4;constructor(){this.EventListeners=[]}AddEventListener(e,t,n={TTL:1/0,Once:!1}){return void 0===this.EventListeners[e]&&(this.EventListeners[e]=[]),this.EventListeners[e].push({Event:e,Listener:t,Options:n}),this.EventListeners[e].length-1}RemoveEventListener(e,t){this.EventListeners[e].splice(t,1)}FireEventListeners(e,...t){const n=this.EventListeners[e];if(void 0===n)return;const i=[];for(let t=0;t<n.length;t++){const r=n[t].Listener;this.EventListeners[e][t].Options.TTL-- >0&&!0!==this.EventListeners[e][t].Options.Once||this.EventListeners[e].splice(t--,1),i.push(r)}for(const e of i)e(...t)}on(...e){this.AddEventListener(...e)}}class ao{static Version="Alpha 0.1.8.1";static Build=33;constructor(){this.Events=new ro,Vn.fog_vertex="\n#ifdef USE_FOG\n\n  fogDepth = - length(mvPosition);\n\n#endif\n",this.MergedTexture=void 0,this.RenderTime=10,this.LastRender=window.performance.now(),this.ImageScale=1,this.CloudsScale=.5,this.Renderer=new va({logarithmicDepthBuffer:!1,alpha:!0,powerPreference:"high-performance"}),this.Renderer.sortObjects=!1,this.Renderer.autoClear=!1,this.Renderer.info.autoReset=!1,this.Renderer.domElement.style.position="absolute",document.getElementsByTagName("body")[0].appendChild(this.Renderer.domElement),this.Scene=new xa,this.Scene.background=null,this.Scene.matrixAutoUpdate=!1,this.NearScene=new xa,this.NearScene.background=null,this.NearScene.matrixAutoUpdate=!1,this.NearScene.autoUpdate=!1,this.FarScene=new xa,this.FarScene.background=null,this.FarScene.matrixAutoUpdate=!1,this.FarScene.autoUpdate=!1,this.RaytracedPassScene=new xa,this.RaytracedPassScene.background=null,this.RaytracedPassScene.matrixAutoUpdate=!1,this.FinalPassScene=new xa,this.FinalPassScene.background=null,this.FinalPassScene.matrixAutoUpdate=!1,this.OutputPassScene=new xa,this.OutputPassScene.background=null,this.OutputPassScene.matrixAutoUpdate=!1,this.TestPassScene=new xa,this.TestPassScene.background=null,this.TestPassScene.matrixAutoUpdate=!1,this.SmallTargetScene=new xa,this.SmallTargetScene.background=null,this.SmallTargetScene.matrixAutoUpdate=!1,this.DefaultFOV=110,this.Camera=new Cn(this.DefaultFOV,window.innerWidth/window.innerHeight,2,49152),this.Camera.rotation.order="YXZ",this.UpscalingKernelSize=2,this.UseShadows=!0,this.IntermediateTarget=new Me(1e3,1e3),this.IntermediateTarget.texture.format=1031,this.IntermediateTarget.texture.type=S,this.IntermediateTarget.texture.internalFormat="RG32UI",this.IntermediateTarget.texture.minFilter=this.IntermediateTarget.texture.magFilter=v,this.IntermediateTarget.generateMipmaps=!1,this.IntermediateTarget.stencilBuffer=!1,this.IntermediateTarget.depthBuffer=!0,this.IntermediateTarget.depthTexture=new fa(1e3,1e3),this.IntermediateTarget.depthTexture.format=R,this.IntermediateTarget.depthTexture.type=M,this.IntermediateTarget.depthTexture.needsUpdate=!0,this.ClampDepthRenderTarget=new Me(1e3,1e3),this.ClampDepthRenderTarget.generateMipmaps=!1,this.ClampDepthRenderTarget.stencilBuffer=!1,this.ClampDepthRenderTarget.depthBuffer=!0,this.ClampDepthRenderTarget.depthTexture=this.IntermediateTarget.depthTexture,this.SmallRaytracingTarget=new Me(100,100),this.SmallRaytracingTarget.texture.format=D,this.SmallRaytracingTarget.texture.type=_,this.SmallRaytracingTarget.texture.internalFormat="R8UI",this.SmallRaytracingTarget.texture.minFilter=this.SmallRaytracingTarget.texture.magFilter=v,this.SmallRaytracingTarget.generateMipmaps=!1,this.SmallRaytracingTarget.stencilBuffer=!1,this.SmallRaytracingTarget.depthBuffer=!1,this.ProcessedWorldTarget=new Me(1e3,1e3),this.ProcessedWorldTarget.texture.format=T,this.ProcessedWorldTarget.texture.type=_,this.ProcessedWorldTarget.texture.internalFormat="RGBA8",this.ProcessedWorldTarget.texture.minFilter=this.ProcessedWorldTarget.texture.magFilter=v,this.ProcessedWorldTarget.generateMipmaps=!1,this.ProcessedWorldTarget.stencilBuffer=!1,this.ProcessedWorldTarget.depthBuffer=!1,this.BackgroundTarget=new Me(500,500),this.BackgroundTarget.texture.format=T,this.BackgroundTarget.texture.type=_,this.BackgroundTarget.texture.internalFormat="RGBA8",this.BackgroundTarget.texture.minFilter=this.BackgroundTarget.texture.magFilter=x,this.BackgroundTarget.generateMipmaps=!1,this.BackgroundTarget.stencilBuffer=!1,this.BackgroundTarget.depthBuffer=!1,this.UseScaledTarget=!1,this.BackgroundScene=new xa,this.BackgroundCamera=new Qn(-1,1,1,-1,0,1),this.SimplexData=new Float32Array(1024);for(let e=0,t=0;e<16;++e)for(let n=0;n<4;++n)for(let i=0;i<16;++i,++t)this.SimplexData[t]=io.simplex3(e/3,n/3,i/3);this.SimplexTexture=new Qa(this.SimplexData,16,4,16),this.SimplexTexture.format=1028,this.SimplexTexture.type=b,this.SimplexTexture.wrapS=f,this.SimplexTexture.wrapT=f,this.SimplexTexture.wrapR=f,this.SimplexTexture.minFilter=this.SimplexTexture.magFilter=x,this.SimplexTexture.unpackAlignment=1,this.SimplexTexture.needsUpdate=!0,this.BackgroundMaterial=new Tn({side:2,uniforms:{iResolution:{value:new $(640,360)},iGlobalTime:{value:0},iMouse:{value:new $(0,0)},iMouseFirst:{value:new $(0,0)},iRotation:{value:new Ee(0,0,0)},iPosition:{value:new Ee(0,0,0)},FOV:{value:.9},iSimplexTexture:{value:this.SimplexTexture},iSunPosition:{value:new Ee(0,-.707,.707)},iCloudCoverage:{value:.75},iRequiredPixels:{value:this.IntermediateTarget.texture}},vertexShader:"varying vec2 vUv;\r\nvarying vec4 vPosition;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  vPosition = projectionMatrix * modelViewMatrix * vec4(position, 1.);\r\n  gl_Position = vPosition;\r\n}",fragmentShader:'precision mediump float;\r\nvarying vec2 vUv;\r\nvarying vec4 vPosition;\r\n\r\nuniform vec2 iResolution;\r\nuniform float iGlobalTime;\r\nuniform vec2 iMouse;\r\nuniform vec2 iMouseFirst;\r\nuniform vec3 iRotation;\r\nuniform vec3 iPosition;\r\nuniform float FOV;\r\nuniform mediump sampler3D iSimplexTexture;\r\nuniform vec3 iSunPosition;\r\nuniform float iCloudCoverage;\r\nuniform highp usampler2D iRequiredPixels;\r\n\r\n// Shader adapted from https://www.shadertoy.com/view/Xttcz2\r\n// MANY thanks to valentingalea!!! https://github.com/valentingalea/shaderbox\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2017 Valentin Galea\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the "Software"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n//\r\n// Volumetric Clouds Experiment\r\n//\r\n// A mashup of ideas from different sources:\r\n// * Magnus Wrenninge - Production Volume Rendering\r\n//   http://magnuswrenninge.com/productionvolumerendering\r\n// * Andrew Schneider - The Real-time Volumetric Cloudscapes of Horizon: Zero Dawn\r\n//   http://advances.realtimerendering.com/s2015/The%20Real-time%20Volumetric%20Cloudscapes%20of%20Horizon%20-%20Zero%20Dawn%20-%20ARTR.pdf\r\n// * Scratchapixel - Simulating the Colors of the Sky\r\n//   https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky\r\n// * Ian McEwan, Ashima Arts - Array and textureless GLSL 2D/3D/4D simplex\r\n//   https://github.com/ashima/webgl-noise\r\n// * and of course lots of iteration and tweaking\r\n//   https://github.com/valentingalea/shaderbox\r\n//\r\n\r\n// ----------------------------------------------------------------------------\r\n// Various 3D utilities functions\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html\r\nvec3 linear_to_srgb(const in vec3 color){\r\n  const float p = 1. / 2.2;\r\n  return vec3(pow(color.r, p), pow(color.g, p), pow(color.b, p));\r\n}\r\n\r\nstruct volume_sampler_t {\r\n  vec3 origin; // start of ray\r\n  vec3 pos; // current pos of acccumulation ray\r\n  float height;\r\n\r\n  float coeff_absorb;\r\n  float T; // transmitance\r\n\r\n  vec3 C; // color\r\n  float alpha;\r\n};\r\n\r\nvolume_sampler_t begin_volume(const in vec3 origin, const in float coeff_absorb){\r\n  return volume_sampler_t(origin, origin, 0., coeff_absorb, 1., vec3(0., 0., 0.), 0.);\r\n}\r\n\r\nfloat illuminate_volume(inout volume_sampler_t vol, const in vec3 V, const in vec3 L);\r\n\r\nvoid integrate_volume(inout volume_sampler_t vol, const in vec3 V, const in vec3 L, const in float density, const in float dt){\r\n  // change in transmittance (follows Beer-Lambert law)\r\n  float T_i = exp(-vol.coeff_absorb * density * dt);\r\n  // Update accumulated transmittance\r\n  vol.T *= T_i;\r\n  // integrate output radiance (here essentially color)\r\n  vol.C += vol.T * illuminate_volume(vol, V, L) * density * dt;\r\n  // accumulate opacity\r\n  vol.alpha += (1. - T_i) * (1. - vol.alpha);\r\n}\r\n\r\n\r\n  #define cld_march_steps (100)\r\n  #define cld_coverage (1. - iCloudCoverage)\r\n  #define cld_thick (200.)\r\n  #define cld_absorb_coeff (1.)\r\n  #define cld_wind_dir vec3(0, 0, -iGlobalTime * .02)\r\n  #define cld_sun_dir vec3(-iSunPosition.x, -iSunPosition.y, iSunPosition.z)\r\nfloat coverage_map;\r\n\r\nfloat hash(const in float n){\r\n  return fract(sin(n)*1151.4422132);\r\n}\r\n\r\nfloat noise(vec3 v){\r\n  return texture(iSimplexTexture, vec3(v.x / 8., v.y / 2., v.z / 8.)).r;\r\n  //return mod(hash(fract(length(floor(v) / 8.))), .25) + .1;//texture(iSimplexTexture, vec3(v.x / 8., v.y / 2., v.z / 8.)).r + texture(iSimplexTexture, vec3(v.x / 32., v.y / 8., v.z / 32.)).r;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Fractional Brownian Motion\r\n// depends on custom basis function\r\n// ----------------------------------------------------------------------------\r\n\r\n//#define DECL_FBM_FUNC(_name, _octaves, _basis) float _name(const in vec3 pos, const in float lacunarity, const in float init_gain, const in float gain) { vec3 p = pos; float H = init_gain; float t = 0.; for (int i = 0; i < _octaves; i++) { t += _basis * H; p *= lacunarity; H *= gain; } return t; }\r\n//DECL_FBM_FUNC(fbm_clouds, 5, abs(noise(p)))\r\n\r\nfloat fbm_clouds_2(const in vec3 pos, const in float lacunarity, const in float init_gain, const in float gain) {\r\n  vec3 p = pos;\r\n  float H = init_gain;\r\n  float t = 0.;\r\n  for (int i = 0; i < 5; i++) {\r\n    t += abs(noise(p)) * H;\r\n    p *= lacunarity;\r\n    H *= gain;\r\n  }\r\n  return t;\r\n}\r\nfloat Falloffs[6] = float[6](1., .5, .25, .125, .0625, .03125);\r\nfloat Lacunarities[5] = float[5](1., 3.2323999404907227, 10.448409080505371, 33.7734375, 109.16925811767578);\r\n/*\r\n  const a = new Float32Array([1., 3.2324, 0., 0., 0.]);\r\n  for(let i = 2; i < 5; ++i){\r\n      a[i] = a[i - 1] * a[1];\r\n  }\r\n*/\r\nfloat Components[5] = float[5](0., 0., 0., 0., 0.);\r\nint Indices[16] = int[16](4, 3, 4, 2, 4, 3, 4, 1, 4, 3, 4, 2, 4, 3, 4, 0);\r\nfloat CurrentDensity = 0.;\r\n\r\nfloat fbm_clouds(const in vec3 pos) {\r\n  vec3 p = pos;\r\n  float t = 0.;\r\n  for (int i = 0; i < 5; i++) {\r\n    t += abs(noise(p * Lacunarities[i])) * Falloffs[i + 1];\r\n  }\r\n  return t;\r\n}\r\n\r\nfloat density_func(const in vec3 pos, const in float h, int Iteration){\r\n  vec3 p = pos * .001 + cld_wind_dir;\r\n  //float dens = fbm_clouds(p * 2.032, 2.6434, .5, .5);\r\n  //float dens = fbm_clouds(p);\r\n\r\n  /*{\r\n    int Index = Indices[Iteration & 15];//Iteration % 5;\r\n    float NewContribution = abs(noise(p * Lacunarities[Index])) * Falloffs[Index + 1];\r\n    CurrentDensity = CurrentDensity - Components[Index] + NewContribution;\r\n    Components[Index] = NewContribution;\r\n  }*/\r\n  float CurrentDensity = 0.;\r\n  for(int i = 0; i < 5; ++i){\r\n    CurrentDensity += abs(noise(p * Lacunarities[i])) * Falloffs[i + 1];\r\n  }\r\n\r\n  return CurrentDensity * smoothstep (cld_coverage, cld_coverage + .035, CurrentDensity);\r\n}\r\n\r\n\r\nvec3 render_sky_color(const in vec3 eye_dir){\r\n  //if(length(gl_FragCoord.xy - iMouse) < 2.) return vec3(1., 0., 0.);\r\n  //if(length(gl_FragCoord.xy - iMouseFirst) < 2.) return vec3(0., 0., 1.);\r\n  //return vec3(1.);\r\n\r\n  const vec3 sun_color = vec3(1., .7, .55);\r\n  float sun_amount = max(dot(eye_dir, cld_sun_dir), 0.);\r\n\r\n  vec3 sky = mix(vec3(.0, .1, .4), vec3(.3, .6, .8), 1.0 - eye_dir.y);\r\n  sky += sun_color * min(pow(sun_amount, 1500.0) * 5.0, 1.0);\r\n  sky += sun_color * min(pow(sun_amount, 10.0) * .6, 1.0);\r\n\r\n  return sky;\r\n}\r\n\r\n\r\n\r\nfloat illuminate_volume(inout volume_sampler_t cloud, const in vec3 V, const in vec3 L){\r\n  return exp(cloud.height) / 2.;\r\n}\r\n\r\nvec4 render_clouds(vec3 origin, vec3 direction){\r\n  const int steps = cld_march_steps;\r\n  const float march_step = 1. * cld_thick / float(steps);\r\n\r\n  vec3 projection = direction / direction.y;\r\n  vec3 iter = /*march_step * direction;*/projection * march_step;\r\n\r\n  float cutoff = dot(direction, vec3(0, 1, 0));\r\n\r\n  volume_sampler_t cloud = begin_volume(\r\n  origin + projection * 250.,\r\n  cld_absorb_coeff);\r\n\r\n  /*for(int i = 0; i < 5; ++i){\r\n    float Contribution = abs(noise(cloud.pos * Lacunarities[i])) * Falloffs[i + 1];\r\n    Components[i] = Contribution;\r\n    CurrentDensity += Contribution;\r\n  }*/\r\n\r\n  for (int i = 0; i < steps; i++) {\r\n    cloud.height = (cloud.pos.y - cloud.origin.y) / cld_thick;\r\n    float dens = density_func(cloud.pos, cloud.height, i);\r\n\r\n    integrate_volume(\r\n    cloud,\r\n    direction, cld_sun_dir,\r\n    dens, march_step);\r\n\r\n    cloud.pos += iter;\r\n\r\n    if (cloud.alpha > .99) break;\r\n  }\r\n\r\n  return vec4(cloud.C, cloud.alpha * smoothstep(.0, .2, cutoff));\r\n}\r\n\r\nvec3 render(vec3 origin, vec3 direction){\r\n  vec3 sky = render_sky_color(direction);\r\n  if(dot(direction, vec3(0, 1, 0)) < 0.05) return sky;\r\n  if(texture(iRequiredPixels, gl_FragCoord.xy / iResolution.xy).x != 0u) return sky;\r\n\r\n  vec4 cld = render_clouds(origin, direction);\r\n  vec3 col = mix(sky, cld.rgb, cld.a);\r\n\r\n  return col;\r\n}\r\n\r\nmat3 RotateX(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(1.,0.,0.,\r\n  0., c,-s,\r\n  0., s, c);\r\n}\r\nmat3 RotateY(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, 0., s,\r\n  0., 1.,0.,\r\n  -s, 0., c);\r\n}\r\nmat3 RotateZ(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, s,0.,\r\n  -s, c,0.,\r\n  0.,0.,1.);\r\n}\r\n\r\nvoid MainImage(out vec4 fragColor, in vec2 fragCoord){\r\n  vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\r\n  vec3 RayOrigin = iPosition;\r\n  vec3 RayDirection = normalize(vec3(uv, 1. / tan(FOV / 2.))) * RotateX(-iRotation.x) * RotateY(-iRotation.y);\r\n\r\n  fragColor = vec4(linear_to_srgb(render(RayOrigin, RayDirection)), 1);\r\n}\r\n\r\nvoid main(){\r\n  MainImage(gl_FragColor, vUv * iResolution.xy);\r\n}'});let e=0,t=0,n=!1;this.Events.AddEventListener("TextureLoad",function(){n=!0}.bind(this));let i=2;document.addEventListener("pointerlockchange",(function(){console.log("hi"),i=2})),function t(){window.requestAnimationFrame(t.bind(this)),(i<0||e--<0)&&(i--,n&&this.Render())}.bind(this)(),document.addEventListener("mousemove",function(r){e=1,t=window.performance.now(),this.Events.FireEventListeners("MouseMove",r),i>=0&&n&&this.Render()}.bind(this)),window.requestAnimationFrame(function(){(function e(){Application.Main.Renderer.RequestPreAnimationFrame(e.bind(this));const t=window.performance.now()+195e3;this.BackgroundMaterial.uniforms.iSunPosition.value=new Ee(Math.cos(t/1e5),.2*Math.sin(t/1e5)-.4,Math.sin(t/1e5)).normalize()}).bind(this)(),function e(){Application.Main.Renderer.RequestPreAnimationFrame(e.bind(this)),this.BackgroundMaterial.uniforms.iRotation.value.copy(this.Camera.rotation),this.BackgroundMaterial.uniforms.iPosition.value.copy(this.Camera.position),this.BackgroundMaterial.uniforms.iGlobalTime.value=window.performance.now()/1e3,this.BackgroundMaterial.uniforms.FOV.value=Number.parseFloat(this.Camera.fov)*Math.PI/180}.bind(this)()}.bind(this));const r=new _n(new Hn(2,2,1,1),this.BackgroundMaterial);this.BackgroundScene.add(r),this.UsingShader=!1,window.addEventListener("resize",function(){this.UpdateSize()}.bind(this)),this.UpdateSize(),this.Events.FireEventListeners("InitEnd")}GetBlockWidthFrom19m(e,t){return Math.floor((2818/e-e/11.5)*t/950)}UpdateSize(){this.Events.FireEventListeners("Resize"),this.Renderer.setSize(window.innerWidth*this.ImageScale,window.innerHeight*this.ImageScale),this.IntermediateTarget.setSize(window.innerWidth*this.ImageScale,window.innerHeight*this.ImageScale),this.ClampDepthRenderTarget.setSize(window.innerWidth*this.ImageScale,window.innerHeight*this.ImageScale),this.ProcessedWorldTarget.setSize(window.innerWidth*this.ImageScale,window.innerHeight*this.ImageScale),this.BackgroundTarget.setSize(Math.ceil(window.innerWidth*this.CloudsScale),Math.ceil(window.innerHeight*this.CloudsScale)),this.Renderer.domElement.style.width=window.innerWidth+"px",this.Renderer.domElement.style.height=window.innerHeight+"px",this.BackgroundMaterial.uniforms.iResolution.value=new $(window.innerWidth*this.CloudsScale,window.innerHeight*this.CloudsScale),this.Camera.aspect=window.innerWidth/window.innerHeight,this.Camera.updateProjectionMatrix(),this.Camera.rotation.order="YXZ"}Render(){let e=window.performance.now()-this.LastRender;this.RenderTime=e,this.LastRender=window.performance.now(),this.Events.FireEventListeners("BeforeRender"),this.Renderer.info.reset();const t=this.Renderer.getContext();this.Renderer.setRenderTarget(this.IntermediateTarget),this.Renderer.clear(!1,!0,!0),t.clearBufferuiv(t.COLOR,0,new Uint32Array([0,0,0,0])),this.Events.FireEventListeners("RenderingNearMeshPass"),this.Camera.near=1.5,this.Camera.far=384,this.Camera.updateProjectionMatrix(),this.Renderer.render(this.NearScene,this.Camera),this.Renderer.setRenderTarget(this.ClampDepthRenderTarget),this.Renderer.render(this.TestPassScene,this.Camera),this.Renderer.setRenderTarget(this.IntermediateTarget),this.Events.FireEventListeners("RenderingFarMeshPass"),this.Camera.near=48,this.Camera.far=49152,this.Camera.updateProjectionMatrix(),this.Renderer.render(this.FarScene,this.Camera),this.Renderer.setRenderTarget(this.SmallRaytracingTarget),this.Renderer.render(this.SmallTargetScene,this.Camera),this.Renderer.setRenderTarget(this.ProcessedWorldTarget),this.Renderer.clear(),this.Events.FireEventListeners("RenderingFinalPass"),this.Renderer.render(this.FinalPassScene,this.Camera),this.Renderer.setRenderTarget(this.BackgroundTarget),this.Renderer.clear(),this.Events.FireEventListeners("RenderingBackgroundTarget"),this.Renderer.render(this.BackgroundScene,this.BackgroundCamera),this.Renderer.setRenderTarget(null),this.Renderer.clear(),this.Renderer.render(this.OutputPassScene,this.Camera),this.Events.FireEventListeners("AfterRender")}RequestAnimationFrame(e){this.Events.AddEventListener("AfterRender",e,{Once:!0})}RequestPreAnimationFrame(e){this.Events.AddEventListener("BeforeRender",e,{Once:!0})}InitialiseTextures(e){this.Events.FireEventListeners("TextureLoad")}MergeTextures(e){console.log(e);let t=new to(e);t.mergedTexture.magFilter=v,t.mergedTexture.minFilter=v,t.mergedTexture.wrapS=f,t.mergedTexture.wrapT=f,t.mergedTexture.repeat.set(1,1),this.MergedTexture=t,console.log("Texture atlas:"),console.log(this.MergedTexture.mergedTexture.image.toDataURL()),this.Events.FireEventListeners("TextureLoad")}}function oo(e,t){return t<0?oo(-e,-t):(1-(e=(e%1+1)%1))/t}function so(e){return e>0?1:e<0?-1:0}class lo{constructor(e=3e3){this._seedValue=e,this.setSeed=this.setSeed.bind(this),this.noise=this.noise.bind(this),this.Euclidean=this.Euclidean.bind(this),this.Manhattan=this.Manhattan.bind(this)}static xorshift(e){let t=e^e>>12;return t^=t<<25,t^=t>>27,2*t}static xorshift31(e){return e^=e>>>12,e^=e<<25,(e^=e>>>27)>>>0}static hash(e,t,n){return 16777619*(16777619*(16777619*(2166136261^e)^t)^n)&4294967295}static hash2(e,t){return 16777619*(16777619*(2166136261^e)^t)}static d(e,t){return[e.x-t.x,e.y-t.y,e.z-t.z]}static EuclideanDistance(e,t){return lo.d(e,t).reduce(((e,t)=>e+t*t),0)}static ManhattanDistance(e,t){return lo.d(e,t).reduce(((e,t)=>e+Math.abs(t)),0)}static probLookup(e){return(e&=4294967295)<393325350?1:e<1022645910?2:e<1861739990?3:e<2700834071?4:e<3372109335?5:e<3819626178?6:e<4075350088?7:e<4203212043?8:9}static insert(e,t){let n;for(let i=e.length-1;i>=0&&!(t>e[i]);i--)n=e[i],e[i]=t,i+1<e.length&&(e[i+1]=n)}noise(e,t){let n,i,r,a,o,s={x:0,y:0,z:0},l={x:0,y:0,z:0},c=[9999999,9999999,9999999];for(let h=-1;h<2;++h)for(let d=-1;d<2;++d)for(let u=-1;u<2;++u){r=Math.floor(e.x)+h,a=Math.floor(e.y)+d,o=Math.floor(e.z)+u,n=lo.xorshift(lo.hash(r+this._seedValue&4294967295,4294967295&a,4294967295&o)),i=lo.probLookup(n);for(let h=0;h<i;++h)n=lo.xorshift(n),s.X=n/4294967296,n=lo.xorshift(n),s.Y=n/4294967296,n=lo.xorshift(n),s.Z=n/4294967296,l={x:s.X+r,y:s.Y+a,z:s.Z+o},lo.insert(c,t(e,l))}return c}FasterNoise(e,t){const n=this._seedValue;let i=1/0;for(let r=-1;r<2;++r)for(let a=-1;a<2;++a){const o=Math.floor(e)+r,s=Math.floor(t)+a;let l=lo.xorshift31(lo.hash2(o^n,s));const c=[1,1,1,1,1,1,1,1,1,2,2,2,3,3,4,4][15&l];for(let n=0;n<c;++n){l=lo.xorshift31(l);const n=l/4294967295+o;l=lo.xorshift31(l);const r=l/4294967295+s;l=lo.xorshift31(l);let a=(e-n)**2+(t-r)**2+(l/4294967295)**2;i>a&&(i=a)}}return i}FasterNoise2(e,t){}static EuclideanDistance2D(e,t){return(e.x-t.x)**2+(e.y-t.y)**2}setSeed(e=3e3){this._seedValue=e}Euclidean(e,t,n){return this.noise({x:e,y:t,z:n},lo.EuclideanDistance)}Manhattan(e,t,n){return this.noise({x:e,y:t,z:n},lo.ManhattanDistance)}}const co=new lo;function ho(e,t){const n=(2*e-1)/((2*e-1)**2+1);return(Math.sign(n)*Math.abs(n)**t+.5**t)/t**-t}function uo(e,t){const n=(2*e-1)/((2*e-1)**2+1);return Math.sign(n)*(1-(1-2*Math.abs(n))**t)*.5+.5}const po=[];for(let e=0;e<150;e++){po[e]=new Float32Array(501);for(let t=0,n=po[e];t<501;t++)n[t]=ho(t/500,e/150)}const fo=[];for(let e=0;e<150;e++){fo[e]=new Float32Array(501);for(let t=0,n=fo[e];t<501;t++)n[t]=uo(t/2e3,e/150)}const mo=[];for(let e=250;e<450;e++){mo[e]=new Float32Array(771);for(let t=0,n=mo[e];t<771;t++)n[t]=(go=t/500,vo=e/150,Math.expm1(Math.pow(go,vo))/Math.expm1(1))}var go,vo;function xo(e,t,n){return function(i){return function(e){return 1/(e**2+1)}((i-e)/t)**n}}function yo(e,t){return function(n){return function(e){return 2/((Math.abs(1*e)+1)**2+1)}((n-e)/t)}}function _o(e,t){return function(n){return function(e){return 1-Math.abs(Math.sin(e))}((n-e)/t)}}function Mo(e,t){const n=new Float32Array(18);for(let i=0;i<18;i++)n[i]=io.simplex3(e/2**i,t/2**i,1536);let i=0;for(let e=0,t=10,r=17-t;e<r;++e)i+=n[e+t]/2**(r-e);let r=0;for(let e=0,t=1,i=5-t;e<i;++e)r+=n[e+t]/2**(i-e);let a=0;for(let e=0,t=3,i=9-t;e<i;++e)a+=n[e+t]/2**(i-e);io.simplex3(e/32768,t/32768,1542),io.simplex3(e/512,t/512,1539),io.simplex3(e/256,t/256,1539.4),co.FasterNoise(e/4e4,t/4e4);const o=co.FasterNoise(e/2e3,t/2e3,0),s=io.simplex3(e/16384,t/16384,1555),l=io.simplex3(e/4096,t/4096,1555);let c=function(e){const t=(2*e-1)/((2*e-1)**2+1);return Math.sign(t)*(1-(1-2*Math.abs(t))**(1+e))*.5+.5}(xo(.47+.1*io.simplex3(e/16384,t/16384,1555.5),.1+.06*(.8*s+.2*l),.57)(i)),h=c;return h*=o,h+=.5*c,2200*h}function So(e){io.seed(e),co.setSeed(e)}xo(1e3,200,1),xo(-0,30,1),xo(300,200,1),xo(300,50,1),xo(1200,300,1),xo(0,150,1),xo(1.02,.17,1),xo(1.01,.05,1),yo(150,20),yo(100,25),_o(0,.1),_o(0,.0251),xo(.47,.12,.57),yo(.4,.04),yo(.15,.0014),So(17);class bo{constructor(){this.Events=new ro,this.Data8Size=1048576,this.VoxelTypes=new Uint16Array(new SharedArrayBuffer(1024*this.Data8Size)),this.Data1=new Uint8Array(new SharedArrayBuffer(128*this.Data8Size)),this.Data8=new Uint32Array(new SharedArrayBuffer(8388608)).fill(2147483648),this.Data64=new Uint32Array(new SharedArrayBuffer(16384)).fill(2147483648),this.AllocationIndex=new Uint32Array(new SharedArrayBuffer(8)),this.AllocationArray=new Uint32Array(new SharedArrayBuffer(4*this.Data8Size));for(let e=0;e<this.Data8Size;++e)this.AllocationArray[e]=e;this.AllocationIndex64=new Uint16Array(new SharedArrayBuffer(4)),this.AllocationArray64=new Uint16Array(new SharedArrayBuffer(8192));for(let e=0,t=4096;e<t;++e)this.AllocationArray64[e]=e;this.Data64Offset=new Int32Array(new SharedArrayBuffer(96)),this.GPUData1=new Uint8Array(new SharedArrayBuffer(16777216)).fill(255),this.GPUData8=new Uint8Array(new SharedArrayBuffer(262144)).fill(255),this.GPUData64=new Uint8Array(new SharedArrayBuffer(512)).fill(255),this.GPUType1=new Uint16Array(new SharedArrayBuffer(268435456)),this.GPUInfo8=new Uint32Array(new SharedArrayBuffer(8388608)).fill(2147483648),this.GPUInfo64=new Uint32Array(new SharedArrayBuffer(16384)).fill(2147483648),this.GPUBoundingBox1=new Uint32Array(new SharedArrayBuffer(8388608)),this.LoadStageQueueLengths=new Uint32Array(new SharedArrayBuffer(32)),this.GetHeight=Mo,this.NotLoadedID=Application.Main.BlockRegistry.GetBlockByIdentifier("primary:not_loaded").ID,this.Seed=17}SetSeed(e){Application.Main.WorkerLoadingPipeline.postMessage({Request:"SetSeed",Seed:e}),this.Seed=e,So(e),this.Events.FireEventListeners("SeedUpdate",e)}ReloadWorld(){Application.Main.WorkerLoadingPipeline.postMessage({Request:"ReloadWorld"})}GetBlock(e,t,n){const i=Math.floor(e/64),r=Math.floor(t/64),a=Math.floor(n/64),o=Application.Main.World.Data64Offset,s=i-o[0],l=r-o[1],c=a-o[2];if(s<0||l<0||c<0||s>7||l>7||c>7)return 0;const h=Application.Main.World.Data64[s<<6|l<<3|c];if(1==(h>>31&1))return 0;const d=7&Math.floor(e/8),u=7&Math.floor(t/8),p=7&Math.floor(n/8),f=Application.Main.World.Data8[(524287&h)<<9|d<<6|u<<3|p];if(1==(f>>28&1))return 65535&f;if(1==(f>>31&1))return 0;const m=7&Math.floor(e),g=7&Math.floor(t),v=7&Math.floor(n);return Application.Main.World.VoxelTypes[(16777215&f)<<9|m<<6|g<<3|v]}SetBlock(e,t,n,i){const r=Math.floor(e/64),a=Math.floor(t/64),o=Math.floor(n/64),s=Application.Main.World.Data64Offset,l=r-s[0],c=a-s[1],h=o-s[2];if(l<0||c<0||h<0||l>7||c>7||h>7)return 0;const d=l<<6|c<<3|h;let u=Application.Main.World.Data64[d];if(1==(u>>31&1)){const e=4095&Atomics.add(this.AllocationIndex64,0,1),t=Atomics.exchange(this.AllocationArray64,e,65535);this.Data64[d]&=~(1<<31),this.Data64[d]&=-524288,this.Data64[d]|=t,this.Data64[d]|=7<<19}const p=(524287&u)<<9|(7&Math.floor(e/8))<<6|(7&Math.floor(t/8))<<3|7&Math.floor(n/8),f=Application.Main.World.Data8[p],m=0===i|0;if(1==(f>>28&1)){const e=Atomics.add(this.AllocationIndex,0,1)&this.AllocationArray.length-1,t=Atomics.exchange(this.AllocationArray,e,2147483647);if(2147483647===t)throw Atomics.sub(this.AllocationIndex,0,1),new Error("Ran out of Data8 while setting block!");const n=65535&this.Data8[p];this.Data8[p]=t;for(let e=0;e<512;++e)this.VoxelTypes[t<<9|e]=n;for(let e=0;e<64;++e)this.Data1[t<<6|e]=0}else if(1==(f>>31&1)){if(m)return;const e=Atomics.add(this.AllocationIndex,0,1)&this.AllocationArray.length-1,t=Atomics.exchange(this.AllocationArray,e,2147483647);if(2147483647===t)throw Atomics.sub(this.AllocationIndex,0,1),new Error("Ran out of Data8 while setting block!");this.Data8[p]=t;for(let e=0;e<512;++e)this.VoxelTypes[t<<9|e]=0;for(let e=0;e<64;++e)this.Data1[t<<6|e]=255}const g=7&Math.floor(e),v=7&Math.floor(t),x=7&Math.floor(n),y=16777215&this.Data8[p];this.Data64[d]&=~(!m<<31),this.Data8[p]&=~(!m<<31),this.VoxelTypes[y<<9|g<<6|v<<3|x]=i,m?this.Data1[y<<6|g<<3|v]|=1<<x:this.Data1[y<<6|g<<3|v]&=~(1<<x),this.Data64[d]|=1<<30,this.Data8[p]|=1<<30}Raycast(e=512,t=null,n=null,i=[0,4]){let r=Application.Main.Renderer.Camera,a=Math.sin(r.rotation.x),o=Math.sin(r.rotation.y),s=Math.cos(r.rotation.x),l=Math.cos(r.rotation.y);n=n||[-o*s,a,-l*s];let c=function(e,t,n,i){var r=Math.floor(e[0]),a=Math.floor(e[1]),o=Math.floor(e[2]),s=t[0],l=t[1],c=t[2],h=so(s),d=so(l),u=so(c),p=oo(e[0],s),f=oo(e[1],l),m=oo(e[2],c),g=h/s,v=d/l,x=u/c,y=[0,0,0];if(0===s&&0===l&&0===c)throw new RangeError("Raycast in zero direction!");for(n/=Math.sqrt(s*s+l*l+c*c);;){if(i(r,a,o,y))return{X:r,Y:a,Z:o,Face:y,Distance:Math.sqrt((e[0]-r)**2+(e[1]-a)**2+(e[2]-o)**2)};if(p<f)if(p<m){if(p>n)return null;r+=h,p+=g,y[0]=-h,y[1]=0,y[2]=0}else{if(m>n)return null;o+=u,m+=x,y[0]=0,y[1]=0,y[2]=-u}else if(f<m){if(f>n)return null;a+=d,f+=v,y[0]=0,y[1]=-d,y[2]=0}else{if(m>n)return null;o+=u,m+=x,y[0]=0,y[1]=0,y[2]=-u}}}(t=t||[r.position.x,r.position.y,r.position.z],n,e,function(e,t,n,r){return!i.includes(this.GetBlock(e,t,n))}.bind(this));return null!==c&&(c.BlockType=this.GetBlock(c.X,c.Y,c.Z)),c}}const wo={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[{Identifier:"ImportantMod",MinBuild:11,MaxBuild:void 0}],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class Eo{static Identifier="SmoothZoom";static Version="0.0.2";static Build=2;static MLE=void 0;static Renderer=void 0;static World=void 0;static CurrentZoom=1;static States={Zooming:!1,PreferredZoomLevel:1};static Register(e){Eo.MLE=e}static PreInit(){Eo.MLE.PreInit.Done(Eo.Identifier)}static Init(){Eo.Renderer=Application.Main.Renderer,Eo.World=Application.Main.World;const e=Application.Main.Game.GamePointerLockHandler;e.PointerLock.AddEventListener("MouseDown",function(e){4!==e.which||Eo.States.Zooming||(Eo.States.Zooming=!0,Eo.States.PreferredZoomLevel=16&e.buttons?9:3)}.bind(this)),e.PointerLock.AddEventListener("MouseUp",function(e){4===e.which&&Eo.States.Zooming&&(Eo.States.Zooming=!1,Eo.States.PreferredZoomLevel=1)}.bind(this)),e.PointerLock.AddEventListener("PointerLocked",function(e){!0===e&&(Eo.States.Zooming=!1,Eo.States.PreferredZoomLevel=1)}.bind(this)),function e(t){t.AnimationFrame(),Application.Main.Renderer.RequestAnimationFrame(function(){e(t)}.bind(this))}.bind(this)(this),Eo.MLE.Init.Done(Eo.Identifier)}static PostInit(){Eo.MLE.PostInit.Done(Eo.Identifier)}static AnimationFrame(){let e=Eo.States.PreferredZoomLevel;Eo.CurrentZoom=(Eo.CurrentZoom+.1*e)/1.1,Eo.Renderer.Camera.fov=Eo.Renderer.DefaultFOV/Eo.CurrentZoom,Eo.Renderer.Camera.updateProjectionMatrix()}}class To{static Version="0.7.14.0";static Build=118;static DecToHex(e,t){let n=e.toString(16);for(;n.length<6;)n="0"+n;return 1==t&&(n="#"+n),n}static Mod(e,t){return e>=0||e%t==-0?Math.abs(e%t):e%t+t}static SetProperty(e,t,n){let i=e,r=t.split("."),a=r.length;for(let e=0;e<a-1;e++){let t=r[e];"[object Object]"!==Object.prototype.toString.call(i[t])&&(i[t]={}),i=i[t]}return i[r[a-1]]=n,i}static MergeObjects(...e){if(1===e.length)return e[0];let t=e[e.length-1];for(let n=e.length-2;n>=0;n--)if("[object Object]"===Object.prototype.toString.call(e[n]))for(let i in e[n])if("[object Array]"===Object.prototype.toString.call(e[n][i])){void 0===t[i]&&(t[i]=[]);for(let r=0;r<e[n][i].length;r++)t[i][r]=e[n][i][r]}else"[object Object]"===Object.prototype.toString.call(e[n][i])?t[i]=To.MergeObjects(e[n][i],t[i]):("[object Object]"!==Object.prototype.toString.call(t)&&(t={}),t[i]=e[n][i]);else t=e[n];return t}static CreateArray(e){let t=new Array(e||0),n=e;if(arguments.length>1){let i=Array.prototype.slice.call(arguments,1);for(;n--;)t[e-1-n]=this.CreateArray.apply(this,i)}return t}static CreateCanvas(e,t,n,i){let r=document.createElement("canvas");return void 0!==n&&(r.style.zIndex=n),r.width=e||1280,r.height=t||720,r.style.display=i||"block",r}static CreateWrapperDiv(e,t,n,i,r){let a=document.createElement("div");return void 0!==n&&(a.style.zIndex=n),a.style.width=(e||1280)+"px",a.style.height=(t||720)+"px",a.style.display=i||"block",a.style.overflow=r||"hidden",a}static CreateSVG(e,t,n,i){let r=document.createElementNS("http://www.w3.org/2000/svg","svg");return void 0!==n&&(r.style.zIndex=n),r.style.position="absolute",To.SetSVGElementProperty(r,"width",e||1280),To.SetSVGElementProperty(r,"height",t||720),r.style.display=i||"block",r}static CreateSVGElement(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}static SetSVGElementProperty(e,t,n){e.setAttributeNS(null,t,n)}static GetSVGElementProperty(e,t){return e.getAttributeNS(null,t)}static CreateUUID(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}static CircleRectCollision(e,t,n,i,r,a,o){void 0===o&&(a=o);let s=e-Math.max(Math.min(e,i+a),i),l=t-Math.max(Math.min(t,r+o),r);return Math.pow(s,2)+Math.pow(l,2)<Math.pow(n,2)}static WeightedAverage(e,t=1){let n=0;for(let i=0;i<e.length;i++)n+=Math.pow(e[i],t);return Math.pow(n/e.length,1/t)}static GetScientificNotation(e,t=1){let n,i,r,a=!1;return e<0&&(a=!0),n=(e=String(Math.floor(e))).match(/e+/)?Number(e.split("e+")[1]):e.match(/-/)?e.length-1:e.length,i=a?e.substring(2,2+t).split("e")[0]:e.substring(1,1+t).split("e")[0],r=a?e.substring(0,2)+"."+i+"x10^"+n:e[0]+"."+i+"x10^"+n,r}static HTTPPost(e,t,n){let i=new XMLHttpRequest;i.open("POST",e,!0),i.setRequestHeader("Content-type","application/json"),i.send(t),i.onreadystatechange=function(){if(4===i.readyState&&200===i.status){let e=JSON.parse(i.responseText);void 0!==n&&n(e)}}.bind(this)}static HTTPGet(e,t){let n=new XMLHttpRequest;n.open("GET",e,!0),n.send(),n.onreadystatechange=function(){if(4===n.readyState&&200===n.status){let e=JSON.parse(n.responseText);void 0!==t&&t(e)}}.bind(this)}static GetOrdinalIndicator(e){let t=String(e);return Number(t[t.length-1])>=4||0===Number(t[t.length-1])||1===Number(t[t.length-2])?"th":1===Number(t[t.length-1])?"st":2===Number(t[t.length-1])?"nd":3===Number(t[t.length-1])?"rd":void 0}static RedirectTo(e){window.location.href=e}static RequestUserFile(e){let t=document.createElement("input");t.type="file",t.click(),t.addEventListener("change",function(n){console.log(t.files);let i=new FileReader;i.readAsText(t.files[0]),i.addEventListener("load",function(t){e(t.target.result)}.bind(this))}.bind(this))}static Download(e,t){let n=document.createElement("a");n.download=t??"",n.href=e,n.click()}static CopyToClipboard(e){let t=function(t){alert("Copying failed: "+t+"\nAttempted copy:\n"+e)}.bind(this);void 0!==navigator.clipboard?navigator.clipboard.writeText(e).catch(t):t("You have loaded the HTTP version of this site. To use the clipboard API, you need to switch to the HTTPS version. If it's available, simply change the protocol in the address bar. If not, the attempted copy can be seen below.")}static RequestPrinting(){window.print()}static RequestIFramePrint(e){e.contentWindow.print()}static RequestCrossOriginIFramePrint(e){var t=document.createElement("iframe");document.getElementsByTagName("body")[0].appendChild(t),t.style.width="100%",t.style.height="100%",t.style.display="none";var n=t.contentWindow;n.document.open(),n.document.write('<iframe src="'+e+'" onload="print();" width="1000" height="1800" frameborder="0" marginheight="0" marginwidth="0">'),n.document.close()}static DownloadTextFile(e,t){let n=document.createElement("a");n.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}static DownloadIFrame(e,t){let n='<!DOCTYPE html>\r\n<html xmlns="http://www.w3.org/1999/xhtml" lang="en">'+t.contentDocument.getElementsByTagName("html")[0].innerHTML+"</html>";To.DownloadTextFile(e,n)}}class Ro{static Version="Alpha 0.1.5.1";static Build=29;static DefaultProperties={Position:{X:0,Y:0},ZIndex:2500,Colour:"#007fffbf",ColumnWidth:1,MaxHeight:1e3,MaxWidth:300,ParentElement:document.getElementsByTagName("body")[0],MaxDataPoints:300};constructor(e={}){this.Properties=To.MergeObjects(e,Ro.DefaultProperties),this.Data=new Array(this.Properties.MaxWidth).fill(0),this.CanvasElement=document.createElement("canvas"),this.CanvasElement.style.pointerEvents="none",this.CanvasElement.style.position="absolute",this.CanvasElement.style.bottom="0px",this.CanvasElement.style.left="0px",this.CanvasElement.style.overflow="hidden",this.CanvasElement.style.zIndex="2500",this.CanvasElement.width=this.Properties.MaxWidth,this.CanvasElement.height=this.Properties.MaxHeight,this.Show(),document.body.appendChild(this.CanvasElement),this.NeedsUpdate=!1,function e(){Application.Main.Renderer.RequestAnimationFrame(e.bind(this)),this.NeedsUpdate&&this.Update()}.bind(this)()}Hide(){this.CanvasElement.style.display="none",this.Hidden=!0}Show(){this.CanvasElement.style.display="block",this.Hidden=!1}AddItem(e){this.Hidden||(this.Data.push(e),this.Data.length>this.Properties.MaxWidth&&this.Data.shift(),this.NeedsUpdate=!0)}Update(){this.NeedsUpdate=!1;const e=window.innerHeight,t=this.CanvasElement.getContext("2d");t.clearRect(0,0,this.Properties.MaxWidth,this.Properties.MaxHeight),t.fillStyle=this.Properties.Colour;let n=100;for(let e=0,t=this.Data.length;e<t;e++)this.Data[e]??=0,n<this.Data[e]&&(n=this.Data[e]);for(let i=0,r=this.Properties.MaxWidth;i<r;i++){this.Data[i];const r=this.Data[i]/n*e;t.fillRect(i,this.Properties.MaxHeight-r,1,r)}}}const Co={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[{Identifier:"ImportantMod",MinBuild:11,MaxBuild:void 0}],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class Do{static Identifier="DebugInfo";static Version="0.1.1";static Build=7;static MLE=void 0;static Renderer=void 0;static Register(e){Do.MLE=e}static PreInit(){Do.Renderer=Application.Main.Renderer,Do.MLE.PreInit.Done(Do.Identifier)}static Init(){(new Ao).AddInfo([function(){return"Permille.io "+Application.Version+" ["+Application.Build+"]"},function(){return navigator.userAgent},function(){return""},function(){const e=Do.Renderer.Camera;return"Position: "+Math.round(1e3*e.position.x)/1e3+" X, "+Math.round(1e3*e.position.y)/1e3+" Y, "+Math.round(1e3*e.position.z)/1e3+" Z"}.bind(this),function(){return""},function(){let e=0;!function t(){Application.Main.Renderer.RequestAnimationFrame(t),e++}();let t=0,n=0;return function i(){window.setTimeout(i,1e3),n=e-t,t=e}(),function(){return`${n} fps (${Math.round(100*Do.Renderer.RenderTime)/100} ms)`}}(),function(){return`Resolution: ${window.innerWidth} * ${window.innerHeight}`},function(){const e=Do.Renderer.Renderer.info;return"Geometries: "+e.memory.geometries+", Draw calls: "+e.render.calls}.bind(this),function(){return"Triangles: "+Do.Renderer.Renderer.info.render.triangles}.bind(this),function(){const e=Application.Main.World.AllocationIndex,t=Application.Main.World.AllocationIndex64,n=Application.Main.World.AllocationArray.length,i=(e[0]-e[1]&n-1)/n,r=(t[0]-t[1]&4095)/4096;return`Buffer utilisation: 8: ${Math.round(1e5*i)/1e3}%, 64: ${Math.round(1e5*r)/1e3}%`},function(){const e=Application.Main.World.AllocationIndex;let t=-1,n=0;return function(){return t!==(t=e[0]-e[1])&&(n=window.performance.now()),`Last update: ${Math.round(n)}`}}(),function(){const e=Application.Main.World.AllocationIndex,t=Application.Main.World.AllocationIndex64;return`Allocation Indices: 8: ${e[0]} - ${e[1]}; 64: ${t[0]} - ${t[1]}`}]),Do.MLE.Init.Done(Do.Identifier)}static PostInit(){Do.MLE.PostInit.Done(Do.Identifier)}}class Ao{static Version="Alpha 0.1.5.2";static Build=29;constructor(){this.Graph=new Ro,this.ZIndex=1e4,this.Wrapper=document.createElement("div"),document.getElementsByTagName("body")[0].appendChild(this.Wrapper),this.Wrapper.style.zIndex=this.ZIndex,this.Wrapper.style.pointerEvents="none",this.Wrapper.classList.add("DebugInfoOverlayWrapper"),this.Wrapper.style.contain="strict",this.Info=[],this.GraphInfo=1,this.UpdateInterval=1,this.Updates=0,this.LastTextUpdate=0,this.TextUpdateInterval=40,this.Visible=!0,this.GraphSource=function(){if(1===this.GraphInfo)return Application.Main.Renderer.RenderTime}.bind(this),document.addEventListener("keydown",function(e){"F3"!==e.key||e.repeat||(e.preventDefault(),this.GraphInfo=(this.GraphInfo+1)%3,0===this.GraphInfo&&this.Hide(),1===this.GraphInfo&&this.Show(),2===this.GraphInfo&&this.Graph.Hide())}.bind(this)),document.addEventListener("wheel",function(e){if(Application.Main.Game.ControlManager.Controls.GameControls.IsPressed("F3")){let t=e.target.getBoundingClientRect(),n=(e.clientX,t.left,e.clientY,t.top,e.deltaX,e.deltaY);this.UpdateInterval=Math.max(this.UpdateInterval+Math.sign(n),1)}}.bind(this)),Application.Main.Renderer.RequestAnimationFrame(function(){this.Update()}.bind(this))}AddInfo(e){for(let t=0,n=e.length;t<n;t++){const n=document.createElement("p");this.Wrapper.appendChild(n),this.Wrapper.appendChild(document.createElement("br"));const i=document.createTextNode("");n.appendChild(i),this.Info.push({Function:e[t],TextNode:i})}return this}Hide(){return this.Wrapper.style.display="none",this.Graph.Hide(),this.Visible=!1,this}Show(){return this.Wrapper.style.display="block",this.Graph.Show(),this.Visible=!0,this}Update(){if(Application.Main.Renderer.RequestAnimationFrame(function(){this.Update()}.bind(this)),this.Updates++%this.UpdateInterval==0&&this.Graph.AddItem(this.GraphSource()),!this.Visible)return;const e=window.performance.now();if(!(this.LastTextUpdate>e-this.TextUpdateInterval)){this.LastTextUpdate=e;for(let e=0,t=this.Info.length;e<t;e++){let t="";try{t=this.Info[e].Function()}catch(e){t=e.toString()}this.Info[e].TextNode.nodeValue=t}}}}const Io={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class Po{static Identifier="BlockInteraction";static Version="0.0.2";static Build=2;static MLE=void 0;static States={RepeatedBreakingIntervalID:null,RepeatedPlacingIntervalID:null,PickedBlock:1};static Register(e){Po.MLE=e}static PreInit(){Po.MLE.PreInit.Done(Po.Identifier)}static Init(){Application.Main.Game.World;const e=Application.Main.Game.GamePointerLockHandler;e.PointerLock.AddEventListener("MouseDown",function(e){1===e.which?(Po.BreakBlock(),Po.RepeatedBreakingIntervalID=setInterval(function(){Po.BreakBlock()}.bind(this),250)):3===e.which?(Po.SetBlock(1),Po.RepeatedPlacingIntervalID=setInterval(function(){Po.SetBlock(1)}.bind(this),250)):2===e.which&&Po.PickBlock()}.bind(this)),e.PointerLock.AddEventListener("MouseUp",function(e){1===e.which?clearInterval(Po.RepeatedBreakingIntervalID):3===e.which&&clearInterval(Po.RepeatedPlacingIntervalID)}.bind(this)),e.PointerLock.AddEventListener("PointerLocked",function(e){!0===e&&(Po.States.Zooming=!1,Po.States.PreferredZoomLevel=1)}.bind(this)),Po.MLE.Init.Done(Po.Identifier)}static PostInit(){Po.MLE.PostInit.Done(Po.Identifier)}static BreakBlock(){let e=Application.Main.World.Raycast(6);null!=e&&Application.Main.World.SetBlock(e.X,e.Y,e.Z,0)}static SetBlock(){let e=Application.Main.World.Raycast(6);null!=e&&Application.Main.World.SetBlock(e.X+e.Face[0],e.Y+e.Face[1],e.Z+e.Face[2],Po.States.PickedBlock)}static PickBlock(){let e=Application.Main.World.Raycast(512,null,null,[0]);null!==e&&(Po.States.PickedBlock=e.BlockType)}}class Lo{constructor(e,t,n=-1){this.Identifier=e,this.Properties=t,this.ID=n}}const Fo={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class Oo{static Identifier="default";static Version="0.0.3";static Build=3;static MLE=void 0;static Register(e){Oo.MLE=e}static PreInit(){Oo.MLE.PreInit.Done(Oo.Identifier)}static Init(){const e=Oo.MLE.Application.Main.BlockRegistry;e.RegisterBlock(new Lo("default:grass",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/grass.png",Precedence:2})),e.RegisterBlock(new Lo("default:rock",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/rock.png"})),e.RegisterBlock(new Lo("default:rock1",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/rock1.png"})),e.RegisterBlock(new Lo("default:water",{Solid:!1,Invisible:!1,Transparent:!0,DrawAllFaces:!1,Texture:"Default/Textures/default/water.png"})),e.RegisterBlock(new Lo("default:red",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/red.png"})),e.RegisterBlock(new Lo("default:leaves",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!0,Texture:"Default/Textures/default/leaves.png",Precedence:17})),e.RegisterBlock(new Lo("default:wood",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/wood.png",Precedence:16})),e.RegisterBlock(new Lo("default:oak_leaves",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!0,Texture:"Default/Textures/default/oak_leaves.png",Precedence:17})),e.RegisterBlock(new Lo("default:oak_wood",{Solid:!0,Invisible:!1,Transparent:!1,DrawAllFaces:!1,Texture:"Default/Textures/default/oak_wood.png",Precedence:16})),Oo.MLE.Init.Done(Oo.Identifier)}static PostInit(){Oo.MLE.PostInit.Done(Oo.Identifier)}static AnimationFrame(){}}class No{constructor(e,t=!1){this.Map=e,this.ReverseMap={};for(const t in e)this.ReverseMap[e[t]]=t;this.Overwrite=t}Get(e){return this.Map[e]}ReverseGet(e){return this.ReverseMap[e]}Set(e,t){(this.Overwrite||void 0===this.ReverseMap[t])&&(delete this.ReverseMap[this.Map[e]],delete this.Map[this.ReverseMap[t]],this.Map[e]=t,this.ReverseMap[t]=e)}}class Uo{constructor(){this.Events=new ro,this.DownKeys=[],this.Focused=!1,document.addEventListener("keydown",function(e){this.HandleKeyDown(e)}.bind(this)),document.addEventListener("keyup",function(e){this.HandleKeyUp(e)}.bind(this))}HandleKeyDown(e){this.Focused&&(this.DownKeys.push(e.code),this.Events.FireEventListeners("KeyDown",{Code:e.code}))}HandleKeyUp(e){if(!this.Focused)return;let t;for(;-1!==(t=this.DownKeys.indexOf(e.code));)this.DownKeys.splice(t,1);this.Events.FireEventListeners("KeyUp",{Code:e.code})}IsPressed(e){return-1!==this.DownKeys.indexOf(e)}Focus(){this.Focused=!0,this.Events.FireEventListeners("Focused")}Unfocus(){for(this.Focused=!1;this.DownKeys.length>0;)this.Events.FireEventListeners("KeyUp",{Code:this.DownKeys.pop(),Unfocused:!0});this.Events.FireEventListeners("Unfocused")}}class ko extends Uo{constructor(){super(),this.Configuration=new No({Exit:"Escape",Previous:"ArrowUp",Next:"ArrowDown",Send:"Enter",AutoComplete:"Tab"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class Bo{constructor(e){this.Chat=e,this.ChatControls=new ko,Application.Main.Game.ControlManager.Controls.ChatControls=this.ChatControls;const t=Application.Main.Game.ControlManager.Controls.GameControls;t.Configuration.Set("Chat","KeyT"),t.Events.AddEventListener("ControlDown",function(e){"Chat"===e.Control&&this.Chat.Show()}.bind(this)),this.ChatControls.Events.AddEventListener("ControlDown",function(e){switch(e.Control){case"Exit":this.Chat.Exit();break;case"Previous":this.Chat.SelectPrevious();break;case"Next":this.Chat.SelectNext();break;case"Send":this.Chat.SendContents();break;case"AutoComplete":this.Chat.AutoComplete();break;default:return}}.bind(this))}}var zo=r(3379),Go=r.n(zo),Ho=r(7795),Vo=r.n(Ho),Wo=r(569),qo=r.n(Wo),Xo=r(3565),jo=r.n(Xo),Yo=r(9216),Zo=r.n(Yo),Ko=r(4589),Jo=r.n(Ko),Qo=r(6949),$o={};$o.styleTagTransform=Jo(),$o.setAttributes=jo(),$o.insert=qo().bind(null,"head"),$o.domAPI=Vo(),$o.insertStyleElement=Zo(),Go()(Qo.Z,$o),Qo.Z&&Qo.Z.locals&&Qo.Z.locals;const es=new DOMParser,ts=document.importNode(es.parseFromString('<!DOCTYPE html> <html lang="en-us"> <head> <meta charset="UTF-8"/> <title>Chat</title> </head> <body> <div class="ChatLogWrapper"> <div class="ChatLog"></div> </div> <div class="Input single-line" contentEditable="true"></div> </body> </html> ',"text/html").body,!0);class ns{constructor(){this.Element=document.createElement("div"),this.Element.classList.add("Chat"),this.Element.append(...ts.childNodes),this.Hide(),document.body.appendChild(this.Element),this.ChatLog=this.Element.querySelector(".ChatLog"),this.Input=this.Element.querySelector(".Input")}Show(){this.Element.style.display="block"}Hide(){this.Element.style.display="none"}}const is={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class rs{static Identifier="Chat";static Version="0.0.2";static Build=2;static MLE=void 0;static Chat;static Renderer=void 0;static Register(e){rs.MLE=e}static PreInit(){rs.Chat=new os,rs.MLE.PreInit.Done(rs.Identifier)}static Init(){rs.MLE.Init.Done(rs.Identifier)}static PostInit(){rs.MLE.PostInit.Done(rs.Identifier)}}const as={tp:function(e,t,n){const i=Number.parseFloat(e),r=Number.parseFloat(t),a=Number.parseFloat(n);return isNaN(i)?'<span style="color:#ff0000">[tp] Error: X coordinate is invalid.</span>':isNaN(r)?'<span style="color:#ff0000">[tp] Error: Y coordinate is invalid.</span>':isNaN(a)?'<span style="color:#ff0000">[tp] Error: Z coordinate is invalid.</span>':(Application.Main.Renderer.Camera.position.x=i,Application.Main.Renderer.Camera.position.y=r,Application.Main.Renderer.Camera.position.z=a,"[tp] Teleported to "+i+", "+r+", "+a)}};class os{constructor(){this.ChatInterface=new ns,this.ChatControlHandler=new Bo(this),this.MessageHistory=[],this.CurrentSelection=0,this.ChatCommands=as}Show(){this.CurrentSelection=this.MessageHistory.length,Application.Main.Game.ControlManager.FocusControl("ChatControls"),window.setTimeout(function(){this.ChatInterface.Show(),this.ChatInterface.Input.focus()}.bind(this),5)}Exit(){this.CurrentSelection=this.MessageHistory.length,Application.Main.Game.ControlManager.FocusControl("GameControls"),this.ChatInterface.Hide(),window.focus(),Application.Main.Game.GamePointerLockHandler.PointerLock.Element.focus()}SelectPrevious(){this.CurrentSelection=Math.max(0,this.CurrentSelection-1),this.MessageHistory[this.CurrentSelection]&&(this.ChatInterface.Input.innerHTML=this.MessageHistory[this.CurrentSelection])}SelectNext(){this.CurrentSelection=Math.min(this.MessageHistory.length,this.CurrentSelection+1),this.MessageHistory[this.CurrentSelection]?this.ChatInterface.Input.innerHTML=this.MessageHistory[this.CurrentSelection]:this.ChatInterface.Input.innerHTML=""}SendContents(){let e=this.ChatInterface.Input.innerHTML;e=e.replaceAll("<","&lt;").replaceAll(">","&gt;");let t="";if(/^\//.test(e)){let n=e.replace(/^\//,"").split(" "),i=this.ChatCommands[n.shift()];t=i?i(...n)??"":'<span style="color:#ff0000">Unknown command.</span>'}else t=e;if(""!==e&&this.MessageHistory.push(e),""!==t){this.CurrentSelection=this.MessageHistory.length,this.ChatInterface.Input.innerHTML="";let e=this.ParseMessage(t);this.Receive(e)}this.Exit()}AutoComplete(){}Receive(e){let t=document.createElement("div");t.innerHTML=e;const n=this.ChatInterface.ChatLog;n.append(t),n.parentElement.scrollTo(0,n.parentElement.scrollHeight)}ParseMessage(e){let t;for(;t=e.match(/(?<!(?<!\\)\\)\!\{([^\]]*)\}/);)e=e.replace(t[0],`<span style="color: ${t[0].slice(2,-1)}">`),e+="</span>";return e}}class ss extends Uo{constructor(){super(),this.Configuration=new No({Exit:"Escape"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class ls{static Version="0.7.13.8";static Build=119;static DecToHex(e,t){let n=e.toString(16);for(;n.length<6;)n="0"+n;return 1==t&&(n="#"+n),n}static Mod(e,t){return e>=0||e%t==-0?Math.abs(e%t):e%t+t}static SetProperty(e,t,n){let i=e,r=t.split("."),a=r.length;for(let e=0;e<a-1;e++){let t=r[e];"[object Object]"!==Object.prototype.toString.call(i[t])&&(i[t]={}),i=i[t]}return i[r[a-1]]=n,i}static MergeObjects(...e){if(1===e.length)return e[0];let t={};for(let n=e.length-1;n>=0;n--)if("[object Object]"===Object.prototype.toString.call(e[n]))for(let i in e[n])if("[object Array]"===Object.prototype.toString.call(e[n][i])){void 0===t[i]&&(t[i]=[]);for(let r=0;r<e[n][i].length;r++)t[i][r]=e[n][i][r]}else"[object Object]"===Object.prototype.toString.call(e[n][i])?t[i]=ls.MergeObjects(e[n][i],t[i]):("[object Object]"!==Object.prototype.toString.call(t)&&(t={}),t[i]=e[n][i]);else t=e[n];return t}static CreateArray(e){let t=new Array(e||0),n=e;if(arguments.length>1){let i=Array.prototype.slice.call(arguments,1);for(;n--;)t[e-1-n]=this.CreateArray.apply(this,i)}return t}static CreateCanvas(e,t,n,i){let r=document.createElement("canvas");return void 0!==n&&(r.style.zIndex=n),r.width=e||1280,r.height=t||720,r.style.display=i||"block",r}static CreateWrapperDiv(e,t,n,i,r){let a=document.createElement("div");return void 0!==n&&(a.style.zIndex=n),a.style.width=(e||1280)+"px",a.style.height=(t||720)+"px",a.style.display=i||"block",a.style.overflow=r||"hidden",a}static CreateSVG(e,t,n,i){let r=document.createElementNS("http://www.w3.org/2000/svg","svg");return void 0!==n&&(r.style.zIndex=n),r.style.position="absolute",ls.SetSVGElementProperty(r,"width",e||1280),ls.SetSVGElementProperty(r,"height",t||720),r.style.display=i||"block",r}static CreateSVGElement(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}static SetSVGElementProperty(e,t,n){e.setAttributeNS(null,t,n)}static GetSVGElementProperty(e,t){return e.getAttributeNS(null,t)}static CreateUUID(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}static CircleRectCollision(e,t,n,i,r,a,o){void 0===o&&(a=o);let s=e-Math.max(Math.min(e,i+a),i),l=t-Math.max(Math.min(t,r+o),r);return Math.pow(s,2)+Math.pow(l,2)<Math.pow(n,2)}static WeightedAverage(e,t=1){let n=0;for(let i=0;i<e.length;i++)n+=Math.pow(e[i],t);return Math.pow(n/e.length,1/t)}static GetScientificNotation(e,t=1){let n,i,r,a=!1;return e<0&&(a=!0),n=(e=String(Math.floor(e))).match(/e+/)?Number(e.split("e+")[1]):e.match(/-/)?e.length-1:e.length,i=a?e.substring(2,2+t).split("e")[0]:e.substring(1,1+t).split("e")[0],r=a?e.substring(0,2)+"."+i+"x10^"+n:e[0]+"."+i+"x10^"+n,r}static HTTPPost(e,t,n){let i=new XMLHttpRequest;i.open("POST",e,!0),i.setRequestHeader("Content-type","application/json"),i.send(t),i.onreadystatechange=function(){if(4===i.readyState){let e=i.responseText;void 0!==n&&n(e,i)}}.bind(this)}static HTTPGet(e,t){let n=new XMLHttpRequest;n.open("GET",e,!0),n.send(),n.onreadystatechange=function(){if(4===n.readyState){let e=n.responseText;void 0!==t&&t(e,n)}}.bind(this)}static GetOrdinalIndicator(e){let t=String(e);return Number(t[t.length-1])>=4||0===Number(t[t.length-1])||1===Number(t[t.length-2])?"th":1===Number(t[t.length-1])?"st":2===Number(t[t.length-1])?"nd":3===Number(t[t.length-1])?"rd":void 0}static RedirectTo(e){let t=document.createElement("a");t.setAttribute("href",e),document.body.appendChild(t),t.click(),document.body.removeChild(t)}static RequestUserFile(e){let t=document.createElement("input");t.type="file",t.click(),t.addEventListener("change",function(n){console.log(t.files);let i=new FileReader;i.readAsText(t.files[0]),i.addEventListener("load",function(t){e(t.target.result)}.bind(this))}.bind(this))}static Download(e,t){let n=document.createElement("a");n.download=t??"",n.href=e,n.click()}static CopyToClipboard(e){let t=function(t){alert("Copying failed: "+t+"\nAttempted copy:\n"+e)}.bind(this);void 0!==navigator.clipboard?navigator.clipboard.writeText(e).catch(t):t("You have loaded the HTTP version of this site. To use the clipboard API, you need to switch to the HTTPS version. If it's available, simply change the protocol in the address bar. If not, the attempted copy can be seen below.")}static RequestPrinting(){window.print()}static RequestIFramePrint(e){e.contentWindow.print()}static RequestCrossOriginIFramePrint(e){var t=document.createElement("iframe");document.getElementsByTagName("body")[0].appendChild(t),t.style.width="100%",t.style.height="100%",t.style.display="none";var n=t.contentWindow;n.document.open(),n.document.write('<iframe src="'+e+'" onload="print();" width="1000" height="1800" frameborder="0" marginheight="0" marginwidth="0">'),n.document.close()}static DownloadTextFile(e,t){let n=document.createElement("a");n.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}static DownloadIFrame(e,t){let n='<!DOCTYPE html>\r\n<html xmlns="http://www.w3.org/1999/xhtml" lang="en">'+t.contentDocument.getElementsByTagName("html")[0].innerHTML+"</html>";ls.DownloadTextFile(e,n)}static GetQueryStringValues(e=location.search){var t={};return location.search&&location.search.substr(1).split("&").forEach((function(e){var n=e.split("="),i=n[0],r=n[1]&&decodeURIComponent(n[1]);(t[i]=t[i]||[]).push(r)})),t}static FormatDate(e){return(e.getFullYear()+"").padStart(4,"0")+"-"+(1+e.getMonth()+"").padStart(2,"0")+"-"+(e.getDate()+"").padStart(2,"0")+" "+(e.getHours()+"").padStart(2,"0")+":"+(e.getMinutes()+"").padStart(2,"0")+":"+(e.getSeconds()+"").padStart(2,"0")}}class cs{static Options_Default={Items:[],Default:0};static Options(e,t={}){t=ls.MergeObjects(t,cs.Options_Default);const n=e.querySelector(".ComboBox > span + span + div");for(let e of t.Items){const t=document.createElement("div");t.dataset.exp=e,n.append(t)}e.querySelector(".ComboBox > span:first-child").dataset.exp=t.Items[t.Default]??""}static Range_Default={Weighting:"Linear",Min:0,Max:20,Default:10,Step:1};static Range(e,t={}){t=ls.MergeObjects(t,cs.Range_Default);const n=e.querySelector(":scope > span + span > form > input:first-child"),i=e.querySelector(":scope > span + span > form > input + input");n.min=t.Min,n.max=t.Max,n.step=t.Step,n.value=t.Default,i.step="any",i.value=t.Default,i.addEventListener("keydown",(function(e){"Enter"===e.code&&e.preventDefault()}))}static Text_Default={Default:"",DataType:"text"};static Text(e,t={}){t=ls.MergeObjects(t,cs.Text_Default),e.querySelector(":scope > span + span > input").type=t.DataType,"number"===t.DataType&&(e.querySelector(":scope > span + span > input").step="any"),e.querySelector(":scope > span + span > input").addEventListener("keydown",(function(e){"Enter"===e.code&&e.preventDefault()})),e.querySelector(":scope > span + span > input").value=t.Default}static Switch_Default={Default:!1};static Switch(e,t={}){t=ls.MergeObjects(t,cs.Switch_Default),e.querySelector(":scope > span + span > label > input").checked=t.Default}static Key_Default={Default:""};static Key(e,t={}){t=ls.MergeObjects(t,cs.Key_Default),e.querySelector(":scope > span + span > input").value=t.Default}static Button_Default={TextExp:void 0,Text:void 0};static Button(e,t={}){(t=ls.MergeObjects(t,cs.Button_Default)).TextExp&&(e.querySelector(":scope > span + span > div").dataset.exp=t.TextExp),t.Text&&(e.querySelector(":scope > span + span > div").innerHTML=t.Text)}static CenteredButton_Default={TextExp:void 0,Text:void 0};static CenteredButton(e,t={}){(t=ls.MergeObjects(t,cs.CenteredButton_Default)).TextExp&&(e.querySelector(":scope > div").dataset.exp=t.TextExp),t.Text&&(e.querySelector(":scope > div").innerHTML=t.Text)}}var hs=r(3877),ds={};ds.styleTagTransform=Jo(),ds.setAttributes=jo(),ds.insert=qo().bind(null,"head"),ds.domAPI=Vo(),ds.insertStyleElement=Zo(),Go()(hs.Z,ds),hs.Z&&hs.Z.locals&&hs.Z.locals;var us=r(8043),ps={};ps.styleTagTransform=Jo(),ps.setAttributes=jo(),ps.insert=qo().bind(null,"head"),ps.domAPI=Vo(),ps.insertStyleElement=Zo(),Go()(us.Z,ps),us.Z&&us.Z.locals&&us.Z.locals;const fs=new DOMParser,ms=document.importNode(fs.parseFromString('<!DOCTYPE html> <html xmlns="http://www.w3.org/1999/xhtml" lang="en-us"> <head> <meta charset="UTF-8"/> <title>Menu</title> </head> <body> <h1 class="Title" data-exp="">Title</h1> <div class="Container"></div> <div class="ButtonInner Exit" data-exp="Exit">Exit</div> <template class="Options"> <div> <span>OptionComboBox</span><span><div class="ComboBox"> <span tabindex="-1">Default</span><span>v</span><div onclick="this.parentElement.firstElementChild.innerText=event.target.innerText"> </div> </div></span> </div> </template> <template class="Range"> <div><span>OptionSlider</span><span> <form> <input class="Slider" type="range" name="Range" min="0" max="20" value="0" oninput="this.form.Input.value=this.value||0"/> <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value=this.value||0"/> </form> </span></div> </template> <template class="Text"> <div><span>OptionTextInput</span><span> <input class="TextInput" type="text"/> </span></div> </template> <template class="Switch"> <div><span>OptionSwitch</span><span> <label class="SwitchInput"> <input type="checkbox"/> <span class="SwitchSlider"></span> </label> </span></div> </template> <template class="Key"> <div><span>OptionKeyInput</span><span> <input class="KeyInput" type="text" spellcheck="false" onkeydown="event.preventDefault(),this.value=event.code||event.key" oncontextmenu="event.preventDefault()" onmousedown=\'const Active="1"===this.dataset.Active;this===document.activeElement&&(this.dataset.Active="1"),Active&&(this.value="Mouse"+event.buttons)\' onblur=\'this.dataset.Active="0"\'/> </span></div> </template> <template class="Button"> <div> <span>OptionButton</span><span><div class="ButtonOption">Click this</div></span> </div> </template> <template class="CenteredButton"> <div> <div class="ButtonOption CenteredButton">Click this too</div> </div> </template> </body> </html> ',"text/html").body,!0);class gs{constructor(e){this.Events=new ro,this.Element=document.createElement("div"),this.Element.classList.add("Menu"),this.Element.classList.add("Base"),this.Element.append(...ms.cloneNode(!0).childNodes),this.Hide(),document.body.appendChild(this.Element),this.Element.querySelector(".Title").dataset.exp=e.Meta.LangIdentifier;for(const t in e.Groups){const n=document.createElement("div");n.classList.add("SectionContainer"),this.Element.querySelector(".Container").appendChild(n);const i=document.createElement("h2");i.classList.add("SectionTitle"),""!==t&&(i.dataset.exp=t),n.appendChild(i);const r=document.createElement("div");r.classList.add("PropertyContainer"),n.appendChild(r);const a=e.Groups[t];for(const e in a){const t=a[e];let n=this.Element.querySelector(`template.${t.Type}`)?.content.firstElementChild.cloneNode(!0);if(n)cs[t.Type](n,t);else{n=document.createElement("div");let e=document.createElement("span");e.innerHTML="Type not found.",n.appendChild(e)}t.ID&&n.classList.add(`-ID-${t.ID}`),r.append(n);const i=n.querySelector(":scope > span:first-child");i&&(i.dataset.exp=e)}}}Resize(e,t){}Show(){this.Element.style.display="block"}Hide(){this.Element.style.display="none"}}class vs{static async GetMetadata(e){return(await window.fetch(e)).json()}constructor(e,t,n,i=class{constructor(e,t){this.BaseMenu=t,this.Controls=new ss,Application.Main.Game.ControlManager.Controls[e]=this.Controls,this.Controls.Events.AddEventListener("ControlDown",function(e){"Exit"===e.Control&&this.BaseMenu.Exit()}.bind(this))}}){this.Config=e,this.Main=t,this.ControlsName=e.Meta.ControlsName,this.ExitTo=e.Meta.ExitTo,this.LangIdentifier=e.Meta.LangIdentifier,this.Location=e.Meta.Location,this.Interface=new gs(e),this.ControlHandler=new i(this.ControlsName,this),this.Logic=new n(this,t),this.LastVisibilityToggle=0}Show(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("LanguageConfigControls"),this.Interface.Show(),this.Interface.Element.focus())}Exit(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("OptionsControls"),this.Interface.Hide(),this.Main.Logic.OptionsLogic.Interface.Element.focus(),this.Main.Logic.OptionsLogic.Show())}}var xs=r(6842),ys={};ys.styleTagTransform=Jo(),ys.setAttributes=jo(),ys.insert=qo().bind(null,"head"),ys.domAPI=Vo(),ys.insertStyleElement=Zo(),Go()(xs.Z,ys),xs.Z&&xs.Z.locals&&xs.Z.locals;const _s=new DOMParser,Ms=document.importNode(_s.parseFromString('<!DOCTYPE html> <html xmlns="http://www.w3.org/1999/xhtml" lang="en-us"> <head> <meta charset="UTF-8"/> <title>Main</title> </head> <body> <h1 class="Title" data-exp="Paused">Pause menu</h1> <h3 class="SubTitle" data-exp="PausedDesc">Press Escape to return.</h3> <div class="Container"> <div class="Back Button" data-exp="BackToGame">Back to game</div> <div class="Options Button" data-exp="Options">Options</div> <div class="Restart Button" data-exp="Restart">Restart client</div> </div> <div class="QuickAccessContainer"> <span>^</span><span data-exp="QuickAccess">Quick Access</span> <div class="QuickAccessItemsContainer"> </div> </div> <template class="OptionComboBox"> <div> <span>OptionComboBox</span><span><div class="ComboBox"> <span tabindex="-1">Default</span><span>v</span><div onclick="this.parentElement.firstElementChild.innerText=event.target.innerText"> <div>Option 1</div> <div>Option 2</div> <div>Option 3</div> <div>Option 4</div> </div> </div></span> </div> </template> <template class="OptionSlider"> <div><span>OptionSlider</span><span> <form> <input class="Slider" type="range" name="Range" min="0" max="20" value="0" oninput="this.form.Input.value=this.value||0"/> <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value=this.value||0"/> </form> </span></div> </template> <template class="OptionTextInput"> <div><span>OptionTextInput</span><span> <input class="TextInput" type="text"/> </span></div> </template> <template class="OptionSwitch"> <div><span>OptionSwitch</span><span> <label class="Switch"> <input type="checkbox"/> <span class="SwitchSlider"></span> </label> </span></div> </template> <template class="OptionKeyInput"> <div><span>OptionKeyInput</span><span> <input class="KeyInput" type="text" spellcheck="false" onkeydown="event.preventDefault(),this.value=event.code||event.key" oncontextmenu="event.preventDefault()" onmousedown=\'const Active="1"===this.dataset.Active;this===document.activeElement&&(this.dataset.Active="1"),Active&&(this.value="Mouse"+event.buttons)\' onblur=\'this.dataset.Active="0"\'/> </span></div> </template> </body> </html> ',"text/html").body,!0);class Ss{constructor(){this.Element=document.createElement("div"),this.Element.classList.add("Menu"),this.Element.classList.add("Main"),this.Element.append(...Ms.childNodes),this.Hide(),document.body.appendChild(this.Element)}Resize(e,t){}Show(){this.Element.style.marginLeft="0"}Hide(){this.Element.style.marginLeft="-9999px"}}class bs extends Uo{constructor(){super(),this.Configuration=new No({Exit:"Escape"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class ws{constructor(e){this.Logic=e,this.Controls=new bs,Application.Main.Game.ControlManager.Controls.MainMenuControls=this.Controls,this.Controls.Events.AddEventListener("ControlDown",function(e){"Exit"===e.Control&&this.Logic.Exit()}.bind(this));const t=Application.Main.Game.ControlManager.Controls.GameControls;t.Configuration.Set("Pause","Escape"),t.Events.AddEventListener("ControlDown",function(e){"Pause"===e.Control&&this.Logic.Show()}.bind(this))}}class Es{constructor(e){this.Main=e,this.Interface=new Ss,this.ControlHandler=new ws(this),this.LangIdentifier="Main",this.LastVisibilityToggle=0,this.Interface.Element.querySelector(".Back").addEventListener("click",function(){this.Exit()}.bind(this)),this.Interface.Element.querySelector(".Options").addEventListener("click",function(){this.ShowOptions()}.bind(this)),this.Interface.Element.querySelector(".Restart").addEventListener("click",function(){window.location.reload()}.bind(this))}ShowOptions(){Application.Main.Game.ControlManager.FocusControl("OptionsControls"),this.Interface.Hide(),this.Main.Logic.OptionsLogic.Interface.Show()}Show(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("MainMenuControls"),this.Interface.Show(),this.Interface.Element.focus(),document.exitPointerLock())}Exit(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("GameControls"),this.Interface.Hide(),window.focus(),Application.Main.Game.GamePointerLockHandler.PointerLock.Element.focus(),Application.Main.Game.GamePointerLockHandler.PointerLock.Element.requestPointerLock())}}var Ts=r(77),Rs={};Rs.styleTagTransform=Jo(),Rs.setAttributes=jo(),Rs.insert=qo().bind(null,"head"),Rs.domAPI=Vo(),Rs.insertStyleElement=Zo(),Go()(Ts.Z,Rs),Ts.Z&&Ts.Z.locals&&Ts.Z.locals;const Cs=new DOMParser,Ds=document.importNode(Cs.parseFromString('<!DOCTYPE html> <html xmlns="http://www.w3.org/1999/xhtml" lang="en-us"> <head> <meta charset="UTF-8"/> <title>Options</title> </head> <body> <h1 class="Title" data-exp="Options">Options</h1> <h3 class="SubTitle" data-exp="OptionsDesc">You can pin an option for easy access from the main menu.</h3> <div class="Container"> <div class="Button Controls" data-exp="Controls">Controls</div> <div class="Button Graphics" data-exp="Graphics">Graphics</div> <div class="Button World" data-exp="World">World</div> <div class="Button Player" data-exp="Player">Player</div> <div class="Button Language" data-exp="Language">Language</div> <div class="Button Settings" data-exp="Settings">Settings</div> <div class="Button Config" data-exp="Config">Config</div> <div class="Button Debug" data-exp="Debug">Debug Settings</div> </div> <div class="Button Exit" data-exp="Exit">Exit</div> </body> </html> ',"text/html").body,!0);class As{constructor(){this.Element=document.createElement("div"),this.Element.classList.add("Menu"),this.Element.classList.add("Options"),this.Element.append(...Ds.childNodes),this.Hide(),document.body.appendChild(this.Element)}Resize(e,t){}Show(){this.Element.style.display="block"}Hide(){this.Element.style.display="none"}}class Is extends Uo{constructor(){super(),this.Configuration=new No({Exit:"Escape"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class Ps{constructor(e){this.Logic=e,this.Controls=new Is,Application.Main.Game.ControlManager.Controls.OptionsControls=this.Controls,this.Controls.Events.AddEventListener("ControlDown",function(e){"Exit"===e.Control&&this.Logic.Exit()}.bind(this))}}class Ls{constructor(e){this.Main=e,this.Interface=new As,this.ControlHandler=new Ps(this),this.LangIdentifier="Options",this.LastVisibilityToggle=0,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.Exit()}.bind(this)),this.Interface.Element.querySelector(".Graphics").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("GraphicsControls"),this.Interface.Hide(),this.Main.Logic.GraphicsLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Controls").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("ControlConfigControls"),this.Interface.Hide(),this.Main.Logic.ControlLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".World").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("WorldConfigControls"),this.Interface.Hide(),this.Main.Logic.WorldLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Player").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("PlayerConfigControls"),this.Interface.Hide(),this.Main.Logic.PlayerLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Language").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("LanguageConfigControls"),this.Interface.Hide(),this.Main.Logic.LanguageLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Settings").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("SettingsConfigControls"),this.Interface.Hide(),this.Main.Logic.SettingsLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Config").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("ConfigConfigControls"),this.Interface.Hide(),this.Main.Logic.ConfigLogic.Interface.Show()}.bind(this)),this.Interface.Element.querySelector(".Debug").addEventListener("click",function(){this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("DebugConfigControls"),this.Interface.Hide(),this.Main.Logic.DebugLogic.Interface.Show()}.bind(this))}Show(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("OptionsControls"),this.Interface.Show(),this.Interface.Element.focus())}Exit(){window.performance.now()-5<this.LastVisibilityToggle||(console.warn(this.LastVisibilityToggle+", "+window.performance.now()),this.LastVisibilityToggle=window.performance.now(),Application.Main.Game.ControlManager.FocusControl("MainMenuControls"),this.Interface.Hide(),this.Main.Logic.MainLogic.Interface.Element.focus(),this.Main.Logic.MainLogic.Show())}}class Fs{static Options(e){return e.querySelector(".ComboBox > span:first-child").innerHTML}static Range(e){return e.querySelector(":scope > span + span > form > input + input").value}static Text(e){return e.querySelector(":scope > span + span > input").value}static Switch(e){return e.querySelector(":scope > span + span > label > input").checked}static Key(e){return Fs.Text(e)}}class Os{static Options(e,t){e.querySelector(".ComboBox").addEventListener("click",t)}static Range(e,t){e.querySelector(":scope > span + span > form > input + input").addEventListener("focusout",t),e.querySelector(":scope > span + span > form > input + input").addEventListener("keydown",(function(e){"Enter"===e.code&&t()})),e.querySelector(":scope > span + span > form > input:first-child").addEventListener("input",t)}static Text(e,t){e.querySelector(":scope > span + span > input").addEventListener("focusout",t),e.querySelector(":scope > span + span > input").addEventListener("keydown",(function(e){"Enter"===e.code&&t()}))}static Switch(e,t){e.querySelector(":scope > span + span > label > input").addEventListener("input",t)}static Key(e,t){e.querySelector(":scope > span + span > input").addEventListener("focusout",t)}}class Ns{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this));const n=document.createElement("div");n.classList.add("ButtonInner"),n.style.margin="auto",n.dataset.exp="ToggleBackground",n.style.width="fit-content",n.style.maxWidth="90vw",n.style.textOverflow="ellipsis",n.style.paddingInline="30px",this.Interface.Element.querySelector(".Title").after(n),this.Interface.Element.querySelector(".Container").style.marginTop="5vh",this.Interface.Element.querySelector(".Container").style.maxHeight="calc(max(72vh - 160px, 150px))",this.Interface.Element.querySelector(".Title").style.marginBottom="2vh";{let e=!0;n.addEventListener("click",function(){e=!e,e?(this.Interface.Element.style.backgroundColor="#000f0f5f",this.Interface.Element.style.backdropFilter="blur(3px)"):(this.Interface.Element.style.backgroundColor="transparent",this.Interface.Element.style.backdropFilter="none")}.bind(this));let t=!1;this.Interface.Element.addEventListener("click",function(e){e.target===this.Interface.Element&&(t=!0,Application.Main.Game.GamePointerLockHandler.PointerLock.Element.requestPointerLock())}.bind(this)),document.addEventListener("keydown",(function(e){"AltLeft"===e.code&&t&&(t=!1,document.exitPointerLock())}))}Os.Range(this.Interface.Element.querySelector(".-ID-FOV"),function(){Application.Main.Renderer.DefaultFOV=Fs.Range(this.Interface.Element.querySelector(".-ID-FOV")),Application.Main.Renderer.Camera.fov=Application.Main.Renderer.DefaultFOV,Application.Main.Renderer.Camera.updateProjectionMatrix()}.bind(this)),Os.Switch(this.Interface.Element.querySelector(".-ID-AO"),function(){Application.Main.Raymarcher.FinalPassMaterial.uniforms.iRenderAmbientOcclusion.value=Fs.Switch(this.Interface.Element.querySelector(".-ID-AO"))}.bind(this)),Os.Switch(this.Interface.Element.querySelector(".-ID-UseUpscaling"),function(){const e=Fs.Switch(this.Interface.Element.querySelector(".-ID-UseUpscaling"));Application.Main.Renderer.UseScaledTarget=e}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-UpscalingKernelSize"),function(){Application.Main.Raymarcher.SetKernelSize(Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(".-ID-UpscalingKernelSize"))))}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-RenderSize"),function(){Application.Main.Renderer.ImageScale=Fs.Range(this.Interface.Element.querySelector(".-ID-RenderSize")),Application.Main.Renderer.UpdateSize()}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-CloudSize"),function(){Application.Main.Renderer.CloudsScale=Fs.Range(this.Interface.Element.querySelector(".-ID-CloudSize")),Application.Main.Renderer.UpdateSize()}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-CloudCoverage"),function(){Application.Main.Renderer.BackgroundMaterial.uniforms.iCloudCoverage.value=Fs.Range(this.Interface.Element.querySelector(".-ID-CloudCoverage")),Application.Main.Renderer.UpdateSize()}.bind(this)),Os.Switch(this.Interface.Element.querySelector(".-ID-UseShadows"),function(){Application.Main.Raymarcher.FinalPassMaterial.uniforms.iRenderShadows.value=Fs.Switch(this.Interface.Element.querySelector(".-ID-UseShadows"))}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-ShadowSteps"),function(){}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-ShadowExponent"),function(){Application.Main.Raymarcher.Uniforms.iShadowExponent.value=Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(".-ID-ShadowExponent")))}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-ShadowMultiplier"),function(){Application.Main.Raymarcher.Uniforms.iShadowMultiplier.value=Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(".-ID-ShadowMultiplier")))}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-ShadowDarkness"),function(){Application.Main.Raymarcher.Uniforms.iShadowDarkness.value=Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(".-ID-ShadowDarkness")))}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-FogFactor"),function(){Application.Main.Raymarcher.Uniforms.iFogFactor.value=Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(".-ID-FogFactor")))}.bind(this))}}const Us=JSON.parse('{"Meta":{"ControlsName":"GraphicsControls","ExitTo":"OptionsControls","LangIdentifier":"Graphics","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"General":{"FOV":{"Type":"Range","ID":"FOV","Weighting":"Linear","Min":55,"Max":120,"Default":110,"Step":1},"AO":{"Type":"Switch","ID":"AO","Default":true},"UseUpscaling":{"Type":"Switch","ID":"UseUpscaling","Default":false},"UpscalingKernelSize":{"Type":"Range","ID":"UpscalingKernelSize","Weighting":"Linear","Min":1,"Max":8,"Default":2,"Step":1},"RenderSize":{"Type":"Range","ID":"RenderSize","Weighting":"Linear","Min":0.5,"Max":2,"Default":1,"Step":0.1},"CloudSize":{"Type":"Range","ID":"CloudSize","Weighting":"Linear","Min":0.25,"Max":1,"Default":0.5,"Step":0.05},"CloudCoverage":{"Type":"Range","ID":"CloudCoverage","Weighting":"Linear","Min":0,"Max":1,"Default":0.75,"Step":0.01}},"Shadows":{"UseShadows":{"Type":"Switch","ID":"UseShadows","Default":true},"ShadowSteps":{"Type":"Range","ID":"ShadowSteps","Weighting":"Linear","Min":10,"Max":200,"Default":150,"Step":1},"ShadowExponent":{"Type":"Range","ID":"ShadowExponent","Weighting":"Linear","Min":0.25,"Max":3,"Default":0.85,"Step":0.01},"ShadowMultiplier":{"Type":"Range","ID":"ShadowMultiplier","Weighting":"Linear","Min":0.5,"Max":5,"Default":2.5,"Step":0.1},"ShadowDarkness":{"Type":"Range","ID":"ShadowDarkness","Weighting":"Linear","Min":0.1,"Max":0.9,"Default":0.5,"Step":0.01}},"PostProcessing":{"FogFactor":{"Type":"Range","ID":"FogFactor","Weighting":"Exponential","Min":0,"Max":0.0001,"Default":0.00002,"Step":0.000001}}}}');class ks{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-Sensitivity"),function(){Application.Main.Game.GamePointerLockHandler.Settings.MouseSensitivity=+Fs.Range(this.Interface.Element.querySelector(".-ID-Sensitivity"))}.bind(this)),Os.Switch(this.Interface.Element.querySelector(".-ID-InvertY"),function(){Application.Main.Game.GamePointerLockHandler.Settings.InvertY=Fs.Switch(this.Interface.Element.querySelector(".-ID-InvertY"))}.bind(this));for(const e of["Forwards","Backwards","Leftwards","Rightwards","Downwards","Upwards","BreakBlock","PlaceBlock","PickBlock","Chat"]){const t=this.Interface.Element.querySelector(`.-ID-${e}`);Os.Key(t,(function(){Application.Main.Game.ControlManager.Controls.GameControls.Configuration.Set(e,Fs.Key(t))}))}}}const Bs=JSON.parse('{"Meta":{"ControlsName":"ControlConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Controls","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"MouseSettings":{"Sensitivity":{"Type":"Range","ID":"Sensitivity","Weighting":"Linear","Min":0,"Max":0.01,"Default":0.002,"Step":0.0001},"InvertY":{"Type":"Switch","ID":"InvertY","Default":true}},"KeyboardSettings":{"Forwards":{"Type":"Key","ID":"Forwards","Default":"KeyW"},"Backwards":{"Type":"Key","ID":"Backwards","Default":"KeyS"},"Leftwards":{"Type":"Key","ID":"Leftwards","Default":"KeyA"},"Rightwards":{"Type":"Key","ID":"Rightwards","Default":"KeyD"},"Downwards":{"Type":"Key","ID":"Downwards","Default":"ShiftLeft"},"Upwards":{"Type":"Key","ID":"Upwards","Default":"Space"},"BreakBlock":{"Type":"Key","ID":"BreakBlock","Default":"Mouse1"},"PlaceBlock":{"Type":"Key","ID":"PlaceBlock","Default":"Mouse2"},"PickBlock":{"Type":"Key","ID":"PickBlock","Default":"Mouse4"},"Chat":{"Type":"Key","ID":"Chat","Default":"KeyT"}}}}');class zs{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this)),this.Interface.Element.querySelector(".-ID-Reset").querySelector(":scope > div").addEventListener("click",function(){Application.Main.Game.World.SetSeed(Number.parseInt(Fs.Text(this.Interface.Element.querySelector(".-ID-Seed")))),Application.Main.Game.World.ReloadWorld();const e=Application.Main.Renderer.Camera.position;e.y=Application.Main.Game.World.GetHeight(e.x,e.z)+15}.bind(this)),Os.Range(this.Interface.Element.querySelector(".-ID-MaxUpdatingSegments"),function(){Application.Main.Raymarcher.MaxUpdatingSegments=Number.parseInt(Fs.Range(this.Interface.Element.querySelector(".-ID-MaxUpdatingSegments")))}.bind(this))}}const Gs=JSON.parse('{"Meta":{"ControlsName":"WorldConfigControls","ExitTo":"OptionsControls","LangIdentifier":"World","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"":{"Seed":{"Type":"Text","ID":"Seed","DataType":"number","Default":17},"Reset":{"Type":"CenteredButton","ID":"Reset","TextExp":"Reset"}},"Performance":{"MaxUpdatingSegments":{"Type":"Range","ID":"MaxUpdatingSegments","Weighting":"Linear","Min":1,"Max":10,"Default":3,"Step":1}}}}');class Hs{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this));for(const e of["Speed","JumpSpeed","Gravity","AirDrag","SurfaceDrag"])Os.Range(this.Interface.Element.querySelector(`.-ID-${e}`),function(){let t=Number.parseFloat(Fs.Range(this.Interface.Element.querySelector(`.-ID-${e}`)));Number.isNaN(t)&&(t=0),Application.Main.Game.GameControlHandler.CustomMovementSettings[e]=t}.bind(this))}}const Vs=JSON.parse('{"Meta":{"ControlsName":"PlayerConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Player","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"":{"Speed":{"Type":"Range","ID":"Speed","Min":0,"Max":50,"Step":0.5,"Default":1},"JumpSpeed":{"Type":"Range","ID":"JumpSpeed","Min":0,"Max":3,"Step":0.01,"Default":0.12},"Gravity":{"Type":"Range","ID":"Gravity","Min":-4,"Max":0,"Step":0.025,"Default":-0.98107},"AirDrag":{"Type":"Range","ID":"AirDrag","Min":0,"Max":10000,"Step":1,"Default":2500},"SurfaceDrag":{"Type":"Range","ID":"SurfaceDrag","Min":0,"Max":200,"Step":1,"Default":60}}}}');class Ws{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this));let n=0;Os.Options(this.Interface.Element.querySelector(".-ID-Language"),function(){if(!(window.performance.now()-25<n))switch(n=window.performance.now(),Fs.Options(this.Interface.Element.querySelector(".-ID-Language"))){case"Language:English":this.Main.SetLang("en-uk");break;case"Language:Deutsch":this.Main.SetLang("de-de");break;case"Language:Српски":this.Main.SetLang("sr-rs")}}.bind(this))}}const qs=JSON.parse('{"Meta":{"ControlsName":"LanguageConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Language","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"":{"Language":{"Type":"Options","ID":"Language","Items":["English","Deutsch","Српски"],"Default":0}}}}');class Xs{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this)),this.Interface.Element.querySelector(".-ID-ApplyViewSettings").querySelector(":scope > div").addEventListener("click",function(){Application.Main.WorkerLoadingPipeline.postMessage({Request:"UpdateSettings",LoadDistance:Number.parseInt(Fs.Range(this.Interface.Element.querySelector(".-ID-LoadDistance"))),VirtualRegionDepths:Number.parseInt(Fs.Range(this.Interface.Element.querySelector(".-ID-VirtualRegionDepths")))})}.bind(this))}}const js=JSON.parse('{"Meta":{"ControlsName":"SettingsConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Settings","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"ViewDistance":{"LoadDistance":{"Type":"Range","ID":"LoadDistance","Min":0,"Max":8,"Default":4,"Step":1},"VirtualRegionDepths":{"Type":"Range","ID":"VirtualRegionDepths","Min":0,"Max":12,"Default":7,"Step":1},"ApplyViewSettings":{"Type":"CenteredButton","ID":"ApplyViewSettings","TextExp":"ApplyViewSettings"}}}}');class Ys{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this))}}const Zs=JSON.parse('{"Meta":{"ControlsName":"ConfigConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Config","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"ConfigInfo":{}}}');var Ks=[],Js=[],Qs=[],$s=[],el=[],tl=[],nl=[],il=[],rl=[],al=[],ol=[],sl=[];class ll{static MOVEMENT_PRESET_NORMAL=0;static MOVEMENT_PRESET_FAST=1;static MOVEMENT_PRESET_SUPERFAST=2;static MOVEMENT_PRESET_CUSTOM=3;static MOVEMENT_PRESET_FLYING=4;constructor(e,t,n,i){this.GameControls=e,this.Camera=t,this.World=n,this.BlockRegistry=i,this.Camera.position.x=0,this.Camera.position.y=this.World.GetHeight(0,0)+5,this.Camera.position.z=0,this.DesiredVelocity=[0,0,0],this.CurrentVelocity=[0,0,0],this.HorizontalSpeed=.1,this.ControlledMovement=[0,0,0],this.LastAnimationFrame=window.performance.now(),this.FrameTime=16,this.MovementPreset=ll.MOVEMENT_PRESET_FLYING,this.CustomMovementSettings={Speed:1,JumpSpeed:.12,Gravity:-.98107,AirDrag:2500,SurfaceDrag:60},function e(){Application.Main.Renderer.RequestAnimationFrame(e.bind(this)),this.FrameTime=window.performance.now()-this.LastAnimationFrame,this.LastAnimationFrame=window.performance.now(),this.AnimationFrame()}.bind(this)(),this.GameControls.Events.AddEventListener("ControlDown",(function(e){"ExitPointerLock"===e.Control&&document.exitPointerLock()}))}AnimationFrame(){if(window.performance.now()<1e3)return;this.ControlledMovement[0]=+this.GameControls.IsControlPressed("Forwards")-this.GameControls.IsControlPressed("Backwards"),this.ControlledMovement[1]=+this.GameControls.IsControlPressed("Upwards"),this.ControlledMovement[2]=+this.GameControls.IsControlPressed("Leftwards")-this.GameControls.IsControlPressed("Rightwards"),this.ControlledMovement[0]&&this.ControlledMovement[2]&&(this.ControlledMovement[0]*=Math.SQRT1_2,this.ControlledMovement[2]*=Math.SQRT1_2);const e=this.Camera;Math.sin(e.rotation.x);let t=Math.sin(e.rotation.y),n=(Math.cos(e.rotation.x),Math.cos(e.rotation.y)),i=this.GameControls.IsControlPressed("Sprint")?1.4:1;switch(this.MovementPreset){case ll.MOVEMENT_PRESET_NORMAL:this.DesiredVelocity[0]=1*(-t*this.ControlledMovement[0]*this.HorizontalSpeed*i-n*this.ControlledMovement[2]*this.HorizontalSpeed),this.DesiredVelocity[1]=-.98107,this.DesiredVelocity[2]=1*(-n*this.ControlledMovement[0]*this.HorizontalSpeed*i+t*this.ControlledMovement[2]*this.HorizontalSpeed),0===this.CurrentVelocity[1]&&this.ControlledMovement[1]>0&&(this.CurrentVelocity[1]=.12);break;case ll.MOVEMENT_PRESET_FAST:this.DesiredVelocity[0]=3*(-t*this.ControlledMovement[0]*this.HorizontalSpeed*i-n*this.ControlledMovement[2]*this.HorizontalSpeed),this.DesiredVelocity[1]=-.98107,this.DesiredVelocity[2]=3*(-n*this.ControlledMovement[0]*this.HorizontalSpeed*i+t*this.ControlledMovement[2]*this.HorizontalSpeed),0===this.CurrentVelocity[1]&&this.ControlledMovement[1]>0&&(this.CurrentVelocity[1]=.36);break;case ll.MOVEMENT_PRESET_SUPERFAST:this.DesiredVelocity[0]=10*(-t*this.ControlledMovement[0]*this.HorizontalSpeed*i-n*this.ControlledMovement[2]*this.HorizontalSpeed),this.DesiredVelocity[1]=-.98107,this.DesiredVelocity[2]=10*(-n*this.ControlledMovement[0]*this.HorizontalSpeed*i+t*this.ControlledMovement[2]*this.HorizontalSpeed),0===this.CurrentVelocity[1]&&this.ControlledMovement[1]>0&&(this.CurrentVelocity[1]=1.12);break;case ll.MOVEMENT_PRESET_CUSTOM:this.DesiredVelocity[0]=this.CustomMovementSettings.Speed*(-t*this.ControlledMovement[0]*this.HorizontalSpeed*i-n*this.ControlledMovement[2]*this.HorizontalSpeed),this.DesiredVelocity[1]=this.CustomMovementSettings.Gravity,this.DesiredVelocity[2]=this.CustomMovementSettings.Speed*(-n*this.ControlledMovement[0]*this.HorizontalSpeed*i+t*this.ControlledMovement[2]*this.HorizontalSpeed),0===this.CurrentVelocity[1]&&this.ControlledMovement[1]>0&&(this.CurrentVelocity[1]=this.CustomMovementSettings.JumpSpeed);break;case ll.MOVEMENT_PRESET_FLYING:this.ControlledMovement[1]-=+this.GameControls.IsControlPressed("Downwards"),this.DesiredVelocity[0]=this.CustomMovementSettings.Speed*(-t*this.ControlledMovement[0]*this.HorizontalSpeed*i-n*this.ControlledMovement[2]*this.HorizontalSpeed),this.DesiredVelocity[1]=this.CustomMovementSettings.Speed*this.ControlledMovement[1]/10,this.DesiredVelocity[2]=this.CustomMovementSettings.Speed*(-n*this.ControlledMovement[0]*this.HorizontalSpeed*i+t*this.ControlledMovement[2]*this.HorizontalSpeed)}this.CurrentVelocity.forEach(function(e,t){let n=(1===t&&this.MovementPreset!==ll.MOVEMENT_PRESET_FLYING?this.CustomMovementSettings.AirDrag:this.CustomMovementSettings.SurfaceDrag)/this.FrameTime;this.CurrentVelocity[t]=(n*e+this.DesiredVelocity[t])/(n+1)}.bind(this));let r={base:[e.position.x-.3,e.position.y-1.6,e.position.z-.3],max:[e.position.x+.3,e.position.y+.3,e.position.z+.3],translate:function(e){for(let t=0;t<3;t++)this.base[t]+=e[t],this.max[t]+=e[t];return this}};const a=function(e,t,n,i,r){return this.CurrentVelocity[t]=0,i[t]=0,0===Math.abs(i.reduce((function(e,t){return e+t})))}.bind(this);let o=this.CurrentVelocity.map(function(e){return e*this.FrameTime/14}.bind(this));!function(e,t,n,i,r,a){for(var o=nl,s=rl,l=al,c=sl,h=0;h<3;h++)o[h]=+n[h],l[h]=+t.max[h],s[h]=+t.base[h];a||(a=1e-10);var d=function(e,t,n,i,r,a){var o=Ks,s=Js,l=Qs,c=$s,h=el,d=tl,u=il,p=Math.floor,f=0,m=0,g=0,v=0,x=0,y=0;if(_(),0===g)return 0;for(v=b();m<=g;){if(M(v)&&S())return f;v=b()}for(f+=g,x=0;x<3;x++)i[x]+=n[x],r[x]+=n[x];return f;function _(){if(y++,m=0,0!==(g=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2])))for(var e=0;e<3;e++){var t=n[e]>=0;c[e]=t?1:-1;var a=t?r[e]:i[e];o[e]=t?i[e]:r[e],s[e]=w(a,c[e]),l[e]=E(o[e],c[e]),u[e]=n[e]/g,h[e]=Math.abs(1/u[e]);var p=t?s[e]+1-a:a-s[e];d[e]=h[e]<1/0?h[e]*p:1/0}}function M(t){for(var n=c[0],i=0===t?s[0]:l[0],r=s[0]+n,a=c[1],o=1===t?s[1]:l[1],h=s[1]+a,d=c[2],u=2===t?s[2]:l[2],p=s[2]+d,f=i;f!=r;f+=n)for(var m=o;m!=h;m+=a)for(var g=u;g!=p;g+=d)if(e(f,m,g))return!0;return!1}function S(){f+=m;var e=c[v],a=m/g,o=ol;for(x=0;x<3;x++){var s=n[x]*a;i[x]+=s,r[x]+=s,o[x]=n[x]-s}if(e>0?r[v]=Math.round(r[v]):i[v]=Math.round(i[v]),t(f,v,e,o,y))return!0;for(x=0;x<3;x++)n[x]=o[x];return _(),0===g}function b(){var e=d[0]<d[1]?d[0]<d[2]?0:2:d[1]<d[2]?1:2,t=d[e]-m;for(m=d[e],s[e]+=c[e],d[e]+=h[e],x=0;x<3;x++)o[x]+=t*u[x],l[x]=E(o[x],c[x]);return e}function w(e,t){return p(e-t*a)}function E(e,t){return p(e+t*a)}}(e,i,o,s,l,a);if(!r){for(h=0;h<3;h++)c[h]=n[h]>0?l[h]-t.max[h]:s[h]-t.base[h];t.translate(c)}}(function(e){return function(e,t,n){return this.IsColliding(e,t,n)}.bind(this)}.bind(this)(this),r,o,a,!1,Math.min(Math.max(Math.abs(e.position.x),Math.abs(e.position.y),Math.abs(e.position.z))/1e12,.01)),e.position.x=r.max[0]-.3,e.position.y=r.max[1]-.3,e.position.z=r.max[2]-.3}IsColliding(e,t,n){return!!this.BlockRegistry.GetBlockByID(this.World.GetBlock(e,t,n)).Properties.Solid}}class cl{constructor(e,t){this.BaseMenu=e,this.Main=t,this.Interface=e.Interface,this.Interface.Element.querySelector(".Exit").addEventListener("click",function(){this.BaseMenu.Exit()}.bind(this)),Os.Switch(this.Interface.Element.querySelector(".-ID-FlyMode"),function(){Fs.Switch(this.Interface.Element.querySelector(".-ID-FlyMode"))?Application.Main.Game.GameControlHandler.MovementPreset=ll.MOVEMENT_PRESET_FLYING:Application.Main.Game.GameControlHandler.MovementPreset=ll.MOVEMENT_PRESET_CUSTOM}.bind(this))}}const hl=JSON.parse('{"Meta":{"ControlsName":"DebugConfigControls","ExitTo":"OptionsControls","LangIdentifier":"Debug","Location":"./Mods/Menu/DefaultMenus/BaseMenu/index.xhtml"},"Groups":{"TeleportTitle":{"FlyMode":{"Type":"Switch","ID":"FlyMode","Default":true}}}}'),dl=(e=>{let t=e.keys(),n=t.map(e);return t.reduce(((e,t,i)=>(e[t]=n[i],e)),{})})(r(8673));console.log(dl);const ul={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class pl{static Identifier="Menu";static Version="0.0.2";static Build=2;static MLE=void 0;static Renderer=void 0;static Register(e){pl.MLE=e}static PreInit(){pl.Logic={MainLogic:new Es(pl),OptionsLogic:new Ls(pl),GraphicsLogic:new vs(Us,pl,Ns),ControlLogic:new vs(Bs,pl,ks),WorldLogic:new vs(Gs,pl,zs),PlayerLogic:new vs(Vs,pl,Hs),LanguageLogic:new vs(qs,pl,Ws),SettingsLogic:new vs(js,pl,Xs),ConfigLogic:new vs(Zs,pl,Ys),DebugLogic:new vs(hl,pl,cl)},pl.SetLang("en-uk"),pl.MLE.PreInit.Done(pl.Identifier)}static Init(){pl.MLE.Init.Done(pl.Identifier)}static PostInit(){pl.MLE.PostInit.Done(pl.Identifier)}static async SetLang(e){const t=(await r(1444)(`./${e}.json`)).default;for(const e in pl.Logic){const n=pl.Logic[e],i=t[n.LangIdentifier]||{},r=n.Interface.Element.querySelectorAll("[data-exp]");for(const e of r){let t=i[e.dataset.exp]??n.LangIdentifier+":"+e.dataset.exp,r=t.match(/(?<!(?<!\\)\\)\[\%([^\]]*)\]/);for(;r;)t=t.replace(r[0],"Escape"),r=t.match(/(?<!(?<!\\)\\)\[\%([^\]]*)\]/);t=t.replaceAll("\\[%","[%"),t=t.replaceAll("\\\\","\\"),e.innerHTML=t}}}}class fl{constructor(e,t=ml.INTERPOLATION_NEAREST_NEIGHBOUR,n=null){this.Scales=e,this.InterpolationMethod=t,this.BlockRegistry=n}GetScale(e,t=null){if(this.Scales[e])return this.Scales[e];const n=t||this.BlockRegistry;if(!n)throw new Error("Scale Containers need access to a block registry to calculate smaller scales.");const i=this.Scales[1],r=i.Data,a=this.Scales[1].XLength,o=this.Scales[1].YLength,s=this.Scales[1].ZLength,l=Math.ceil(a/e),c=Math.ceil(o/e),h=Math.ceil(s/e),d=new Uint16Array(l*c*h);for(let t=0,i=0;t<l;t++)for(let l=0;l<c;l++)for(let c=0;c<h;c++,i++){const h=Math.floor(t*e),u=Math.floor(l*e),p=Math.floor(c*e);let f=0,m=-1/0;for(let t=h;t<e+h&&t<a;t++)for(let i=u;i<e+u&&i<o;i++)for(let a=p;a<e+p&&a<s;a++){const e=r[t*o*s+i*s+a],l=n.GetBlockByID(e).Properties.Precedence||0;(m<l||6===e)&&(m=l,f=e)}d[i]=f}return this.Scales[e]={XOffset:Math.floor(i.XOffset/e),YOffset:Math.floor(i.YOffset/e),ZOffset:Math.floor(i.ZOffset/e),XLength:l,YLength:c,ZLength:h,Data:d},this.Scales[e]}GetScale_NearestNeighbour(e){if(this.Scales[e])return this.Scales[e];const t=this.Scales[1],n=t.Data,i=this.Scales[1].XLength,r=this.Scales[1].YLength,a=this.Scales[1].ZLength,o=Math.ceil(i/e),s=Math.ceil(r/e),l=Math.ceil(a/e),c=new Uint16Array(o*s*l);for(let t=0,i=0;t<o;t++)for(let o=0;o<s;o++)for(let s=0;s<l;s++,i++){const l=Math.floor(t*e),h=Math.floor(o*e),d=Math.floor(s*e);c[i]=n[l*r*a+h*a+d]}return this.Scales[e]={XOffset:Math.floor(t.XOffset/e),YOffset:Math.floor(t.YOffset/e),ZOffset:Math.floor(t.ZOffset/e),XLength:o,YLength:s,ZLength:l,Data:c},this.Scales[e]}GetVerticalScale(e){if(this.Scales["Y"+e])return this.Scales["Y"+e];const t=this.Scales[1],n=t.Data,i=this.Scales[1].XLength,r=this.Scales[1].YLength,a=this.Scales[1].ZLength,o=Math.ceil(r/e),s=new Uint16Array(i*o*a);for(let t=0,l=0;t<i;t++)for(let i=0;i<o;i++)for(let o=0;o<a;o++,l++){const c=t,h=Math.floor(i*e),d=o;let u=0;for(let t=h;t<r&&t<h+e;t++)u||=n[c*r*a+t*a+d];s[l]=u}return this.Scales["Y"+e]={XOffset:t.XOffset,YOffset:Math.floor(t.YOffset/e),ZOffset:t.ZOffset,XLength:i,YLength:o,ZLength:a,Data:s},this.Scales["Y"+e]}_GetVerticalScale(e){if(this.Scales["Y"+e])return this.Scales["Y"+e];const t=this.Scales[1],n=t.Data,i=this.Scales[1].XLength,r=this.Scales[1].YLength,a=this.Scales[1].ZLength,o=Math.ceil(r/e),s=new Uint16Array(i*o*a);for(let t=0,l=0;t<i;t++)for(let i=0;i<o;i++)for(let o=0;o<a;o++,l++){const c=t,h=Math.floor(i*e),d=o;s[l]=n[c*r*a+h*a+d]}return this.Scales["Y"+e]={XOffset:t.XOffset,YOffset:Math.floor(t.YOffset/e),ZOffset:t.ZOffset,XLength:i,YLength:o,ZLength:a,Data:s},this.Scales["Y"+e]}}class ml{static INTERPOLATION_NEAREST_NEIGHBOUR=1;static INTERPOLATION_HIGHEST_FREQUENCY=2;static INTERPOLATION_COMMON_BLOCKS=3;constructor(e,t=null,n={}){this.Scales=e,this.Metadata=t,this.Info=n}DirectPaste(e,t,n,i,r,a,o=!1){const s=this.Scales.GetScale(i,r),l=e+s.XOffset,c=t+s.YOffset,h=n+s.ZOffset,d=s.Data;for(let e=l,t=s.XLength+l,n=0;e<t;e++)for(let t=c,i=s.YLength+c;t<i;t++)for(let i=h,r=s.ZLength+h;i<r;i++,n++)o&&0===d[n]||a(e,t,i,d[n])}static FromObject(e){const t={};return Object.assign(t,e),Object.setPrototypeOf(t,ml.prototype),Object.setPrototypeOf(t.Scales,fl.prototype),t}}function gl(e,t,n){return function(i,r){r&=(1<<n)-1;const a=t+Math.floor(i*n/8),o=i*n&7;let s=e.getUint32(a,!0);s&=~((1<<n)-1<<o),s|=r<<o,e.setUint32(a,s,!0)}}function vl(e,t,n){return function(i){const r=t+Math.floor(i*n/8),a=i*n&7;return e.getUint32(r,!0)>>a&(1<<n)-1}}class xl{static VERSION=1;static DefaultSVMOptions={BitsPerOID:16,BitsPerCID:-1,ScaleInterpolationMethod:ml.INTERPOLATION_NEAREST_NEIGHBOUR};static CreateSVM(e,t){const n=(e=ls.MergeObjects(e,xl.DefaultSVMOptions)).BitsPerOID,i=Math.ceil(n/8);let r=0;const a=new Map;let o=0;for(const e of t){const t=e.Data;for(let e=0,n=t.length;e<n;e++)a.has(t[e])||a.set(t[e],o++)}const s=Math.ceil(Math.log2(o+1));r+=11+2*i*o+4+8*t.length+4+(e.Metadata?.byteLength??0)+1+6*t.length*4+4;for(const e of t)r+=Math.ceil(e.Data.length*s/8);const l=new ArrayBuffer(r),c=new DataView(l);let h=0;for(const e of"svm")c.setUint8(h++,e.charCodeAt(0));c.setUint16(h,xl.VERSION),h+=2,c.setUint8(h++,n),c.setUint8(h++,s),c.setUint32(h,2*i*o),h+=4;{let e,t;1===i?(e=c.setUint8.bind(c),t=1):2===i?(e=c.setUint16.bind(c),t=2):(e=c.setUint32.bind(c),t=4);for(const[n,i]of a)e(h,n),h+=t,e(h,i),h+=t}c.setUint8(h++,e.ScaleInterpolationMethod),c.setUint32(h,8*t.length),h+=4;const d={};for(const e of t)c.setFloat32(h,e.Scale),h+=4,d[e.Scale]=h,h+=4;if(c.setUint32(h,e.Metadata?.byteLength??0),h+=4,e.Metadata){const t=new Uint8Array(e.Metadata);for(let e=0,n=t.length;e<n;e++)c.setUint8(h++,t[e])}for(const e of t){c.setUint32(d[e.Scale],h),c.setUint32(h,e.XLength),h+=4,c.setUint32(h,e.YLength),h+=4,c.setUint32(h,e.ZLength),h+=4,c.setUint32(h,e.XOffset),h+=4,c.setUint32(h,e.YOffset),h+=4,c.setUint32(h,e.ZOffset),h+=4;const t=gl(c,h,s),n=e.Data;for(let e=0,i=n.length;e<i;e++)t(e,a.get(n[e]));h+=Math.ceil(n.length*s/8)}return l}static DeserialiseSVM(e){let t=new DataView(e),n=0,i=!0;"s"===String.fromCharCode(t.getUint8(0))&&"v"===String.fromCharCode(t.getUint8(1))&&"m"===String.fromCharCode(t.getUint8(2))||(console.warn("Invalid header. This probably isn't an svm."),i=!1),n+=3;const r=t.getUint16(n);n+=2;const a=t.getUint8(n++),o=Math.ceil(a/8),s=t.getUint8(n++),l=(Math.ceil(s/8),new Map);{const e=t.getUint32(n);let i,r;n+=4,1===o?(i=t.getUint8.bind(t),r=1):2===o?(i=t.getUint16.bind(t),r=2):(i=t.getUint32.bind(t),r=4);const a=n+e;for(;n<a;)l.set(i(n+r),i(n)),n+=2*r}const c=t.getUint8(n++),h=new Map;{const e=t.getUint32(n);n+=4;const i=e+n;for(;n<i;)h.set(t.getFloat32(n),t.getUint32(n+4)),n+=8}const d=t.getUint32(n);n+=4;const u=new ArrayBuffer(d);{const e=new Uint8Array(u);for(let i=0,r=e.length;i<r;i++)e[i]=t.getUint8(n++)}const p={};for(const[e,n]of h){p[e]={};const i=p[e];i.Scale=e,i.XLength=t.getUint32(n+0),i.YLength=t.getUint32(n+4),i.ZLength=t.getUint32(n+8),i.XOffset=t.getUint32(n+12),i.YOffset=t.getUint32(n+16),i.ZOffset=t.getUint32(n+20);const r=vl(t,n+24,s);let a;const c=i.XLength*i.YLength*i.ZLength;a=1===o?new Uint8Array(c):2===o?new Uint16Array(c):new Uint32Array(c);for(let e=0,t=a.length;e<t;e++)a[e]=l.get(r(e));i.Data=a}return new e(new fl(p,c),u,{Version:r,ValidHeader:i})}static DeserialiseBOP(e,t,n){t||(t={"biomesoplenty:leaves_4:2":Application.Main.BlockRegistry.GetBlockByIdentifier("default:leaves").ID,"biomesoplenty:log_2":Application.Main.BlockRegistry.GetBlockByIdentifier("default:wood").ID,"biomesoplenty:log_2:8":Application.Main.BlockRegistry.GetBlockByIdentifier("default:wood").ID,"minecraft:spruce_log":Application.Main.BlockRegistry.GetBlockByIdentifier("default:wood").ID,"minecraft:spruce_leaves":Application.Main.BlockRegistry.GetBlockByIdentifier("default:leaves").ID,"minecraft:oak_log":Application.Main.BlockRegistry.GetBlockByIdentifier("default:oak_wood").ID,"minecraft:oak_leaves":Application.Main.BlockRegistry.GetBlockByIdentifier("default:oak_leaves").ID,NotFound:Application.Main.BlockRegistry.GetBlockByIdentifier("primary:error").ID,LOG:Application.Main.BlockRegistry.GetBlockByIdentifier("default:oak_wood").ID,LEAVES:Application.Main.BlockRegistry.GetBlockByIdentifier("default:oak_leaves").ID});let i=e.split("\n");const r=new Map,a=n.X,o=n.Y,s=n.Z;let l=1/0,c=1/0,h=1/0,d=-1/0,u=-1/0,p=-1/0;for(let e=0;e<i.length;e++){if(!i[e].includes("(")||"Block"!==i[e].split("(")[0]&&"B"!==i[e].split("(")[0])continue;let t=i[e].split("(")[1].split(")")[0].split(/\,\s?(?![^\[]*\])/);const n=Number.parseInt(t[0])+a,f=Number.parseInt(t[1])+o,m=Number.parseInt(t[2])+s,g=t[3].replace(/ *\[[^)]*\] */g,"");r.set(n+", "+f+", "+m,{RelativeX:n,RelativeY:f,RelativeZ:m,ForeignType:g}),l>n&&(l=n),d<n&&(d=n),c>f&&(c=f),u<f&&(u=f),h>m&&(h=m),p<m&&(p=m)}const f=d-l+1,m=u-c+1,g=p-h+1,v=new Uint16Array(f*m*g);for(const[e,n]of r)v[(n.RelativeX-l)*m*g+(n.RelativeY-c)*g+(n.RelativeZ-h)]=t[n.ForeignType]??t.NotFound;return new ml(new fl({1:{XOffset:l,YOffset:c,ZOffset:h,XLength:f,YLength:m,ZLength:g,Data:v}}),null,{FromBOP:!0})}}const yl={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class _l{static Identifier="svm";static Version="0.0.1";static Build=1;static MLE=void 0;static Register(e){_l.MLE=e}static PreInit(){_l.MLE.PreInit.Done(_l.Identifier)}static Init(){_l.MLE.Mods.Chat.Main.Chat.ChatCommands["paste-svm"]=function(){const e=document.createElement("input");e.type="file",e.click(),e.addEventListener("change",function(){const t=e.files[0];e.remove();let n=new FileReader;n.readAsText(t),n.addEventListener("load",function(e){const t=e.target.result,n=xl.DeserialiseBOP(t,void 0,{X:0,Y:0,Z:0});!function(){const e=Application.Main.Renderer.Camera.position.x,t=Application.Main.Renderer.Camera.position.y,i=Application.Main.Renderer.Camera.position.z;n.DirectPaste(e,t,i,1,Application.Main.BlockRegistry,Application.Main.World.SetBlock.bind(Application.Main.World),!0)}()}.bind(this))}.bind(this))},_l.MLE.Init.Done(_l.Identifier)}static PostInit(){_l.MLE.PostInit.Done(_l.Identifier)}static AnimationFrame(){}}class Ml{static Version="0.7.13.9";static Build=120;static DecToHex(e,t){let n=e.toString(16);for(;n.length<6;)n="0"+n;return 1==t&&(n="#"+n),n}static Mod(e,t){return e>=0||e%t==-0?Math.abs(e%t):e%t+t}static SetProperty(e,t,n){let i=e,r=t.split("."),a=r.length;for(let e=0;e<a-1;e++){let t=r[e];"[object Object]"!==Object.prototype.toString.call(i[t])&&(i[t]={}),i=i[t]}return i[r[a-1]]=n,i}static MergeObjects(...e){if(1===e.length)return e[0];let t={};for(let n=e.length-1;n>=0;n--)if("[object Object]"===Object.prototype.toString.call(e[n]))for(let i in e[n])if("[object Array]"===Object.prototype.toString.call(e[n][i])){void 0===t[i]&&(t[i]=[]);for(let r=0;r<e[n][i].length;r++)t[i][r]=e[n][i][r]}else"[object Object]"===Object.prototype.toString.call(e[n][i])?t[i]=Ml.MergeObjects(e[n][i],t[i]):("[object Object]"!==Object.prototype.toString.call(t)&&(t={}),t[i]=e[n][i]);else t=e[n];return t}static CreateArray(e){let t=new Array(e||0),n=e;if(arguments.length>1){let i=Array.prototype.slice.call(arguments,1);for(;n--;)t[e-1-n]=this.CreateArray.apply(this,i)}return t}static CreateCanvas(e,t,n,i){let r=document.createElement("canvas");return void 0!==n&&(r.style.zIndex=n),r.width=e||1280,r.height=t||720,r.style.display=i||"block",r}static CreateWrapperDiv(e,t,n,i,r){let a=document.createElement("div");return void 0!==n&&(a.style.zIndex=n),a.style.width=(e||1280)+"px",a.style.height=(t||720)+"px",a.style.display=i||"block",a.style.overflow=r||"hidden",a}static CreateSVG(e,t,n,i){let r=document.createElementNS("http://www.w3.org/2000/svg","svg");return void 0!==n&&(r.style.zIndex=n),r.style.position="absolute",Ml.SetSVGElementProperty(r,"width",e||1280),Ml.SetSVGElementProperty(r,"height",t||720),r.style.display=i||"block",r}static CreateSVGElement(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}static SetSVGElementProperty(e,t,n){e.setAttributeNS(null,t,n)}static GetSVGElementProperty(e,t){return e.getAttributeNS(null,t)}static CreateUUID(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}static CircleRectCollision(e,t,n,i,r,a,o){void 0===o&&(a=o);let s=e-Math.max(Math.min(e,i+a),i),l=t-Math.max(Math.min(t,r+o),r);return Math.pow(s,2)+Math.pow(l,2)<Math.pow(n,2)}static WeightedAverage(e,t=1){let n=0;for(let i=0;i<e.length;i++)n+=Math.pow(e[i],t);return Math.pow(n/e.length,1/t)}static GetScientificNotation(e,t=1){let n,i,r,a=!1;return e<0&&(a=!0),n=(e=String(Math.floor(e))).match(/e+/)?Number(e.split("e+")[1]):e.match(/-/)?e.length-1:e.length,i=a?e.substring(2,2+t).split("e")[0]:e.substring(1,1+t).split("e")[0],r=a?e.substring(0,2)+"."+i+"x10^"+n:e[0]+"."+i+"x10^"+n,r}static HTTPPost(e,t,n){let i=new XMLHttpRequest;i.open("POST",e,!0),i.setRequestHeader("Content-type","application/json"),i.send(t),i.onreadystatechange=function(){if(4===i.readyState){let e=i.responseText;void 0!==n&&n(e,i)}}.bind(this)}static HTTPGet(e,t){let n=new XMLHttpRequest;n.open("GET",e,!0),n.send(),n.onreadystatechange=function(){if(4===n.readyState){let e=n.responseText;void 0!==t&&t(e,n)}}.bind(this)}static GetOrdinalIndicator(e){let t=String(e);return Number(t[t.length-1])>=4||0===Number(t[t.length-1])||1===Number(t[t.length-2])?"th":1===Number(t[t.length-1])?"st":2===Number(t[t.length-1])?"nd":3===Number(t[t.length-1])?"rd":void 0}static RedirectTo(e){let t=document.createElement("a");t.setAttribute("href",e),document.body.appendChild(t),t.click(),document.body.removeChild(t)}static RequestUserFile(e){let t=document.createElement("input");t.type="file",t.click(),t.addEventListener("change",function(n){console.log(t.files);let i=new FileReader;i.readAsText(t.files[0]),i.addEventListener("load",function(t){e(t.target.result)}.bind(this))}.bind(this))}static Download(e,t){let n=document.createElement("a");n.download=t??"",n.href=e,n.click()}static CopyToClipboard(e){let t=function(t){alert("Copying failed: "+t+"\nAttempted copy:\n"+e)}.bind(this);void 0!==navigator.clipboard?navigator.clipboard.writeText(e).catch(t):t("You have loaded the HTTP version of this site. To use the clipboard API, you need to switch to the HTTPS version. If it's available, simply change the protocol in the address bar. If not, the attempted copy can be seen below.")}static RequestPrinting(){window.print()}static RequestIFramePrint(e){e.contentWindow.print()}static RequestCrossOriginIFramePrint(e){var t=document.createElement("iframe");document.getElementsByTagName("body")[0].appendChild(t),t.style.width="100%",t.style.height="100%",t.style.display="none";var n=t.contentWindow;n.document.open(),n.document.write('<iframe src="'+e+'" onload="print();" width="1000" height="1800" frameborder="0" marginheight="0" marginwidth="0">'),n.document.close()}static DownloadTextFile(e,t){let n=document.createElement("a");n.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}static DownloadIFrame(e,t){let n='<!DOCTYPE html>\r\n<html xmlns="http://www.w3.org/1999/xhtml" lang="en">'+t.contentDocument.getElementsByTagName("html")[0].innerHTML+"</html>";Ml.DownloadTextFile(e,n)}static GetQueryStringValues(e=location.search){var t={};return location.search&&location.search.substr(1).split("&").forEach((function(e){var n=e.split("="),i=n[0],r=n[1]&&decodeURIComponent(n[1]);(t[i]=t[i]||[]).push(r)})),t}static FormatDate(e){return(e.getFullYear()+"").padStart(4,"0")+"-"+(1+e.getMonth()+"").padStart(2,"0")+"-"+(e.getDate()+"").padStart(2,"0")+" "+(e.getHours()+"").padStart(2,"0")+":"+(e.getMinutes()+"").padStart(2,"0")+":"+(e.getSeconds()+"").padStart(2,"0")}static ObjectifyModule(e){const t={};for(const n in e)t[n]=e[n];return t}}class Sl{static Version="1.2";static Build=3;constructor(){this.EventListeners=[]}AddEventListener(e,t,n={TTL:1/0,Once:!1}){return void 0===this.EventListeners[e]&&(this.EventListeners[e]=[]),this.EventListeners[e].push({Event:e,Listener:t,Options:n}),this.EventListeners[e].length-1}RemoveEventListener(e,t){this.EventListeners[e].splice(t,1)}FireEventListeners(e,...t){if(void 0!==this.EventListeners[e])for(let n=0;n<this.EventListeners[e].length;n++)this.EventListeners[e][n].Listener(...t),this.EventListeners[e][n].Options.TTL-- >0&&!0!==this.EventListeners[e][n].Options.Once||this.EventListeners[e].splice(n--,1)}on(...e){this.AddEventListener(...e)}}const bl=r.p+"6d0fc6670bd453acc1c7.svg",wl=r.p+"79adef41c0f3644d050d.svg";class El{static Windows={};static CurrentZIndex=1;static ContainerElement=null;static StyleElement=null;static _=El.Initialise();static Initialise(){delete El._,delete El.Initialise,El.ContainerElement=document.createElement("div"),El.ContainerElement.style.cssText="\n      position: absolute;\n      display: block;\n      min-width: 100%;\n      min-height: 100%;\n      z-index: 10;\n      pointer-events: none;\n      overflow: hidden;\n    ",document.body.appendChild(El.ContainerElement),El.StyleElement=document.createElement("style"),El.StyleElement.innerText="\n      .ResizeWrapper{ \n        pointer-events: auto;\n        position: absolute;\n        padding: 8px;\n        user-select: none;\n      }\n      .WindowWrapper{\n        font-family: Escape, Helvetica, sans-serif;\n        font-size: 16px;\n        display: flex;\n        flex-direction: column;\n        border: 1px solid black;\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n      }\n      .WindowWrapper > .Title{\n        background-color: #00afff5f;\n        border-bottom: 1px solid black;\n        display: flex;\n        align-items: center;\n        max-height: 34px;\n        height: 34px;\n        width: 100%;\n        position: relative;\n        user-select: none;\n        overflow: hidden;\n        transition: height 0.5s;\n      }\n      .WindowWrapper > .Title.Collapsed{\n        height: 1px;\n      }\n      .WindowWrapper > .Title.Collapsed:hover{\n        height: 34px;\n        transition: height 0.2s;\n      }\n      .WindowWrapper > .Title > .TitleText{\n        margin-inline: 12px auto;\n        pointer-events: none;\n      }\n      .WindowWrapper > .Title > img{\n        height: 34px;\n        -webkit-user-drag: none;\n        cursor: pointer;\n        transition: backdrop-filter 0.1s;\n      }\n      .WindowWrapper > .Title > img:hover{\n        backdrop-filter: brightness(.8);\n      }\n      .WindowWrapper > iframe{\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-grow: 1;\n        height: auto;\n      }\n    ",document.head.appendChild(El.StyleElement)}static HTMLTemplate=`\n    <div class="WindowWrapper">\n      <div class="Title">\n        <div class="TitleText">Window title</div>\n        <img data-action="Fullscreen" src="${bl}" />\n        <img data-action="Close" src="${wl}" />\n      </div>\n      <iframe>\n        Not loaded\n      </iframe>\n    </div>\n  `;static DefaultParameters={src:null,Width:600,Height:280,MinWidth:100,MinHeight:70,MaxWidth:1/0,MaxHeight:1/0,PositionX:200,PositionY:200,TitleColour:"#00afff5f",TitleText:"Window Title",BackdropFilter:"blur(3px)"};constructor(e={}){const t=Ml.MergeObjects(e,El.DefaultParameters);this.Events=new Sl,t.ID in El.Windows||void 0===t.ID?(console.warn("Window ID was already in use or not provided."),this.ID=Ml.CreateUUID()):this.ID=t.ID,El.Windows[this.ID]=this,this.Element=document.createElement("div"),this.Element.className="ResizeWrapper",this.Element.style.zIndex=El.CurrentZIndex+++"",this.Element.innerHTML=El.HTMLTemplate,this.IFrame=this.Element.querySelector("iframe"),this.Properties=this.InitialiseGettersSetters(t),this.MakeDraggable(),this.MakeResizeable(),this.SetupEventListeners(),El.ContainerElement.appendChild(this.Element)}InitialiseGettersSetters(e){const t=Object.assign({},e),n={};Object.defineProperties(n,{src:{get:function(){return t.src},set:function(e){t.src=e,this.Element.querySelector("iframe").src=e}.bind(this)},Width:{get:function(){return t.Width},set:function(e){e=Math.max(Math.min(e,t.MaxWidth??1/0),t.MinWidth??0),t.Width=e,this.Element.style.width=e+"px"}.bind(this)},Height:{get:function(){return t.Height},set:function(e){e=Math.max(Math.min(e,t.MaxHeight??1/0),t.MinHeight??0),t.Height=e,this.Element.style.height=e+"px"}.bind(this)},MinWidth:{get:function(){return t.MinWidth},set:function(e){t.MinWidth=Math.max(e,80),n.Width=n.Width}.bind(this)},MinHeight:{get:function(){return t.MinHeight},set:function(e){t.MinHeight=Math.max(e,50),n.Height=n.Height}.bind(this)},MaxWidth:{get:function(){return t.MaxWidth},set:function(e){t.MaxWidth=e,n.Width=n.Width}.bind(this)},MaxHeight:{get:function(){return t.MaxHeight},set:function(e){t.MaxHeight=e,n.Height=n.Height}.bind(this)},PositionX:{get:function(){return t.PositionX},set:function(e){e=Math.max(Math.min(e,window.innerWidth-n.Width/2),-n.Width/2),t.PositionX=e,this.Element.style.left=e+"px"}.bind(this)},PositionY:{get:function(){return t.PositionY},set:function(e){e=Math.max(Math.min(e,window.innerHeight-n.Height/2),-8),t.PositionY=e,this.Element.style.top=e+"px"}.bind(this)},TitleColour:{get:function(){return t.TitleColour},set:function(e){t.TitleColour=e,this.Element.querySelector(".Title").style.backgroundColor=e}.bind(this)},TitleText:{get:function(){return t.TitleText},set:function(e){t.TitleText=e,this.Element.querySelector(".TitleText").textContent=e}.bind(this)},BackdropFilter:{get:function(){return t.BackdropFilter},set:function(e){t.BackdropFilter=e,this.Element.firstElementChild.style.backdropFilter=e}.bind(this)}});for(const e in t)n[e]=t[e];return n}MakeDraggable(){const e=this.Element,t=e.querySelector("iframe");let n=!1,i=null,r=null;const a=function(){t.style.pointerEvents="auto",El.ContainerElement.style.pointerEvents="none",n=!1,i=null,r=null};e.querySelector(".Title").addEventListener("mousedown",(function(e){e.target===this&&(t.style.pointerEvents="none",El.ContainerElement.style.pointerEvents="auto",n=!0,i=e.clientX,r=e.clientY,window.addEventListener("mouseup",a,{once:!0}))})),window.addEventListener("mousemove",function(t){if(!n)return;if(0==(1&t.buttons))return void a();const o=t.clientX,s=t.clientY,l=o-i,c=s-r;i=o,r=s,this.Properties.PositionX=Number.parseInt(e.style.left,10)+l,this.Properties.PositionY=Number.parseInt(e.style.top,10)+c}.bind(this))}MakeResizeable(){const e=this.Properties,t=this.Element.querySelector("iframe");let n=!1,i=null,r=null,a=0,o=0;const s=function(){t.style.pointerEvents="auto",El.ContainerElement.style.pointerEvents="none",El.ContainerElement.style.cursor="auto",n=!1,i=null,r=null,a=0,o=0};this.Element.addEventListener("mousemove",(function(t){if(t.target!==this)return void(this.style.cursor="auto");const n=this.getBoundingClientRect(),i=t.clientX-n.left,r=t.clientY-n.top,a=Math.floor((i-8)/(e.Width-16)),o=Math.floor((r-8)/(e.Height-16));let s="";o<0?s+="n":o>0&&(s+="s"),a<0?s+="w":a>0&&(s+="e"),s+="-resize",this.style.cursor=s})),this.Element.addEventListener("mousedown",(function(l){if(l.target!==this)return;n=!0,t.style.pointerEvents="none",El.ContainerElement.style.pointerEvents="auto",i=l.clientX,r=l.clientY;const c=this.getBoundingClientRect(),h=l.clientX-c.left,d=l.clientY-c.top;a=Math.floor((h-8)/(e.Width-16)),o=Math.floor((d-8)/(e.Height-16)),window.addEventListener("mouseup",s,{once:!0})})),window.addEventListener("mousemove",(function(t){if(!n)return;if(0==(1&t.buttons))return void s();const l=t.clientX,c=t.clientY,h=l-i,d=c-r;if(i=l,r=c,a<0){const t=e.Width;e.Width-=h,e.PositionX+=t-e.Width}else a>0&&(e.Width+=h);if(o<0){const t=e.Height;e.Height-=d,e.PositionY+=t-e.Height}else o>0&&(e.Height+=d)}))}SetupEventListeners(){window.addEventListener("resize",function(){this.Properties.PositionX=this.Properties.PositionX,this.Properties.PositionY=this.Properties.PositionY}.bind(this));const e=this.Element.firstElementChild,t=e.querySelector(".Title");this.Element.querySelector("img[data-action='Fullscreen']").addEventListener("click",async function(){document.fullscreenElement===e?await document.exitFullscreen():await e.requestFullscreen()}.bind(this)),e.addEventListener("fullscreenchange",(function(){document.fullscreenElement?(t.style.position="absolute",e.style.border="none",window.setTimeout((function(){t.classList.add("Collapsed")}),1500)):(t.style.position="static",e.style.removeProperty("border"),t.classList.remove("Collapsed"))}));let n=0,i=0;window.addEventListener("resize",function(){document.fullscreenElement&&((n>window.innerWidth||i>window.innerHeight)&&document.exitFullscreen(),n=window.innerWidth,i=window.innerHeight)}.bind(this)),this.Element.querySelector("img[data-action='Close']").addEventListener("click",function(){this.Hide()}.bind(this)),this.IFrame.addEventListener("load",function(e){this.Events.FireEventListeners("Loaded",e)}.bind(this))}Hide(){this.Element.style.display="none",this.Events.FireEventListeners("Hide")}Show(){this.Element.style.display="block",this.Events.FireEventListeners("Show")}}class Tl extends Promise{static#e=Tl.#t();static#t(){Tl.prototype.constructor=Promise}constructor(e={}){let t,n;super((function(e,i){t=e,n=i})),this.resolve=t,this.reject=n,e.Timeout&&globalThis.setTimeout((e.Throw??1?this.reject:this.resolve).bind(this),+e.Timeout)}}const Rl=new DOMParser;class Cl{static GraphTemplate=document.importNode(Rl.parseFromString('\n    <div style="--opaque: #663399; --transparent: #6633997f; --less-transparent: #663399bf;">\n      <h1>FPS</h1>\n      <div class="SettingsImage"></div>\n      <div class="SettingsAndGraphWrapper">\n        <p><ins data-unit=" fps">60</ins></p>\n        <div class="SettingsMenu">\n          <form>\n            <p>Update frequency</p>\n            <input class="Slider" type="range" name="Range" min="0" max="8" value="0" oninput="this.form.Input.value = this.value || 0;" step="1" />\n            <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value = this.value || 0;" step="any" />\n          </form>\n          <form>\n            <p>History length</p>\n            <input class="Slider" type="range" name="Range" min="0" max="8" value="0" oninput="this.form.Input.value = this.value || 0;" step="1" />\n            <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value = this.value || 0;" step="any" />\n          </form>\n          <form>\n            <p>Max value</p>\n            <input class="Slider" type="range" name="Range" min="0" max="8" value="0" oninput="this.form.Input.value = this.value || 0;" step="1" />\n            <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value = this.value || 0;" step="any" />\n          </form>\n          <form>\n            <p>Min value</p>\n            <input class="Slider" type="range" name="Range" min="0" max="8" value="0" oninput="this.form.Input.value = this.value || 0;" step="1" />\n            <input class="TextInput" type="number" name="Input" value="0" oninput="this.form.Range.value = this.value || 0;" step="any" />\n          </form>\n          Show alert when... > 300\n        </div>\n        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 440 220">\n          <defs>\n            <clipPath id="GraphClipPath">\n              <path d="M 0 0 L 400 0 L 400 200 L 0 200" />\n            </clipPath>\n          </defs>\n          <g transform="translate(40, 0)">\n            <g data-axis="x"></g>\n            <g data-axis="y"></g>\n          </g>\n        </svg>\n      </div>\n    </div>\n  ',"text/html").documentElement.querySelector("body > *"),!0);static GraphContentTemplates=document.importNode(Rl.parseFromString('\n    <svg id="GraphFragmentTemplates" xmlns="http://www.w3.org/2000/svg" style="height: 0; width: 0; opacity: 0; position: absolute;">\n      <defs>\n        <g id="HorizontalLine">\n          <g transform="translate(0, 20)">\n            <line x1="-5" x2="400" stroke="#ffffff" stroke-opacity=".2" stroke-width="2"/>\n            <text dy="5" x="-8" text-anchor="end" fill="#ffffff">450</text>\n          </g>\n        </g>\n        <g id="VerticalLine">\n          <g transform="translate(25, 0)">\n            <line y2="205" stroke="#ffffff" stroke-opacity=".2" stroke-width="2"/>\n            <text dy="18" y="200" text-anchor="middle" fill="#ffffff">17:44:20</text>\n          </g>\n        </g>\n        <g id="GraphPath">\n          <path clip-path="url(#GraphClipPath)" stroke="rebeccapurple" stroke-width="3" fill="rebeccapurple" fill-opacity=".5" d="M -100 200 L 0 50 L 10 30 L 20 24 L 30 5 L 40 19 L 50 54 L 60 48 L 70 68 L 80 64 L 90 51 L 100 55 L 110 66 L 120 62 L 130 61 L 140 59 L 150 46 L 160 38 L 170 33 L 180 45 L 190 27 L 200 23 L 210 36 L 220 54 L 230 51 L 240 100 L 250 92 L 260 98 L 270 141 L 280 160 L 290 153 L 300 172 L 310 189 L 320 166 L 330 163 L 340 174 L 350 159 L 360 133 L 370 135 L 380 128 L 390 134 L 400 141 L 500 200" />\n        </g>\n      </defs>\n    </svg>\n  ',"text/html").documentElement.querySelector("body > *"),!0);static GraphPath=Cl.GraphContentTemplates.querySelector("#GraphPath").firstElementChild;static GraphVerticalLine=Cl.GraphContentTemplates.querySelector("#VerticalLine").firstElementChild;static GraphHorizontalLine=Cl.GraphContentTemplates.querySelector("#HorizontalLine").firstElementChild;constructor(e,t,n,i,r){this.Name=e,this.Colour=t,this.Generator=r,this.Graph=Cl.GraphTemplate.cloneNode(!0),this.GraphContent=this.Graph.querySelector("svg").querySelector("g"),this.GraphPathElement=Cl.GraphPath.cloneNode(!0),this.GraphContent.appendChild(this.GraphPathElement),this.GraphXAxis=this.GraphContent.querySelector("g[data-axis='x']"),this.GraphYAxis=this.GraphContent.querySelector("g[data-axis='y']"),this.Graph.querySelector("h1").textContent=e,this.UpdatedValueElement=this.Graph.querySelector("ins"),this.UpdatedValueElement.dataset.unit=i,this.Graph.style=`\n      --opaque: ${t};\n      --transparent: ${t}7f;\n      --less-transparent: ${t}bf;\n    `,this.GraphPathElement.setAttributeNS(null,"stroke",t),this.GraphPathElement.setAttributeNS(null,"fill",t),this.History=[],this.HistoryLength=n,this.NeedsUpdate=!1,this.ValidXDivisions=[1,2,5,10,20,30,60,90,120,300,600,900,1800,3600],async function(){for(;;){let e=new Tl;Application.Main.Renderer.RequestAnimationFrame(e.resolve.bind(e));const t=(await this.Generator.next()).value;this.AddValue(t),await e}}.bind(this)(),this.IsVisible=!1,this.IntersectionObserver=new IntersectionObserver(function(e){e[0].isIntersecting?(this.IsVisible=!0,this.NeedsUpdate=!0):this.IsVisible=!1}.bind(this),{root:null,threshold:.1}),this.IntersectionObserver.observe(this.Graph),function e(){Application.Main.Renderer.RequestAnimationFrame(e.bind(this)),this.UpdateGraph()}.bind(this)()}AddValue(e){if(Number.isNaN(e))return;this.NeedsUpdate=!0,this.IsVisible&&(this.UpdatedValueElement.textContent=e>=100?Math.round(e):Math.round(e/10**Math.floor(Math.log10(e))*100)*10**Math.floor(Math.log10(e))/100);const t=window.performance.now();for(this.History.push({Time:t,Value:e});this.History.length>2&&this.History[1].Time<t-this.HistoryLength;)this.History.shift()}UpdateGraph(){if(this.History.length<2||!this.IsVisible)return;this.NeedsUpdate=!1;let e=-1/0;for(const{Value:t}of this.History)e<t&&(e=t);const t=window.performance.now(),n=this.History[0].Time;let i="M -100 200 ";for(let n=0,r=this.History.length;n<r;++n){const a=400*(1-(t-this.History[n].Time)/this.HistoryLength),o=(e-this.History[n].Value)/e*200;0===n&&a>0&&(i+=`L ${a} 200 `),i+=`L ${a} ${o} `,n===r-1&&(i+=`L 400 ${o} `)}i+="L 500 200",this.GraphPathElement.setAttributeNS(null,"d",i);const r=[...this.GraphXAxis.querySelectorAll("g")],a=[...this.GraphYAxis.querySelectorAll("g")];let o,s=this.HistoryLength,l=e-0,c=null;{let e=s/5,t=e/1e3;for(let n=0;n<this.ValidXDivisions.length-1;++n)if(this.ValidXDivisions[n]<t&&this.ValidXDivisions[n+1]>t){c=Math.abs(this.ValidXDivisions[n]-t)<Math.abs(this.ValidXDivisions[n+1]-t)?this.ValidXDivisions[n]*10**Math.floor(Math.log10(e)):this.ValidXDivisions[n+1]*10**Math.floor(Math.log10(e));break}null===c&&(c=e)}{let e=l/5,t=[1,2,5,10],n=e/10**Math.floor(Math.log10(e));for(let i=0;i<t.length;++i)if(t[i]<n&&t[i+1]>n){o=Math.abs(t[i]-n)<Math.abs(t[i+1]-n)?t[i]*10**Math.floor(Math.log10(e)):t[i+1]*10**Math.floor(Math.log10(e));break}}for(let e=0,i=Math.floor(n/c)*c;e<20;++e,i+=c){if(i<n)continue;if(i>t)break;const e=400*(1-(t-i)/s);if(e<10||e>390)continue;let a=r.pop();a||(a=Cl.GraphVerticalLine.cloneNode(!0),this.GraphXAxis.appendChild(a));const o=new Date(new Date-(t-i)).toTimeString().substr(0,8);a.querySelector("text").textContent=o,a.setAttributeNS(null,"transform","translate("+e+", 0)"),a.style.transform="translate("+e+"px, 0)"}for(;0!==r.length;)r.pop().remove();for(let t=0,n=Math.floor(0/o)*o;t<10;++t,n+=o){if(n<0)continue;if(n>e)break;let t=a.pop();t||(t=Cl.GraphHorizontalLine.cloneNode(!0),this.GraphYAxis.appendChild(t));const i=(Math.abs(n)<1e-4||Math.abs(n)>1e6)&&0!==n?n.toExponential(5).replace(/\.([0-9]*[1-9])?0*/g,".$1").replace(/\.e/,".0e"):n;t.querySelector("text").textContent=i,t.setAttributeNS(null,"transform","translate(0, "+(e-n)/l*200+")"),t.style.transform="translate(0, "+(e-n)/l*200+"px)"}for(;0!==a.length;)a.pop().remove()}}var Dl=r(4278),Al=r(5442);class Il{constructor(){this.Events=new ro,this.Shown=!1,this.Resize(window.innerWidth,window.innerHeight),window.addEventListener("resize",function(){this.Resize(window.innerWidth,window.innerHeight)}.bind(this)),this.Window=new El({TitleText:"Inspector"}),this.Window.IFrame.srcdoc='<!DOCTYPE html> <html> <head> <title>Inspector</title> </head> <body> <nav> <ul> <li>General Information</li> <li class="Selected">Statistics</li> <li>World Inspector</li> <li>Settings</li> <li>Help</li> </ul> </nav> <main id="GeneralInformation" hidden> <h1 class="Title">General Information</h1> <h2 class="SectionTitle">Device Information</h2> <table> <tbody> <tr><td>Device memory</td><td>navigator.deviceMemory</td></tr> <tr><td>Hardware concurrency</td><td>navigator.hardwareConcurrency</td></tr> <tr><td>GPU and renderer</td><td>discord</td></tr> <tr><td>User agent</td><td>discord</td></tr> <tr><td>Resolution</td><td>1920x1080</td></tr> </tbody> </table> <h2 class="SectionTitle">Buffers</h2> <table> <tbody> <tr><td>Data64 size</td><td>123</td></tr> <tr><td>Data64 utilisation</td><td>123</td></tr> <tr><td>Data8 size</td><td>123</td></tr> <tr><td>Data8 utilisation</td><td>123</td></tr> <tr><td>Data1 size</td><td>123</td></tr> <tr><td>Data1 utilisation</td><td>123</td></tr> <tr><td>Data1 coverage</td><td>123</td></tr> <tr><td>VoxelTypes size</td><td>123</td></tr> <tr><td>VoxelTypes utilisation</td><td>123</td></tr> <tr><td>VoxelTypes coverage</td><td>123</td></tr> <tr><td>GPUData64 size</td><td>123</td></tr> <tr><td>GPUData64 utilisation</td><td>123</td></tr> <tr><td>GPUData8 size</td><td>123</td></tr> <tr><td>GPUData8 utilisation</td><td>123</td></tr> <tr><td>GPUData1 size</td><td>123</td></tr> <tr><td>GPUData1 utilisation</td><td>123</td></tr> <tr><td>GPUData1 coverage</td><td>123</td></tr> <tr><td>GPUVoxelTypes size</td><td>123</td></tr> <tr><td>GPUVoxelTypes utilisation</td><td>123</td></tr> <tr><td>GPUVoxelTypes coverage</td><td>123</td></tr> </tbody> </table> </main> <main id="Statistics"> <h1 class="Title">Statistics</h1> <p>Uptime: <ins>00:01:23</ins></p> <section class="Graphs"> </section> </main> </body> </html>',this.Window.Hide(),this.LoadedPromise=new Tl,this.Window.Events.AddEventListener("Loaded",function(e){this.LoadedPromise.resolve();const t=this.Window.IFrame.contentDocument.createElement("style");t.innerText=Dl.Z[0][1],this.Window.IFrame.contentDocument.body.appendChild(t);const n=this.Window.IFrame.contentDocument.createElement("style");n.innerText=Al.Z[0][1],this.Window.IFrame.contentDocument.body.appendChild(n)}.bind(this)),async function(){for(const{Name:e,Colour:t,HistoryLength:n,Unit:i,Generator:r}of[{Name:"FPS",Colour:"#663399",HistoryLength:5e3,Unit:" fps",Generator:function(){let e=0,t=0,n=!1;return function i(){Application.Main.Renderer.RequestAnimationFrame(i),n&&(n=!1,t=0,e=0),t++,e+=Application.Main.Renderer.RenderTime}(),async function*(){for(;;)yield 1e3*t/e,n=!0}()}()},{Name:"Lowest FPS",Colour:"#0fcf3f",HistoryLength:15e3,Unit:" fps",Generator:function(){let e=-1/0,t=!1;return function n(){Application.Main.Renderer.RequestAnimationFrame(n),t&&(t=!1,e=-1/0),e=Math.max(e,Application.Main.Renderer.RenderTime)}(),async function*(){for(;;)await new Tl({Timeout:100,Throw:!1}),yield 1e3/e,t=!0}()}()},{Name:"Data8 utilization",Colour:"#00afff",HistoryLength:3e4,Unit:"%",Generator:async function*(){const e=Application.Main.World.AllocationIndex,t=Application.Main.World.AllocationArray.length;for(;;)await new Tl({Timeout:100,Throw:!1}),yield(e[0]-e[1]&t-1)/t*100}()},{Name:"Data64 utilization",Colour:"#0d4fd4",HistoryLength:3e4,Unit:"%",Generator:async function*(){const e=Application.Main.World.AllocationIndex64;for(;;)await new Tl({Timeout:100,Throw:!1}),yield(e[0]-e[1]&4095)/4096*100}()},{Name:"Free GPU segments",Colour:"#9ae019",HistoryLength:3e4,Unit:" segments",Generator:async function*(){for(;;)await new Tl({Timeout:100,Throw:!1}),yield Application.Main.SharedDebugData[0]}()}])this.AddMeasurement(e,t,n,i,r)}.bind(this)()}async AddMeasurement(e,t,n,i,r){await this.LoadedPromise;const a=new Cl(e,t,n,i,r);this.Window.IFrame.contentDocument.querySelector("section.Graphs").appendChild(a.Graph)}Resize(e,t){this.Events.FireEventListeners("Resize",{Width:e,Height:t})}Show(){this.Shown=!0}Hide(){this.Shown=!1}}class Pl extends Uo{constructor(){super(),this.Configuration=new No({Exit:"Escape"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class Ll{constructor(e){this.Main=e,this.Controls=new Pl,Application.Main.Game.ControlManager.Controls.InspectorControls=this.Controls;const t=Application.Main.Game.ControlManager.Controls.GameControls;t.Configuration.Set("Inspector","F10"),t.Events.AddEventListener("ControlDown",function(e){"Inspector"===e.Control&&this.Main.Show()}.bind(this)),this.ControlHandlers={Exit:function(){this.Main.Exit()}.bind(this)},this.Controls.Events.AddEventListener("ControlDown",function(e){this.ControlHandlers[e.Control]?.(e)}.bind(this))}}const Fl={MLEBuildSupport:{Earliest:void 0,Target:1,Latest:void 0},Dependencies:[],Stages:{PreInit:{Priority:127,Requirements:[]},Init:{Priority:127,Requirements:[]},PostInit:{Priority:127,Requirements:[]}}};class Ol{static Identifier="Inspector";static Version="0.0.1";static Build=1;static MLE=void 0;static Renderer=void 0;static Register(e){Ol.MLE=e}static PreInit(){new Nl,Ol.MLE.PreInit.Done(Ol.Identifier)}static Init(){Ol.MLE.Init.Done(Ol.Identifier)}static PostInit(){Ol.MLE.PostInit.Done(Ol.Identifier)}}class Nl{constructor(){this.Interface=new Il,this.ControlHandler=new Ll(this);const e=this.Interface.Window.IFrame;let t=function(){Application.Main.Game.ControlManager.RegisterIFrame(e)}.bind(this);e.addEventListener("load",t.bind(this))}Show(){this.Interface.Window.Show(),document.exitPointerLock(),this.Interface.Window.IFrame.contentWindow.focus()}Exit(){Application.Main.Game.ControlManager.FocusControl("GameControls"),this.Interface.Window.Hide(),window.focus(),Application.Main.Game.GamePointerLockHandler.PointerLock.Element.focus(),Application.Main.Game.GamePointerLockHandler.PointerLock.Element.requestPointerLock()}}class Ul{static IsSuperset(e,t){for(const n of t)if(!e.has(n))return!1;return!0}static IsSubset(e,t){return Ul.IsSuperset(t,e)}static Union(e,t){let n=new Set(e);for(const e of t)n.add(e);return n}static Intersection(e,t){let n=new Set;for(const i of e)t.has(i)&&n.add(i);return n}static SymmetricDifference(e,t){let n=new Set(e);for(const e of t)n.has(e)?n.delete(e):n.add(e);return n}static Difference(e,t){let n=new Set(e);for(const e of t)n.has(e)&&n.delete(e);return n}}const kl=new class{static Version="Alpha 0.0.3";static Build=3;constructor(){this.Events=new ro,this.ModList=new Set,this.ModProperties={},this.ModConfig={},this.Application=void 0,this.Mods=void 0,this.Register();let e=function(e,t){let n=new Set,i=new Set,r={};const a=[...this.ModList];for(const t of a)r[t]=new Set(...[this.ModConfig[t].Stages[e].Requirements]);this[e]=function(){for(const t in c){const a=c[t].Main.Identifier;if(!i.has(a))if(c[t].Main[e]){if(!Ul.IsSubset(r[a],n))continue;i.add(a),c[t].Main[e]()}else i.add(a),this[e].Done(c[t].Main.Identifier)}}.bind(this),this[e].Done=function(i){let r=!1,a=i.ModList.size;return function(o){if(r)throw new Error("The "+e+" stage is over.");if(!i.ModList.has(o))throw new Error("The "+e+" of the unregistered mod "+o+" completed.");if(n.has(o))throw new Error("The mod with identifier "+o+"("+i.ModProperties[o].Version+"["+i.ModProperties[o].Build+"]) already signalled that it was done with "+e+".");n.add(o),i[e](),n.size===a&&(r=!0,i.Events.FireEventListeners("Finished"+e),i.Events.FireEventListeners("Prepare"+t),n.clear(),i[t]())}}.bind(this)(this)}.bind(this);e("PreInit","Init"),e("Init","PostInit"),e("PostInit","Finish")}Register(){this.Mods=c;for(const e in c)this.ModList.add(c[e].Main.Identifier),this.ModProperties[c[e].Main.Identifier]={Version:c[e].Main.Version,Build:c[e].Main.Build},this.ModConfig[c[e].Main.Identifier]=c[e].ModConfig,c[e].Main.Register(this)}Finish(){this.Events.FireEventListeners("Finished")}};class Bl extends Uo{constructor(){super(),this.Configuration=new No({Forwards:"KeyW",Backwards:"KeyS",Leftwards:"KeyA",Rightwards:"KeyD",Upwards:"Space",Downwards:"ShiftLeft",Sprint:"KeyQ",ExitPointerLock:"AltLeft"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class zl extends ro{static Version="0.2";static Build=19;constructor(e){super(),this.Element=e,this.PointerLocked=!1}Register(){return this.Element.requestPointerLock=this.Element.requestPointerLock||this.Element.mozRequestPointerLock,this.Element.exitPointerLock=this.Element.exitPointerLock||this.Element.mozExitRequestPointerLock,this.Element.addEventListener("click",function(){this.PointerLocked||this.Element.requestPointerLock()}.bind(this)),document.addEventListener("pointerlockchange",function(){this.UpdateLockStatus()}.bind(this),!1),document.addEventListener("mozpointerlockchange",function(){this.UpdateLockStatus()}.bind(this),!1),Application.Main.Renderer.Events.AddEventListener("MouseMove",function(e){this.PointerLocked&&this.FireEventListeners("MouseMove",e)}.bind(this)),document.addEventListener("click",function(e){this.FireEventListeners("Click",e)}.bind(this)),document.addEventListener("mousedown",function(e){this.FireEventListeners("MouseDown",e)}.bind(this)),document.addEventListener("mouseup",function(e){this.FireEventListeners("MouseUp",e)}.bind(this)),document.addEventListener("wheel",function(e){this.FireEventListeners("Wheel",e)}.bind(this)),this}UpdateLockStatus(e){document.pointerLockElement===this.Element||document.mozPointerLockElement===this.Element?(this.PointerLocked=!0,this.FireEventListeners("PointerLocked",!0)):(this.PointerLocked=!1,this.FireEventListeners("PointerLocked",!1))}}class Gl{constructor(e,t){this.PointerLock=new zl(e).Register(),this.Settings={MouseSensitivity:.002,InvertY:!0},this.Camera=t,this.PointerLock.AddEventListener("MouseMove",function(e){this.Camera.rotation.y-=e.movementX*this.Settings.MouseSensitivity,this.Camera.rotation.x+=e.movementY*this.Settings.MouseSensitivity*Math.sign(this.Settings.InvertY-.5),this.Camera.rotation.x=Math.max(Math.PI/-2,Math.min(Math.PI/2,this.Camera.rotation.x))}.bind(this))}}class Hl extends Uo{constructor(){super(),this.Configuration=new No({DebugMenu:"F3"}),this.Events.AddEventListener("KeyDown",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlDown",{Control:t})}.bind(this)),this.Events.AddEventListener("KeyUp",function(e){const t=this.Configuration.ReverseGet(e.Code);void 0!==t&&this.Events.FireEventListeners("ControlUp",{Control:t})}.bind(this))}IsControlPressed(e){return this.IsPressed(this.Configuration.Get(e))}}class Vl{constructor(){this.GlobalControls=new Hl,this.GlobalControls.Focus(),this.Controls={},this.FocusedControl=void 0}FocusControl(e){this.Controls[this.FocusedControl]?.Unfocus(),this.Controls[e]?.Focus(),this.FocusedControl=e}UnfocusControl(){this.Controls[this.FocusedControl]?.Unfocus()}RegisterIFrame(e){e.contentDocument.addEventListener("keydown",(function(e){document.dispatchEvent(new KeyboardEvent("keydown",e))})),e.contentDocument.addEventListener("keyup",(function(e){document.dispatchEvent(new KeyboardEvent("keyup",e))}))}}class Wl{static MAX_BLOCK_IDS=65536;constructor(){this.BlockIDMapping={},this.BlockIdentifierMapping={},this.RegisterPrimaryIDs()}static Initialise(e,t){let n=Object.create(this.prototype);return n.BlockIDMapping=e,n.BlockIdentifierMapping=t,n}RegisterPrimaryIDs(){this.RegisterBlock(new Lo("primary:air",{Solid:!1,Invisible:!0,Transparent:!0,Precedence:-32},0),0),this.RegisterBlock(new Lo("primary:not_loaded",{Solid:!0,Invisible:!0,Transparent:!0},49148),49148),this.RegisterBlock(new Lo("primary:placeholder",{Solid:!0,Invisible:!1,Transparent:!1},49149),49149),this.RegisterBlock(new Lo("primary:temp",{Solid:!0,Invisible:!1,Transparent:!1},49150),49150),this.RegisterBlock(new Lo("primary:error",{Solid:!0,Invisible:!1,Transparent:!1,Precedence:1/0},49151),49151),this.RegisterBlock(new Lo("primary:custom",{Solid:!0,Invisible:!1,Transparent:!1,Precedence:1024},65535),65535),this.RegisterBlock(new Lo("generic:solid",{Solid:!0,Invisible:!1,Transparent:!1},61440),61440),this.RegisterBlock(new Lo("generic:gas",{Solid:!1,Invisible:!0,Transparent:!0},61441),61441),this.RegisterBlock(new Lo("generic:fluid",{Solid:!1,Invisible:!1,Transparent:!0},61442),61442)}RegisterBlock(e,t){if(void 0!==t){if(t<0||t>=Wl.MAX_BLOCK_IDS)throw new Error("Invalid Block ID.");if(void 0!==this.BlockIDMapping[t])throw new Error("The Block ID "+t+" has already been mapped to a block ("+this.GetBlockByID(t).Identifier+"). Try not specifying the ID to ensure that the block is given a unique Block ID.")}else t=this.FindSmallestID();this.BlockIDMapping[t]=e,this.BlockIdentifierMapping[e.Identifier]=e,e.ID=t}GetBlockByID(e){return this.BlockIDMapping[e]??this.BlockIDMapping[49151]}GetBlockByIdentifier(e){return this.BlockIdentifierMapping[e]??this.BlockIDMapping[49151]}FindSmallestID(){for(let e=0;e<Wl.MAX_BLOCK_IDS;e++)if(void 0===this.BlockIDMapping[e])return e}}class ql{constructor(){this.Events=new ro,this.SharedPlayerPosition=new Float64Array(new SharedArrayBuffer(24)),function e(){Application.Main.Renderer.RequestAnimationFrame(e.bind(this)),this.SharedPlayerPosition[0]=Application.Main.Renderer.Camera.position.x,this.SharedPlayerPosition[1]=Application.Main.Renderer.Camera.position.y,this.SharedPlayerPosition[2]=Application.Main.Renderer.Camera.position.z}.bind(this)(),Application.Main.WorkerLoadingPipeline.postMessage({Request:"SaveStuff",BlockIDMapping:Application.Main.BlockRegistry.BlockIDMapping,BlockIdentifierMapping:Application.Main.BlockRegistry.BlockIdentifierMapping,SharedPlayerPosition:this.SharedPlayerPosition,Structures:Application.Main.Structures,VoxelTypes:Application.Main.World.VoxelTypes,Data1:Application.Main.World.Data1,Data8:Application.Main.World.Data8,Data64:Application.Main.World.Data64,AllocationIndex:Application.Main.World.AllocationIndex,AllocationArray:Application.Main.World.AllocationArray,AllocationIndex64:Application.Main.World.AllocationIndex64,AllocationArray64:Application.Main.World.AllocationArray64,Data64Offset:Application.Main.World.Data64Offset,GPUData1:Application.Main.World.GPUData1,GPUData8:Application.Main.World.GPUData8,GPUData64:Application.Main.World.GPUData64,GPUType1:Application.Main.World.GPUType1,GPUInfo8:Application.Main.World.GPUInfo8,GPUInfo64:Application.Main.World.GPUInfo64,GPUBoundingBox1:Application.Main.World.GPUBoundingBox1,SharedDebugData:Application.Main.SharedDebugData,LoadStageQueueLengths:Application.Main.World.LoadStageQueueLengths}),Application.Main.WorkerLoadingPipeline.addEventListener("message",function(e){const t=e.data.Request;switch(t){case"UpdatedData64Offset":this.Events.FireEventListeners("UpdatedData64Offset");break;case"FinishedLoadingBatch":this.Events.FireEventListeners("FinishedLoadingBatch",e.data.LoadingBatch);break;default:this.Events.FireEventListeners(t,e.data)}}.bind(this))}}class Xl{constructor(e,t){this.World=e,this.Renderer=t,this.Scene=this.Renderer.Scene,this.RaytracedPassScene=this.Renderer.RaytracedPassScene,this.FinalPassScene=this.Renderer.FinalPassScene,this.TestPassScene=this.Renderer.TestPassScene,this.OutputPassScene=this.Renderer.OutputPassScene,this.SmallTargetScene=this.Renderer.SmallTargetScene,this.MaxUpdatingSegments=3,this.Data1=this.World.Data1,this.VoxelTypes=this.World.VoxelTypes,this.Data8=this.World.Data8,this.Data64=this.World.Data64,this.GPUData1=this.World.GPUData1,this.GPUData8=this.World.GPUData8,this.GPUData64=this.World.GPUData64,this.GPUType1=this.World.GPUType1,this.GPUInfo8=this.World.GPUInfo8,this.GPUInfo64=this.World.GPUInfo64,this.GPUBoundingBox1=this.World.GPUBoundingBox1,this.TexType1=new Qa(this.GPUType1,512,512,512),this.TexType1.internalFormat="R16UI",this.TexType1.format=D,this.TexType1.type=M,this.TexType1.minFilter=this.TexType1.magFilter=v,this.TexType1.unpackAlignment=1,this.TexType1.needsUpdate=!0,this.TexInfo8=new Qa(this.GPUInfo8,8,512,512),this.TexInfo8.internalFormat="R32UI",this.TexInfo8.format=D,this.TexInfo8.type=S,this.TexInfo8.minFilter=this.TexInfo8.magFilter=v,this.TexInfo8.unpackAlignment=1,this.TexInfo8.needsUpdate=!0,this.TexBoundingBox1=new Qa(this.GPUBoundingBox1,8,512,512),this.TexBoundingBox1.internalFormat="R32UI",this.TexBoundingBox1.format=D,this.TexBoundingBox1.type=S,this.TexBoundingBox1.minFilter=this.TexBoundingBox1.magFilter=v,this.TexBoundingBox1.unpackAlignment=1,this.TexBoundingBox1.needsUpdate=!0,this.TexInfo64=new Qa(this.GPUInfo64,8,8,64),this.TexInfo64.internalFormat="R32UI",this.TexInfo64.format=D,this.TexInfo64.type=S,this.TexInfo64.minFilter=this.TexInfo64.magFilter=v,this.TexInfo64.unpackAlignment=1,this.TexInfo64.needsUpdate=!0,this.TexData1=new Qa(this.GPUData1,64,512,512),this.TexData1.internalFormat="R8UI",this.TexData1.format=D,this.TexData1.type=_,this.TexData1.minFilter=this.TexData1.magFilter=v,this.TexData1.unpackAlignment=1,this.TexData1.needsUpdate=!0,this.TexData8=new Qa(this.GPUData8,1,512,512),this.TexData8.internalFormat="R8UI",this.TexData8.format=D,this.TexData8.type=_,this.TexData8.minFilter=this.TexData8.magFilter=v,this.TexData8.unpackAlignment=1,this.TexData8.needsUpdate=!0,this.TexData64=new Qa(this.GPUData64,8,8,8),this.TexData64.internalFormat="R8UI",this.TexData64.format=D,this.TexData64.type=_,this.TexData64.minFilter=this.TexData64.magFilter=v,this.TexData64.unpackAlignment=1,this.TexData64.needsUpdate=!0,this.CloseVoxels=new Uint8Array(32768),this.CloseVoxelsTexture=new Qa(this.CloseVoxels,8,64,64),this.CloseVoxelsTexture.internalFormat="R8UI",this.CloseVoxelsTexture.format=D,this.CloseVoxelsTexture.type=_,this.CloseVoxelsTexture.minFilter=this.CloseVoxelsTexture.magFilter=v,this.CloseVoxelsTexture.unpackAlignment=1,this.CloseVoxelsTexture.needsUpdate=!0,this.Type1Copy=new Uint16Array(262144),this.TexType1Copy=new Qa(this.Type1Copy,512,512,1),this.TexType1Copy.internalFormat="R16UI",this.TexType1Copy.format=D,this.TexType1Copy.type=M,this.TexType1Copy.minFilter=this.TexType1Copy.magFilter=v,this.TexType1Copy.unpackAlignment=1,this.TexType1Copy.needsUpdate=!0,this.Data1Copy=new Uint8Array(32768),this.TexData1Copy=new Qa(this.Data1Copy,64,512,1),this.TexData1Copy.internalFormat="R8UI",this.TexData1Copy.format=D,this.TexData1Copy.type=_,this.TexData1Copy.minFilter=this.TexData1Copy.magFilter=v,this.TexData1Copy.unpackAlignment=1,this.TexData1Copy.needsUpdate=!0,this.BoundingBox1Copy=new Uint32Array(512),this.TexBoundingBox1Copy=new Qa(this.BoundingBox1Copy,8,64,1),this.TexBoundingBox1Copy.internalFormat="R32UI",this.TexBoundingBox1Copy.format=D,this.TexBoundingBox1Copy.type=S,this.TexBoundingBox1Copy.minFilter=this.TexBoundingBox1Copy.magFilter=v,this.TexBoundingBox1Copy.unpackAlignment=1,this.TexBoundingBox1Copy.needsUpdate=!0,this.Info8Copy=new Uint32Array(512),this.TexInfo8Copy=new Qa(this.Info8Copy,8,64,1),this.TexInfo8Copy.internalFormat="R32UI",this.TexInfo8Copy.format=D,this.TexInfo8Copy.type=S,this.TexInfo8Copy.minFilter=this.TexInfo8Copy.magFilter=v,this.TexInfo8Copy.unpackAlignment=1,this.TexInfo8Copy.needsUpdate=!0,this.CloseVoxelsOffset=new Ee(0,0,0),this.Uniforms={iResolution:{value:new $(1920,1080)},iTime:{value:0},iRotation:{value:new Ee(0,0,0)},iPosition:{value:new Ee(0,0,0)},iTexType1:{value:this.TexType1},iTexInfo8:{value:this.TexInfo8},iTexInfo64:{value:this.TexInfo64},iTexData1:{value:this.TexData1},iTexData8:{value:this.TexData8},iTexData64:{value:this.TexData64},iTexBoundingBox1:{value:this.TexBoundingBox1},iOffset64:{value:this.World.Data64Offset},iUpscalingKernelSize:{value:2},iSunPosition:{value:new Ee(0,0,0)},FOV:{value:110},iShadowExponent:{value:.85},iShadowMultiplier:{value:2.4},iShadowDarkness:{value:.5},iFogFactor:{value:2e-5}},this.TestMaterial=new ba({colorWrite:!1,uniforms:{iCopy:{value:this.Renderer.IntermediateTarget.texture}},vertexShader:"#version 300 es\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin highp vec3 position;\r\n\r\nvoid main(){\r\n  gl_Position = vec4(position, 1.);\r\n}",fragmentShader:"#version 300 es\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform highp usampler2D iCopy;\r\n\r\n//layout(location = 0) out vec4 outFragColor;\r\n//layout(location = 1) out float outHighPrecisionDepth;\r\n\r\nvoid main(){\r\n  //outFragColor = vec4(0., 1., 0., 1.);\r\n  //outHighPrecisionDepth = 0.;\r\n  gl_FragDepth = texelFetch(iCopy, ivec2(gl_FragCoord.xy), 0).r == 0u ? 1. : 0.;\r\n}"}),this.Material=new ba({uniforms:{...this.Uniforms},vertexShader:"#version 300 es\r\n#define attribute in\r\n#define varying out\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nattribute highp int info;\r\n\r\nvarying vec3 vmvPosition;\r\n\r\nflat varying int vSide;\r\nflat varying vec3 vModelOffset;\r\nflat varying vec3 vModelScale;\r\n\r\nflat varying int vLocation8;\r\nflat varying int vShouldBeDiscarded;\r\nflat varying uint vBound;\r\nflat varying ivec3 vSampleLocation;\r\nflat varying uint vDepth;\r\n\r\nflat varying int vCoordinate64;\r\nflat varying int vCoordinate8;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 modelMatrix;\r\nuniform mat3 normalMatrix;\r\n\r\n\r\nuniform lowp usampler3D iTexData1;\r\nuniform lowp usampler3D iTexData8;\r\nuniform lowp usampler3D iTexData64;\r\nuniform mediump usampler3D iTexType1;\r\nuniform highp usampler3D iTexInfo8;\r\nuniform highp usampler3D iTexInfo64;\r\nuniform highp usampler3D iTexBoundingBox1;\r\nuniform ivec3 iOffset64[8];\r\n\r\n\r\n\r\nuint GetInfo64(ivec3 RayPosFloor, uint Depth){\r\n  ivec3 Position = RayPosFloor.zyx - iOffset64[Depth].zyx;\r\n  if(Position.x < 0 || Position.y < 0 || Position.z < 0 || Position.x > 7 || Position.y > 7 || Position.z > 7) return 0xffffffffu;\r\n  Position.z += int(Depth) * 8; //Select correct LOD level\r\n  return texelFetch(iTexInfo64, Position, 0).r;\r\n}\r\nint GetLocation64(ivec3 RayPosFloor, uint Depth){\r\n  ivec3 Position = RayPosFloor.zyx - iOffset64[Depth].zyx;\r\n\r\n  uint Info64 = GetInfo64(RayPosFloor, Depth);\r\n  if(Info64 == 0xffffffffu) return -1;\r\n  if(((Info64 >> 29) & 1u) == 0u) return -1;\r\n  else return int(Info64 & 0x0fffffffu);\r\n}\r\nuint GetInfo8(int Location64, ivec3 RayPosFloor){\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos8XYZ = ((Location64 & 7) << 6) | (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return texelFetch(iTexInfo8, ivec3(ModRayPosFloor.z, Pos8XYZ, Location64 >> 3), 0).r;\r\n}\r\nint GetLocation8(int Location64, ivec3 RayPosFloor){\r\n  return int(GetInfo8(Location64, RayPosFloor) & 0x0fffffffu);\r\n}\r\nint GetType1(int Location8, ivec3 RayPosFloor){\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos1XY = (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return int(texelFetch(iTexType1, ivec3((Pos1XY << 3) | ModRayPosFloor.z, Location8 & 511, Location8 >> 9), 0).r);\r\n}\r\nbool IsEmpty64(ivec3 RayPosFloor, uint Depth){\r\n  ivec3 Position = RayPosFloor.zyx - iOffset64[Depth].zyx;\r\n  if(Position.x < 0 || Position.y < 0 || Position.z < 0 || Position.x > 7 || Position.y > 7 || Position.z > 7) return false;\r\n  Position.z += int(Depth * 8u);\r\n  uint Info64 = texelFetch(iTexInfo64, Position, 0).r;\r\n  return (Info64 >> 31) == 1u;\r\n}\r\nbool IsEmpty8(int Location64, ivec3 RayPosFloor){\r\n  return texelFetch(iTexData8, ivec3(0), 0).r == 0u;\r\n}\r\nbool IsEmpty1(int Location8, ivec3 RayPosFloor){\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos1XY = (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return ((texelFetch(iTexData1, ivec3(Pos1XY, Location8 & 511, Location8 >> 9), 0).r >> ModRayPosFloor.z) & 1u) == 1u;\r\n}\r\n\r\nvoid main(){\r\n  vModelOffset = modelMatrix[3].xyz;\r\n  vModelScale = vec3(modelMatrix[0][0], modelMatrix[1][1], modelMatrix[2][2]);\r\n  uint Depth = uint(int(log2(vModelScale.x)));\r\n  vDepth = Depth;\r\n  ivec3 Coordinates = ivec3(floor(vModelOffset / vModelScale)) >> 6;\r\n\r\n  int LocalIndex8 = info & 511;\r\n  ivec3 Data8Coordinate = ivec3(((LocalIndex8 >> 6) & 7), ((LocalIndex8 >> 3) & 7), LocalIndex8 & 7);\r\n\r\n  vShouldBeDiscarded = 0;\r\n  if(Depth != 0u){\r\n    ivec3 LowerDepthCoordinates = Coordinates * 2 + (Data8Coordinate >> 2);\r\n    uint LowerDepthInfo64 = GetInfo64(LowerDepthCoordinates, Depth - 1u);\r\n    if(LowerDepthInfo64 != 0xffffffffu && (((LowerDepthInfo64 >> 28) & 3u) == 3u || (((LowerDepthInfo64 >> 31) & 1u) == 1u && ((LowerDepthInfo64 >> 29) & 1u) == 1u))){ //Is not out of bounds and has a mesh and is fully uploaded\r\n      vShouldBeDiscarded = 1;\r\n      return;\r\n    }\r\n  }\r\n\r\n  vec3 Position = vec3((Data8Coordinate.x << 3) + ((info >> 17) & 15), (Data8Coordinate.y << 3) + ((info >> 13) & 15), (Data8Coordinate.z << 3) + ((info >> 9) & 15));\r\n\r\n  vSide = ((info >> 21) & 7) - 3;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(Position, 1.);\r\n\r\n  vmvPosition = Position;\r\n  switch(abs(vSide)){\r\n    case 1: vmvPosition.x += 1e-3 * float(sign(vSide)); break;\r\n    case 2: vmvPosition.y += 1e-3 * float(sign(vSide)); break;\r\n    case 3: vmvPosition.z += 1e-3 * float(sign(vSide)); break;\r\n  }\r\n\r\n  int Location64 = GetLocation64(Coordinates, Depth);\r\n\r\n  ivec3 SampleCoordinate8 = ivec3(LocalIndex8 & 7, ((Location64 & 7) << 6) | (LocalIndex8 >> 3), Location64 >> 3);\r\n  vBound = texelFetch(iTexBoundingBox1, SampleCoordinate8, 0).r;\r\n\r\n  int Location8 = int(texelFetch(iTexInfo8, SampleCoordinate8, 0).r & 0x0fffffffu);\r\n  vLocation8 = Location8;\r\n  vSampleLocation = ivec3(0, vLocation8 & 511, vLocation8 >> 9);\r\n\r\n  vCoordinate8 = LocalIndex8;\r\n  ivec3 Temp = Coordinates.zyx - iOffset64[Depth].zyx;\r\n  vCoordinate64 = (Temp.x << 6) | (Temp.y << 3) | Temp.z;\r\n}",fragmentShader:"#version 300 es\r\n#define varying in\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nlayout(location = 0) out uvec2 outPositionData;\r\n\r\nvarying vec3 vmvPosition;\r\n\r\nflat varying int vSide;\r\nflat varying vec3 vModelOffset;\r\nflat varying vec3 vModelScale;\r\n\r\nflat varying int vLocation8;\r\nflat varying int vShouldBeDiscarded;\r\nflat varying uint vBound;\r\nflat varying ivec3 vSampleLocation;\r\nflat varying uint vDepth;\r\n\r\nflat varying int vCoordinate64;\r\nflat varying int vCoordinate8;\r\n\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform vec3 iPosition;\r\nuniform vec3 iRotation;\r\nuniform float FOV;\r\nuniform lowp usampler3D iTexData1;\r\nuniform lowp usampler3D iTexData8;\r\nuniform lowp usampler3D iTexData64;\r\nuniform mediump usampler3D iTexType1;\r\nuniform highp usampler3D iTexInfo8;\r\nuniform highp usampler3D iTexInfo64;\r\nuniform highp usampler3D iTexBoundingBox1;\r\nuniform ivec3 iOffset64[8];\r\nuniform float iUpscalingKernelSize;\r\nuniform vec3 iSunPosition;\r\nuniform float iShadowExponent;\r\nuniform float iShadowMultiplier;\r\nuniform float iShadowDarkness;\r\nuniform float iFogFactor;\r\n\r\n\r\nivec3 SampleLocation = ivec3(0);\r\nbool IsEmpty1(uvec3 RayPosFloor){\r\n  SampleLocation.x = int((RayPosFloor.x << 3) | RayPosFloor.y);\r\n  return ((texelFetch(iTexData1, SampleLocation, 0).r >> RayPosFloor.z) & 1u) == 1u;\r\n}\r\n\r\nstruct RayTraceResult{\r\n  bvec3 Mask;\r\n  uvec3 RayPosFloor;\r\n  vec3 ExactPosition;\r\n};\r\n\r\nRayTraceResult Raytrace8(inout vec3 TrueRayOrigin, inout vec3 RayDirection){\r\n  vec3 RayOrigin = mod(TrueRayOrigin, 8.);\r\n  vec3 RayOriginOffset = TrueRayOrigin - RayOrigin;\r\n\r\n  vec3 RayInverse = 1. / RayDirection;\r\n  vec3 RaySign = sign(RayDirection);//vec3(RayDirection.x > 0. ? 1. : -1., RayDirection.y > 0. ? 1. : -1., RayDirection.z > 0. ? 1. : -1.);\r\n  vec3 RayPosFloor = floor(RayOrigin);\r\n  vec3 SideDistance = (RayPosFloor - RayOrigin + .5 + RaySign * .5) * RayInverse;\r\n  bvec3 Mask;\r\n  vec3 FloatMask;\r\n  bool HitVoxel = false;\r\n\r\n  vec3 MinBound = vec3((vBound >> 15u) & 7u, (vBound >> 12u) & 7u, (vBound >> 9u) & 7u);\r\n  vec3 MaxBound = vec3((vBound >> 6u) & 7u, (vBound >> 3u) & 7u, vBound & 7u);\r\n\r\n  for(int i = 0; i < 25; ++i){\r\n    if(any(greaterThan(RayPosFloor, MaxBound)) || any(lessThan(RayPosFloor, MinBound))) discard;\r\n    if(!IsEmpty1(uvec3(RayPosFloor))){\r\n      HitVoxel = true;\r\n      break;\r\n    }\r\n    FloatMask = step(SideDistance, min(SideDistance.yxy, SideDistance.zzx));\r\n    SideDistance += FloatMask * RaySign * RayInverse;\r\n    RayPosFloor += FloatMask * RaySign;\r\n  }\r\n\r\n  Mask = bvec3(FloatMask);\r\n\r\n  if(!HitVoxel) discard;\r\n  vec3 ExactPosition = RayDirection * length(vec3(Mask) * (SideDistance - abs(RayInverse))) + TrueRayOrigin;\r\n\r\n  if(!any(Mask)){\r\n    switch(abs(vSide)){\r\n      case 1: Mask.x = true; break;\r\n      case 2: Mask.y = true; break;\r\n      case 3: Mask.z = true; break;\r\n    }\r\n  }\r\n\r\n  return RayTraceResult(\r\n  Mask,\r\n  uvec3(RayPosFloor),\r\n  ExactPosition\r\n  );\r\n}\r\n\r\nvoid main(){\r\n  if(vShouldBeDiscarded == 1) discard;\r\n\r\n  SampleLocation = vSampleLocation;\r\n\r\n  vec3 RayOrigin = vmvPosition;\r\n  vec3 RayDirection = normalize(RayOrigin - (iPosition - vModelOffset) / vModelScale);\r\n\r\n\r\n  RayTraceResult Result = Raytrace8(RayOrigin, RayDirection);\r\n\r\n\r\n  ivec3 ExactFractPosition = ivec3(fract(Result.ExactPosition) * 256.);\r\n\r\n  ExactFractPosition *= ivec3(not(Result.Mask)); //Set the mask index to zero to avoid wrong rounding between the values 0 and 255\r\n  if(dot(sign(RayDirection * vec3(Result.Mask)), vec3(1.)) < 0.) ExactFractPosition += 255 * ivec3(Result.Mask); //Set it to 255 if it's the negative side\r\n\r\n  outPositionData = uvec2(\r\n  (vCoordinate64 << 23) | (vCoordinate8 << 14) | (int(vDepth) << 11) | ((Result.Mask.x ? 1 : Result.Mask.y ? 2 : 3) << 9) | int((Result.RayPosFloor.x << 6) | (Result.RayPosFloor.y << 3) | Result.RayPosFloor.z),\r\n  (1 << 30) | (((vCoordinate64 >> 9) & 63) << 24) | (ExactFractPosition.x << 16) | (ExactFractPosition.y << 8) | ExactFractPosition.z\r\n  );\r\n}"}),this.FinalPassMaterial=new Tn({uniforms:{...this.Uniforms,iIntermediatePassData:{value:this.Renderer.IntermediateTarget.texture},iSmallTargetData:{value:this.Renderer.SmallRaytracingTarget.texture},iCloseVoxelsOffset:{value:this.CloseVoxelsOffset},iCloseVoxelsTexture:{value:this.CloseVoxelsTexture},iRenderAmbientOcclusion:{value:!0},iRenderShadows:{value:!0},iRaytracingGridDistance:{value:1}},transparent:!1,blending:1,alphaTest:1,depthTest:!1,depthWrite:!1,vertexShader:"varying vec2 vUv;\r\n\r\nvoid main(){\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 1.);\r\n}",fragmentShader:'varying vec2 vUv;\r\n\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform vec3 iPosition;\r\nuniform vec3 iRotation;\r\nuniform float FOV;\r\nuniform lowp usampler3D iTexData1;\r\nuniform lowp usampler3D iTexData8;\r\nuniform lowp usampler3D iTexData64;\r\nuniform mediump usampler3D iTexType1;\r\nuniform highp usampler3D iTexInfo8;\r\nuniform highp usampler3D iTexInfo64;\r\nuniform highp usampler3D iTexBoundingBox1;\r\nuniform ivec3 iOffset64[8];\r\nuniform float iUpscalingKernelSize;\r\nuniform vec3 iSunPosition;\r\nuniform float iShadowExponent;\r\nuniform float iShadowMultiplier;\r\nuniform float iShadowDarkness;\r\nuniform float iFogFactor;\r\n\r\n\r\nuniform highp usampler2D iIntermediatePassData;\r\nuniform lowp usampler2D iSmallTargetData;\r\nuniform ivec3 iCloseVoxelsOffset;\r\nuniform lowp usampler3D iCloseVoxelsTexture;\r\nuniform bool iRenderAmbientOcclusion;\r\nuniform bool iRenderShadows;\r\nuniform int iRaytracingGridDistance;\r\n\r\nconst float InDegrees = .01745329;\r\nconst float PI = 3.14159;\r\n\r\n\r\nmat3 RotateX(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(1.,0.,0.,\r\n  0., c,-s,\r\n  0., s, c);\r\n}\r\nmat3 RotateY(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, 0., s,\r\n  0., 1.,0.,\r\n  -s, 0., c);\r\n}\r\nmat3 RotateZ(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, s,0.,\r\n  -s, c,0.,\r\n  0.,0.,1.);\r\n}\r\n\r\n\r\nfloat Random(vec4 v){\r\n  return fract(1223.34 * sin(dot(v,vec4(18.111, 13.252, 17.129, 18.842))));\r\n}\r\nfloat Random(vec3 v){\r\n  return fract(1223.34 * sin(dot(v,vec3(18.111, 13.252, 17.129))));\r\n}\r\n\r\nuint GetInfo64(ivec3 RayPosFloor, uint Depth){\r\n  ivec3 Position = RayPosFloor.zyx - iOffset64[Depth].zyx;\r\n  if((Position & 7) != Position) return 0xffffffffu; //Out of bounds\r\n  Position.z += int(Depth) * 8; //Select correct LOD level\r\n  return texelFetch(iTexInfo64, Position, 0).r;\r\n}\r\nint GetLocation64(ivec3 RayPosFloor, uint Depth){\r\n  uint Info64 = GetInfo64(RayPosFloor, Depth);\r\n  if(Info64 == 0xffffffffu || ((Info64 >> 29) & 1u) == 0u) return -1;\r\n  else return int(Info64 & 0x0fffffffu);\r\n}\r\nuint GetInfo8(int Location64, ivec3 RayPosFloor){\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos8XYZ = ((Location64 & 7) << 6) | (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return texelFetch(iTexInfo8, ivec3(ModRayPosFloor.z, Pos8XYZ, Location64 >> 3), 0).r;\r\n}\r\nint GetLocation8(int Location64, ivec3 RayPosFloor){\r\n  return int(GetInfo8(Location64, RayPosFloor) & 0x0fffffffu);\r\n}\r\nint GetType1(int Location8, ivec3 RayPosFloor){\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos1XY = (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return int(texelFetch(iTexType1, ivec3((Pos1XY << 3) | ModRayPosFloor.z, Location8 & 511, Location8 >> 9), 0).r);\r\n}\r\nbool IsEmpty64(ivec3 RayPosFloor, uint Depth){\r\n  ivec3 Position = RayPosFloor.zyx - iOffset64[Depth].zyx;\r\n  if(Position.x < 0 || Position.y < 0 || Position.z < 0 || Position.x > 7 || Position.y > 7 || Position.z > 7) return false;\r\n  Position.z += int(Depth * 8u);\r\n  uint Info64 = texelFetch(iTexInfo64, Position, 0).r;\r\n  return (Info64 >> 31) == 1u;\r\n}\r\nbool IsEmpty8(int Location64, ivec3 RayPosFloor){\r\n  return texelFetch(iTexData8, ivec3(0), 0).r == 0u;\r\n}\r\nbool IsEmpty1(int Location8, ivec3 RayPosFloor){\r\n  //return length(vec3(RayPosFloor) - vec3(4.)) > 3.;\r\n  ivec3 ModRayPosFloor = RayPosFloor & 7;\r\n  int Pos1XY = (ModRayPosFloor.x << 3) | ModRayPosFloor.y;\r\n  return ((texelFetch(iTexData1, ivec3(Pos1XY, Location8 & 511, Location8 >> 9), 0).r >> ModRayPosFloor.z) & 1u) == 1u;\r\n}\r\n\r\nuint GetInfo64NoOffset(ivec3 Position, uint Depth){\r\n  Position.z += int(Depth) * 8; //Select correct LOD level\r\n  return texelFetch(iTexInfo64, Position, 0).r;\r\n}\r\n\r\n\r\n\r\nint GetTypeDirectly2(vec3 RayPosFloor){\r\n  ivec3 DividedRayPosFloor = ivec3(RayPosFloor);\r\n  uint Info64 = GetInfo64(DividedRayPosFloor >> 6, 0u);\r\n  if(((Info64 >> 31) & 1u) == 1u) return 0; //49151\r\n  int Location64 = int(Info64 & 0x0fffffffu);\r\n  uint Info8 = GetInfo8(Location64, DividedRayPosFloor >> 3);\r\n  if(((Info8 >> 31) & 1u) == 1u) return 0; //49151\r\n  return GetType1(int(Info8 & 0x0fffffffu), DividedRayPosFloor);\r\n}\r\nint GetTypeDirectly2(ivec3 RayPosFloor){\r\n  uint Info64 = GetInfo64(RayPosFloor >> 6, 0u);\r\n  if(((Info64 >> 31) & 1u) == 1u) return 0; //49151\r\n  int Location64 = int(Info64 & 0x0fffffffu);\r\n  uint Info8 = GetInfo8(Location64, RayPosFloor >> 3);\r\n  if(((Info8 >> 31) & 1u) == 1u) return 0; //49151\r\n  return GetType1(int(Info8 & 0x0fffffffu), RayPosFloor);\r\n}\r\nint GetTypeDirectly2(uint Depth, ivec3 Position64, ivec3 Position8, ivec3 Position1){\r\n  uint Info64 = GetInfo64NoOffset(Position64, Depth);\r\n  if(((Info64 >> 31) & 1u) == 1u) return 0;\r\n  uint Info8 = GetInfo8(int(Info64 & 0x00ffffffu), Position8);\r\n  if(((Info8 >> 31) & 1u) == 1u) return 0;\r\n  return GetType1(int(Info8 & 0x0fffffffu), Position1);\r\n}\r\nint GetTypeDirectlyWithOffset64(ivec3 Position, uint Depth){\r\n  uint Info64 = GetInfo64NoOffset((Position >> 6).zyx, Depth);\r\n  if(((Info64 >> 31) & 1u) == 1u) return 0;\r\n  uint Info8 = GetInfo8(int(Info64 & 0x00ffffffu), (Position >> 3) & 7);\r\n  if(((Info8 >> 31) & 1u) == 1u) return 0;\r\n  return GetType1(int(Info8 & 0x0fffffffu), Position & 7);\r\n}\r\nbool IsEmptyDirectlyWithOffset64(ivec3 Position, uint Depth){\r\n  uint Info64 = GetInfo64NoOffset((Position >> 6).zyx, Depth);\r\n  if(((Info64 >> 31) & 1u) == 1u) return true;\r\n  uint Info8 = GetInfo8(int(Info64 & 0x00ffffffu), (Position >> 3) & 7);\r\n  if(((Info8 >> 31) & 1u) == 1u) return true;\r\n  return IsEmpty1(int(Info8 & 0x0fffffffu), Position & 7);\r\n}\r\n\r\n\r\nbool IsSolid(ivec3 Coordinate){\r\n  ivec3 ModCoordinate = Coordinate & 7;\r\n  ivec3 Offset = 4 - iCloseVoxelsOffset;\r\n  int x8 = ((Coordinate.x >> 3) + Offset.x);\r\n  int y8 = ((Coordinate.y >> 3) + Offset.y);\r\n  int z8 = ((Coordinate.z >> 3) + Offset.z);\r\n  if(x8 < 0 || x8 > 7 || y8 < 0 || y8 > 7 || z8 < 0 || z8 > 7) return false;\r\n  //if(((x8 | y8 | z8) & 0xfffffff8) != 0) return false;\r\n  return ((texelFetch(iCloseVoxelsTexture, ivec3(ModCoordinate.y, (z8 << 3) | ModCoordinate.x, (x8 << 3) | y8), 0).r >> ModCoordinate.z) & 1u) == 0u;\r\n}\r\n\r\nfloat CalculateAOIntensityFast(ivec3 Position, vec3 FractPosition, bvec3 Mask, uint Depth){\r\n  if(!iRenderAmbientOcclusion) return 1.;\r\n\r\n  vec3 FractRayPosSquared = FractPosition * FractPosition;\r\n  vec3 NFractRayPosSquared = (1. - FractPosition) * (1. - FractPosition);\r\n  vec3 OffsetFractPosition = FractPosition - .5;\r\n  ivec3 FaceSign = ivec3(OffsetFractPosition.x > 0. ? 1 : -1, OffsetFractPosition.y > 0. ? 1 : -1, OffsetFractPosition.z > 0. ? 1 : -1);\r\n\r\n  float Contributions = 1.;\r\n\r\n  if(Mask.x){\r\n    ivec3 RayPosShifted = ivec3(Position.x + FaceSign.x, Position.yz);\r\n    Contributions = float(IsSolid(RayPosShifted));\r\n\r\n    bvec4 NESW = bvec4(\r\n    IsSolid(RayPosShifted + ivec3(0, 1, 0)),\r\n    IsSolid(RayPosShifted + ivec3(0, 0, 1)),\r\n    IsSolid(RayPosShifted + ivec3(0,-1, 0)),\r\n    IsSolid(RayPosShifted + ivec3(0, 0,-1))\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.yz, NFractRayPosSquared.yz) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !any(NESW.xy) && IsSolid(RayPosShifted + ivec3(0, 1, 1)),\r\n    !any(NESW.zy) && IsSolid(RayPosShifted + ivec3(0,-1, 1)),\r\n    !any(NESW.zw) && IsSolid(RayPosShifted + ivec3(0,-1,-1)),\r\n    !any(NESW.xw) && IsSolid(RayPosShifted + ivec3(0, 1,-1))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.yz, NFractRayPosSquared.yz);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n  }\r\n  else if(Mask.y){\r\n    ivec3 RayPosShifted = ivec3(Position.x, Position.y + FaceSign.y, Position.z);\r\n    Contributions = float(IsSolid(RayPosShifted));\r\n\r\n    bvec4 NESW = bvec4(\r\n    IsSolid(RayPosShifted + ivec3( 1, 0, 0)),\r\n    IsSolid(RayPosShifted + ivec3( 0, 0, 1)),\r\n    IsSolid(RayPosShifted + ivec3(-1, 0, 0)),\r\n    IsSolid(RayPosShifted + ivec3( 0, 0,-1))\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.xz, NFractRayPosSquared.xz) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !any(NESW.xy) && IsSolid(RayPosShifted + ivec3( 1, 0, 1)),\r\n    !any(NESW.zy) && IsSolid(RayPosShifted + ivec3(-1, 0, 1)),\r\n    !any(NESW.zw) && IsSolid(RayPosShifted + ivec3(-1, 0,-1)),\r\n    !any(NESW.xw) && IsSolid(RayPosShifted + ivec3( 1, 0,-1))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.xz, NFractRayPosSquared.xz);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n  }\r\n  else if(Mask.z){\r\n    ivec3 RayPosShifted = ivec3(Position.xy, Position.z + FaceSign.z);\r\n    Contributions = float(IsSolid(RayPosShifted));\r\n\r\n    bvec4 NESW = bvec4(\r\n    IsSolid(RayPosShifted + ivec3( 1, 0, 0)),\r\n    IsSolid(RayPosShifted + ivec3( 0, 1, 0)),\r\n    IsSolid(RayPosShifted + ivec3(-1, 0, 0)),\r\n    IsSolid(RayPosShifted + ivec3( 0,-1, 0))\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.xy, NFractRayPosSquared.xy) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !any(NESW.xy) && IsSolid(RayPosShifted + ivec3( 1, 1, 0)),\r\n    !any(NESW.zy) && IsSolid(RayPosShifted + ivec3(-1, 1, 0)),\r\n    !any(NESW.zw) && IsSolid(RayPosShifted + ivec3(-1,-1, 0)),\r\n    !any(NESW.xw) && IsSolid(RayPosShifted + ivec3( 1,-1, 0))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.xy, NFractRayPosSquared.xy);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n  }\r\n\r\n  return 1. - Contributions * .25;\r\n}\r\n\r\nfloat CalculateAOIntensity(ivec3 Position, vec3 FractPosition, bvec3 Mask, uint Depth){\r\n  if(!iRenderAmbientOcclusion) return 1.;\r\n  //The biggest bottleneck to this function are the voxel type lookups since they need to check Data64s and Data8s beforehand.\r\n  //Surprisingly, reusing these when possible (e.g. when Position & 7 is between 1 and 6) doesn\'t seem to improve performance.\r\n\r\n  vec3 FractRayPosSquared = FractPosition * FractPosition;\r\n  vec3 NFractRayPosSquared = (1. - FractPosition) * (1. - FractPosition);\r\n  vec3 OffsetFractPosition = FractPosition - .5;\r\n  ivec3 FaceSign = ivec3(OffsetFractPosition.x > 0. ? 1 : -1, OffsetFractPosition.y > 0. ? 1 : -1, OffsetFractPosition.z > 0. ? 1 : -1);\r\n\r\n  if(Mask.x){\r\n    ivec3 RayPosShifted = ivec3(Position.x + FaceSign.x, Position.yz);\r\n    float Contributions = float(!IsEmptyDirectlyWithOffset64(RayPosShifted, Depth));\r\n\r\n    bvec4 NESW = bvec4(\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0, 1, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0, 0, 1), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0,-1, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0, 0,-1), Depth)\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.yz, NFractRayPosSquared.yz) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !(any(NESW.xy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0, 1, 1), Depth)),\r\n    !(any(NESW.zy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0,-1, 1), Depth)),\r\n    !(any(NESW.zw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0,-1,-1), Depth)),\r\n    !(any(NESW.xw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(0, 1,-1), Depth))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.yz, NFractRayPosSquared.yz);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n\r\n    return 1. - Contributions * .25;\r\n  }\r\n  else if(Mask.y){\r\n    ivec3 RayPosShifted = ivec3(Position.x, Position.y + FaceSign.y, Position.z);\r\n    float Contributions = float(!IsEmptyDirectlyWithOffset64(RayPosShifted, Depth));\r\n\r\n    bvec4 NESW = bvec4(\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1, 0, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 0, 0, 1), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1, 0, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 0, 0,-1), Depth)\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.xz, NFractRayPosSquared.xz) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !(any(NESW.xy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1, 0, 1), Depth)),\r\n    !(any(NESW.zy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1, 0, 1), Depth)),\r\n    !(any(NESW.zw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1, 0,-1), Depth)),\r\n    !(any(NESW.xw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1, 0,-1), Depth))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.xz, NFractRayPosSquared.xz);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n\r\n    return 1. - Contributions * .25;\r\n  }\r\n  else if(Mask.z){\r\n    ivec3 RayPosShifted = ivec3(Position.xy, Position.z + FaceSign.z);\r\n    float Contributions = float(!IsEmptyDirectlyWithOffset64(RayPosShifted, Depth));\r\n\r\n    bvec4 NESW = bvec4(\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1, 0, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 0, 1, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1, 0, 0), Depth),\r\n    !IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 0,-1, 0), Depth)\r\n    );\r\n    Contributions += dot(vec4(FractRayPosSquared.xy, NFractRayPosSquared.xy) * vec4(NESW), vec4(1.));\r\n\r\n    bvec4 NESW2 = bvec4(\r\n    !(any(NESW.xy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1, 1, 0), Depth)),\r\n    !(any(NESW.zy) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1, 1, 0), Depth)),\r\n    !(any(NESW.zw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3(-1,-1, 0), Depth)),\r\n    !(any(NESW.xw) || IsEmptyDirectlyWithOffset64(RayPosShifted + ivec3( 1,-1, 0), Depth))\r\n    );\r\n    vec4 Combined = vec4(FractRayPosSquared.xy, NFractRayPosSquared.xy);\r\n    Contributions += dot(vec4(Combined.xzzx * Combined.yyww) * vec4(NESW2), vec4(1.));\r\n\r\n    return 1. - Contributions * .25;\r\n  }\r\n  return 0.;\r\n}\r\n\r\nfloat CalculateShadowIntensity1(float ShadowIntensity, float CumulativeDistance, int Location8, vec3 RayPosExact, vec3 RayDirection, ivec3 RayDirectionSign, vec3 DeltaDistance){\r\n  ivec3 RayPosFloor = ivec3(floor(RayPosExact));\r\n  vec3 SideDistance = (vec3(RayDirectionSign) * (.5 - fract(RayPosExact)) + .5) * DeltaDistance;\r\n  bvec3 Mask = bvec3(false);\r\n\r\n  float DistancePrior = 0.;\r\n  float DistanceNow = 0.;\r\n\r\n  for(int i = 0; i < 30; ++i){\r\n    if((RayPosFloor & 7) != RayPosFloor) break;\r\n    bool IsSolid = !IsEmpty1(Location8, RayPosFloor);\r\n    if(IsSolid){\r\n      DistancePrior = length(vec3(Mask) * (SideDistance - DeltaDistance));\r\n    }\r\n    Mask = lessThanEqual(SideDistance.xyz, min(SideDistance.yzx, SideDistance.zxy));\r\n    SideDistance = vec3(Mask) * DeltaDistance + SideDistance;\r\n    RayPosFloor = ivec3(vec3(Mask)) * RayDirectionSign + RayPosFloor;\r\n    if(IsSolid){\r\n      DistanceNow = length(vec3(Mask) * (SideDistance - DeltaDistance));\r\n      ShadowIntensity += (DistanceNow - DistancePrior) * iShadowMultiplier / (0.01 + pow(CumulativeDistance + DistancePrior, iShadowExponent));\r\n      if(ShadowIntensity >= 1.) break;\r\n    }\r\n  }\r\n  return ShadowIntensity;\r\n}\r\n\r\nfloat CalculateShadowIntensity8(float ShadowIntensity, float CumulativeDistance, int Location64, vec3 RayPosExact, vec3 RayDirection, ivec3 RayDirectionSign, vec3 DeltaDistance){\r\n  ivec3 RayPosFloor = ivec3(floor(RayPosExact));\r\n  vec3 SideDistance = (vec3(RayDirectionSign) * (.5 - fract(RayPosExact)) + .5) * DeltaDistance;\r\n  bvec3 Mask = bvec3(false);\r\n\r\n  for(int i = 0; i < 30; ++i){\r\n    if((RayPosFloor & 7) != RayPosFloor) break;\r\n    uint Info8 = GetInfo8(Location64, RayPosFloor);\r\n    if((Info8 >> 31) != 1u){\r\n      int Location8 = int(Info8 & 0x0fffffffu);\r\n\r\n      float Distance = length(vec3(Mask) * (SideDistance - DeltaDistance));\r\n      vec3 CurrentRayPosition = RayPosExact + RayDirection * Distance;\r\n      CurrentRayPosition += vec3(Mask) * RayDirection * 1e-3;\r\n\r\n      ShadowIntensity = CalculateShadowIntensity1(ShadowIntensity, CumulativeDistance + Distance * 8., Location8, mod(CurrentRayPosition * 8., 8.), RayDirection, RayDirectionSign, DeltaDistance);\r\n      if(ShadowIntensity >= 1.) break;\r\n    }\r\n    Mask = lessThanEqual(SideDistance.xyz, min(SideDistance.yzx, SideDistance.zxy));\r\n    SideDistance = vec3(Mask) * DeltaDistance + SideDistance;\r\n    RayPosFloor = ivec3(vec3(Mask)) * RayDirectionSign + RayPosFloor;\r\n  }\r\n  return ShadowIntensity;\r\n}\r\n\r\nfloat[8] PowerOfTwo = float[8](1., 2., 4., 8., 16., 32., 64., 128.);\r\n\r\nfloat CalculateShadowIntensity(ivec3 Position, vec3 FractPosition, bvec3 _Mask, uint Depth){\r\n  if(!iRenderShadows) return 1.;\r\n  float ShadowIntensity = 0.;\r\n\r\n  vec3 RayDirection = normalize(iSunPosition * vec3(1., -1., 1.));\r\n\r\n  FractPosition += vec3(_Mask) * RayDirection * 1e-1;\r\n  Position = Position + ivec3(floor(FractPosition));\r\n  FractPosition = fract(FractPosition);\r\n\r\n\r\n  ivec3 RayPosFloor = Position >> 6;\r\n  vec3 RayPosFract = (vec3(Position & 63) + FractPosition) / 64.;\r\n  ivec3 RayDirectionSign = ivec3(RayDirection.x > 0. ? 1 : -1, RayDirection.y > 0. ? 1 : -1, RayDirection.z > 0. ? 1 : -1);\r\n\r\n  vec3 DeltaDistance = abs(1. / RayDirection);\r\n  vec3 SideDistance = (vec3(RayDirectionSign) * (.5 - RayPosFract) + .5) * DeltaDistance;\r\n\r\n  bvec3 Mask = bvec3(false);\r\n  float Distance = 0.;\r\n\r\n  for(int i = 0; i < 64; ++i){\r\n    if((RayPosFloor & 7) != RayPosFloor || Distance >= 400.) break;\r\n\r\n    uint Info64 = GetInfo64NoOffset(RayPosFloor.zyx, Depth);\r\n\r\n    if((Info64 >> 31) != 1u && ((Info64 >> 29) & 1u) == 1u){ //Not empty and completely loaded\r\n      int Location64 = int(Info64 & 0x00ffffffu);\r\n\r\n      Distance = length(vec3(Mask) * (SideDistance - DeltaDistance));// * PowerOfTwo[Depth];\r\n      vec3 CurrentRayPosition = RayPosFract + RayDirection * Distance;\r\n      CurrentRayPosition += vec3(Mask) * RayDirection * 1e-3;\r\n\r\n      ShadowIntensity = CalculateShadowIntensity8(ShadowIntensity, Distance * 64., Location64, mod(CurrentRayPosition * 8., 8.), RayDirection, RayDirectionSign, DeltaDistance);\r\n      if(ShadowIntensity >= 1.) break;\r\n    }\r\n    Mask = lessThanEqual(SideDistance.xyz, min(SideDistance.yzx, SideDistance.zxy));\r\n    SideDistance = vec3(Mask) * DeltaDistance + SideDistance;\r\n    RayPosFloor = ivec3(vec3(Mask)) * RayDirectionSign + RayPosFloor;\r\n  }\r\n\r\n  return 1. - iShadowDarkness * min(ShadowIntensity, 1.);\r\n}\r\n\r\nvec3[10] Colours = vec3[10](\r\nvec3(255./255., 0./255., 255./255.),\r\nvec3(70./255., 109./255., 53./255.),\r\nvec3(.45, .45, .45),\r\nvec3(.28, .28, .28),\r\nvec3(30./255., 153./255., 163./255.),\r\nvec3(1., 0., 0.),\r\nvec3(46./255., 73./255., 46./255.),\r\nvec3(59./255., 38./255., 16./255.),\r\nvec3(72./255., 104./255., 28./255.),\r\nvec3(100./255., 71./255., 38./255.)\r\n);\r\n\r\n// For random functions:\r\n// The MIT License\r\n// Copyright (c) 2017 Inigo Quilez\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nfloat Random(ivec2 Input){\r\n  Input = 1103515245 * ((Input >> 1u) ^ (Input.yx));\r\n  uint n = 1103515245u * uint((Input.x) ^ (Input.y >> 1u));\r\n  return float(n) * (1.0/float(0xffffffffu));\r\n}\r\nfloat Random(ivec3 Input){\r\n  Input = 1103515245 * ((Input.xzy >> 1u) ^ (Input.yxz) ^ (Input.zxy >> 2u));\r\n  uint n = 1103515245u * uint((Input.x) ^ (Input.y >> 1u) ^ (Input.z >> 2u));\r\n  return float(n) * (1.0/float(0xffffffffu));\r\n}\r\n\r\nivec3 PreviousRayPosDiff;\r\nivec3 PreviousCoordinate = ivec3(2147483647);\r\nbvec3 TypeSides = bvec3(false);\r\n\r\nbool GetRoughnessMap2(ivec3 RayPosFloor, int Type, float Distance, ivec3 Coordinate){\r\n  float Unloading = pow(clamp((Distance - 5.) / 12., 0., 1.), 2.);\r\n  ivec3 Intermediate = RayPosFloor - 31 - (RayPosFloor >> 5); // The offset is needed to make the range [0, 64] instead of [0, 63], which makes it easier to determine the distance from center\r\n  bvec3 RayPosSides = greaterThanEqual(abs(Intermediate), ivec3(28));\r\n  ivec3 RayPosDiff = ivec3(sign(Intermediate)) * ivec3(RayPosSides);\r\n  ivec3 RayPosScaled = RayPosFloor >> 2;\r\n\r\n  if(all(not(RayPosSides))) return true; //In the middle\r\n\r\n  if((PreviousRayPosDiff != RayPosDiff || PreviousCoordinate != Coordinate)){\r\n    TypeSides.x = RayPosDiff.x == 0 || !IsSolid(Coordinate + ivec3(RayPosDiff.x, 0, 0));\r\n    TypeSides.y = RayPosDiff.y == 0 || !IsSolid(Coordinate + ivec3(0, RayPosDiff.y, 0));\r\n    TypeSides.z = RayPosDiff.z == 0 || !IsSolid(Coordinate + ivec3(0, 0, RayPosDiff.z));\r\n    PreviousRayPosDiff = RayPosDiff;\r\n    PreviousCoordinate = Coordinate;\r\n  }\r\n\r\n  if(dot(vec3(RayPosSides), vec3(1.)) > 1.){\r\n    RayPosSides = bvec3(RayPosSides.x && TypeSides.x, RayPosSides.y && TypeSides.y, RayPosSides.z && TypeSides.z);\r\n    //return true;\r\n  }\r\n  if(all(not(RayPosSides))) return true; //Not visible (between blocks)\r\n\r\n  vec3 Depth = vec3(32 - abs(Intermediate));\r\n  ivec3 NotRayPosSides = ivec3(not(RayPosSides));\r\n  ivec3 RandomOffset = Coordinate << 6;\r\n\r\n  bool Result = true;\r\n  if(RayPosSides.x){\r\n    ivec3 RayPosModified = RayPosScaled;\r\n    RayPosModified.x = RayPosFloor.x;\r\n    float RandomNum = Random(RayPosModified * NotRayPosSides + RandomOffset);\r\n    Result = RandomNum - Unloading < Depth.x / 4.;\r\n  }\r\n  if(!Result) return Result;\r\n  if(RayPosSides.y){\r\n    ivec3 RayPosModified = RayPosScaled;\r\n    RayPosModified.y = RayPosFloor.y;\r\n    float RandomNum = Random(RayPosModified * NotRayPosSides + RandomOffset);\r\n    Result = RandomNum - Unloading < Depth.y / 4.;\r\n  }\r\n  if(!Result) return Result;\r\n  if(RayPosSides.z){\r\n    ivec3 RayPosModified = RayPosScaled;\r\n    RayPosModified.z = RayPosFloor.z;\r\n    float RandomNum = Random(RayPosModified * NotRayPosSides + RandomOffset);\r\n    Result = RandomNum - Unloading < Depth.z / 4.;\r\n  }\r\n\r\n  return Result;\r\n}\r\n\r\nstruct DetailedRaytraceResult{\r\n  bool HitVoxel;\r\n  float Distance;\r\n  ivec3 RayPosFloor;\r\n  vec3 ExactRayPosition;\r\n  bvec3 Mask;\r\n  bvec3 Mask1;\r\n};\r\n\r\nstruct SmallRaytraceResult{\r\n  vec3 FloatMask;\r\n  bool HitVoxel;\r\n};\r\n\r\nSmallRaytraceResult RaytraceSmaller(vec3 RayOrigin, vec3 RayDirection, vec3 FloatMask, vec3 Coordinate, float Distance, vec3 RaySign, vec3 RayInverse){\r\n  vec3 RayPosFloor = floor(RayOrigin);\r\n\r\n  vec3 SideDistance = (RayPosFloor - RayOrigin + .5 + RaySign * .5) * RayInverse;\r\n\r\n  for(int i = 0; i < 200; ++i){\r\n    if(mod(RayPosFloor, 64.) != RayPosFloor) return SmallRaytraceResult(FloatMask, false);\r\n    if(GetRoughnessMap2(ivec3(RayPosFloor), 1, Distance, ivec3(Coordinate))){\r\n      return SmallRaytraceResult(FloatMask, true);\r\n    }\r\n    FloatMask = step(SideDistance, min(SideDistance.yxy, SideDistance.zzx));\r\n    SideDistance += FloatMask * RaySign * RayInverse;\r\n    RayPosFloor += FloatMask * RaySign;\r\n  }\r\n  return SmallRaytraceResult(FloatMask, false);\r\n}\r\n\r\nDetailedRaytraceResult RaytraceClose(vec3 RayOrigin, vec3 RayDirection){\r\n  vec3 RayInverse = 1. / RayDirection;\r\n  vec3 RaySign = sign(RayDirection);//vec3(RayDirection.x > 0. ? 1. : -1., RayDirection.y > 0. ? 1. : -1., RayDirection.z > 0. ? 1. : -1.);\r\n  vec3 RayPosFloor = floor(RayOrigin);\r\n  vec3 SideDistance = (RayPosFloor - RayOrigin + .5 + RaySign * .5) * RayInverse;\r\n  vec3 FloatMask;\r\n  vec3 FloatMask1;\r\n  bool HitVoxel = false;\r\n  float Distance;\r\n  vec3 ExactFractRayPosition;\r\n  vec3 RayOriginFract = mod(RayOrigin, 64.);\r\n\r\n  for(int i = 0; i < 25; ++i){\r\n    bool IsSolid = IsSolid(ivec3(RayPosFloor));\r\n    if(IsSolid){\r\n      Distance = length(abs(FloatMask) * (SideDistance - abs(RayInverse)));\r\n      if(Distance > 14.) break;\r\n      ExactFractRayPosition = RayOriginFract + RayDirection * Distance;\r\n      ExactFractRayPosition += abs(FloatMask) * vec3(RaySign) * 1e-4;\r\n\r\n      SmallRaytraceResult Result = RaytraceSmaller(mod(ExactFractRayPosition * 64., 64.), RayDirection, FloatMask, RayPosFloor, Distance, RaySign, RayInverse);\r\n\r\n      HitVoxel = Result.HitVoxel;\r\n      if(HitVoxel){\r\n        FloatMask = Result.FloatMask;\r\n        break;\r\n      }\r\n    }\r\n    FloatMask = step(SideDistance, min(SideDistance.yxy, SideDistance.zzx));\r\n    SideDistance += FloatMask * RaySign * RayInverse;\r\n    RayPosFloor += FloatMask * RaySign;\r\n    if(!IsSolid) FloatMask1 = FloatMask;\r\n  }\r\n\r\n  return DetailedRaytraceResult(\r\n  HitVoxel,\r\n  Distance,\r\n  ivec3(RayPosFloor),\r\n  ExactFractRayPosition,\r\n  bvec3(FloatMask),\r\n  bvec3(FloatMask1)\r\n  );\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\r\n  vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\r\n  uv.x *= -1.;\r\n  vec3 RayOrigin = iPosition;\r\n  vec3 RayDirection = (normalize(vec3(uv, 1. / tan(FOV / 2.))) * RotateX(-iRotation.x) * RotateY(iRotation.y - PI));\r\n  RayDirection += vec3(equal(RayDirection, vec3(0.))) * 1e-3; //When RayDirection is 0 NaNs get created and the perf tanks\r\n  ivec3 RayDirectionSign = ivec3(RayDirection.x > 0. ? 1 : -1, RayDirection.y > 0. ? 1 : -1, RayDirection.z > 0. ? 1 : -1);\r\n\r\n  fragColor.w = 1.;\r\n\r\n  bool ShouldBeTraced = false;\r\n  ivec2 SmallTextureCoordinate = ivec2(floor(gl_FragCoord.xy / vec2(iRaytracingGridDistance)) + 1.);\r\n\r\n  for(int dx = -1; dx < 2; ++dx) for(int dy = -1; dy < 2; ++dy){\r\n    ShouldBeTraced = ShouldBeTraced || texelFetch(iSmallTargetData, SmallTextureCoordinate + ivec2(dx, dy), 0).r != 0u;\r\n    if(ShouldBeTraced) break;\r\n  }\r\n\r\n  DetailedRaytraceResult NearTrace;\r\n  if(ShouldBeTraced) NearTrace = RaytraceClose(RayOrigin, RayDirection);\r\n\r\n  if(NearTrace.HitVoxel){\r\n    float Weighting = pow(clamp(NearTrace.Distance / 14., 0., 1.), 1.4);\r\n    int Type = GetTypeDirectly2(NearTrace.RayPosFloor);\r\n    vec3 Colour = Colours[Type];\r\n\r\n    Colour.xyz *= 1.075 - Random(ivec3(floor(mod(NearTrace.ExactRayPosition, 64.) * 16.))) * .15;\r\n    Colour.xyz *= length((vec3(NearTrace.Mask1) * Weighting + vec3(NearTrace.Mask) * (1. - Weighting)) * vec3(.75, RayDirectionSign.y < 0 ? 1. : .625, .5));\r\n\r\n    fragColor.xyz = Colour;\r\n    fragColor.xyz *= CalculateAOIntensityFast(NearTrace.RayPosFloor, fract(NearTrace.ExactRayPosition), NearTrace.Mask1, 0u);\r\n    fragColor.xyz *= CalculateShadowIntensity(NearTrace.RayPosFloor - (iOffset64[0] << 6u), fract(NearTrace.ExactRayPosition), NearTrace.Mask1, 0u);\r\n  } else{\r\n    uvec2 Data = texelFetch(iIntermediatePassData, ivec2(fragCoord), 0).rg;\r\n    uint Data1 = Data.r;\r\n    uint Data2 = Data.g;\r\n\r\n    if(Data1 == 0u) discard;\r\n\r\n    uint MaskBits = (Data1 >> 9) & 3u;\r\n    ivec3 Position1 = ivec3(\r\n    (Data1 >> 6) & 7u,\r\n    (Data1 >> 3) & 7u,\r\n    Data1 & 7u\r\n    );\r\n    ivec3 Position8 = ivec3(\r\n    (Data1 >> 20) & 7u,\r\n    (Data1 >> 17) & 7u,\r\n    (Data1 >> 14) & 7u\r\n    );\r\n    uint Depth = (Data1 >> 11) & 7u;\r\n    ivec3 Coordinate64 = ivec3( //This has reversed z and x\r\n    (Data1 >> 29) & 7u,\r\n    (Data1 >> 26) & 7u,\r\n    (Data1 >> 23) & 7u\r\n    );\r\n    ivec3 Position = (Coordinate64.zyx << 6) | (Position8 << 3) | Position1; //This has normal z and x\r\n    vec3 FractPosition = vec3(\r\n    (Data2 >> 16) & 0xffu,\r\n    (Data2 >> 8) & 0xffu,\r\n    Data2 & 0xffu\r\n    ) / 256.;\r\n\r\n\r\n    ivec3 PlayerPosition = (ivec3(floor(iPosition)) >> Depth) - (iOffset64[Depth] << 6u);\r\n    float Distance = length(vec3((Position - PlayerPosition) << Depth));\r\n\r\n    bvec3 Mask = bvec3(MaskBits == 1u, MaskBits == 2u, MaskBits == 3u);\r\n    float MaskContribution = length(vec3(Mask) * vec3(.75, sign(RayDirection.y) < 0. ? 1. : .625, .5));\r\n\r\n    int Type = GetTypeDirectlyWithOffset64(Position, Depth);\r\n\r\n    fragColor = vec4(Colours[Type] * MaskContribution, 1.);\r\n    fragColor.xyz *= 1.075 - Random(vec4(Position & 63, 0) + vec4(floor(FractPosition * 16.) / 16., 0.)) * .15;\r\n    fragColor.xyz *= CalculateAOIntensity(Position, FractPosition, Mask, Depth);\r\n    fragColor.xyz *= CalculateShadowIntensity(Position, FractPosition, Mask, Depth);\r\n\r\n    vec3 FogEffect = pow(vec3(2.71), vec3(-iFogFactor * Distance) * vec3(1., 2., 3.));\r\n    fragColor.rgb = FogEffect * fragColor.rgb + (1. - FogEffect);\r\n  }\r\n}\r\n\r\n\r\nvoid main(){\r\n  mainImage(gl_FragColor, vUv * iResolution.xy);\r\n}'}),this.OutputPassMaterial=new Tn({uniforms:{...this.Uniforms,iProcessedWorldTexture:{value:this.Renderer.ProcessedWorldTarget.texture},iBackgroundTexture:{value:this.Renderer.BackgroundTarget.texture}},transparent:!1,blending:1,alphaTest:1,depthTest:!1,depthWrite:!1,vertexShader:"varying vec2 vUv;\r\n\r\nvoid main(){\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 1.);\r\n}",fragmentShader:"varying vec2 vUv;\r\n\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform vec3 iPosition;\r\nuniform vec3 iRotation;\r\nuniform float FOV;\r\nuniform lowp usampler3D iTexData1;\r\nuniform lowp usampler3D iTexData8;\r\nuniform lowp usampler3D iTexData64;\r\nuniform mediump usampler3D iTexType1;\r\nuniform highp usampler3D iTexInfo8;\r\nuniform highp usampler3D iTexInfo64;\r\nuniform highp usampler3D iTexBoundingBox1;\r\nuniform ivec3 iOffset64[8];\r\nuniform float iUpscalingKernelSize;\r\nuniform vec3 iSunPosition;\r\nuniform float iShadowExponent;\r\nuniform float iShadowMultiplier;\r\nuniform float iShadowDarkness;\r\nuniform float iFogFactor;\r\n\r\nuniform lowp sampler2D iProcessedWorldTexture;\r\nuniform lowp sampler2D iBackgroundTexture;\r\n\r\nmat3 RotateX(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(1.,0.,0.,\r\n  0., c,-s,\r\n  0., s, c);\r\n}\r\nmat3 RotateY(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, 0., s,\r\n  0., 1.,0.,\r\n  -s, 0., c);\r\n}\r\nmat3 RotateZ(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, s,0.,\r\n  -s, c,0.,\r\n  0.,0.,1.);\r\n}\r\n\r\nconst float InDegrees = .01745329;\r\nconst float PI = 3.14159;\r\n\r\nvoid main(){\r\n  vec2 uv = (gl_FragCoord.xy * 2. - iResolution.xy) / iResolution.y;\r\n  uv.x *= -1.;\r\n  vec3 RayOrigin = vec3(iPosition.x, iPosition.y, iPosition.z);\r\n  vec3 RayDirection = (normalize(vec3(uv, 1. / tan(FOV / 2.))) * RotateX(-iRotation.x) * RotateY(iRotation.y - PI));\r\n\r\n  vec4 Colour = texelFetch(iProcessedWorldTexture, ivec2(gl_FragCoord.xy), 0);\r\n\r\n  bool Combined = false;\r\n  //Fix mesh holes\r\n  if(Colour.a == 0.){\r\n    vec4 ColourP0 = texelFetch(iProcessedWorldTexture, ivec2(gl_FragCoord.xy) + ivec2(0, 1), 0);\r\n    vec4 Colour0P = texelFetch(iProcessedWorldTexture, ivec2(gl_FragCoord.xy) + ivec2(1, 0), 0);\r\n    vec4 ColourM0 = texelFetch(iProcessedWorldTexture, ivec2(gl_FragCoord.xy) - ivec2(0, 1), 0);\r\n    vec4 Colour0M = texelFetch(iProcessedWorldTexture, ivec2(gl_FragCoord.xy) - ivec2(1, 0), 0);\r\n    vec4 CombinedColour = (ColourP0 + Colour0P + ColourM0 + Colour0M) / 4.;\r\n    if(CombinedColour.a >= .5){\r\n      Colour = CombinedColour;\r\n      Combined = true;\r\n    }\r\n  }\r\n\r\n  if(Colour.a != 1.) Colour = vec4(mix(Colour.xyz, texture(iBackgroundTexture, gl_FragCoord.xy / iResolution).xyz, 1. - Colour.a), 1.);\r\n\r\n  gl_FragColor = Colour;\r\n}"}),this.SmallTargetMaterial=new ba({uniforms:{...this.Uniforms,iCloseVoxelsOffset:{value:this.CloseVoxelsOffset},iCloseVoxelsTexture:{value:this.CloseVoxelsTexture},iRaytracingGridDistance:{value:1}},vertexShader:"#version 300 es\r\n#define attribute in\r\n#define varying out\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nattribute highp vec3 position;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 modelMatrix;\r\nuniform mat3 normalMatrix;\r\n\r\nvoid main(){\r\n  gl_Position = vec4(position, 1.);\r\n}",fragmentShader:"#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nlayout(location = 0) out uint IsRequired;\r\n\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform vec3 iPosition;\r\nuniform vec3 iRotation;\r\nuniform float FOV;\r\nuniform lowp usampler3D iTexData1;\r\nuniform lowp usampler3D iTexData8;\r\nuniform lowp usampler3D iTexData64;\r\nuniform mediump usampler3D iTexType1;\r\nuniform highp usampler3D iTexInfo8;\r\nuniform highp usampler3D iTexInfo64;\r\nuniform highp usampler3D iTexBoundingBox1;\r\nuniform ivec3 iOffset64[8];\r\nuniform float iUpscalingKernelSize;\r\nuniform vec3 iSunPosition;\r\nuniform float iShadowExponent;\r\nuniform float iShadowMultiplier;\r\nuniform float iShadowDarkness;\r\nuniform float iFogFactor;\r\n\r\nuniform ivec3 iCloseVoxelsOffset;\r\nuniform lowp usampler3D iCloseVoxelsTexture;\r\nuniform int iRaytracingGridDistance;\r\n\r\nconst float InDegrees = .01745329;\r\nconst float PI = 3.14159;\r\n\r\n\r\nmat3 RotateX(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(1.,0.,0.,\r\n  0., c,-s,\r\n  0., s, c);\r\n}\r\nmat3 RotateY(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, 0., s,\r\n  0., 1.,0.,\r\n  -s, 0., c);\r\n}\r\nmat3 RotateZ(float a){\r\n  float c = cos(a);\r\n  float s = sin(a);\r\n  return mat3(c, s,0.,\r\n  -s, c,0.,\r\n  0.,0.,1.);\r\n}\r\n\r\nbool IsSolid(ivec3 Coordinate){\r\n  ivec3 ModCoordinate = Coordinate & 7;\r\n  ivec3 Offset = 4 - iCloseVoxelsOffset;\r\n  int x8 = ((Coordinate.x >> 3) + Offset.x);\r\n  int y8 = ((Coordinate.y >> 3) + Offset.y);\r\n  int z8 = ((Coordinate.z >> 3) + Offset.z);\r\n  if(x8 < 0 || x8 > 7 || y8 < 0 || y8 > 7 || z8 < 0 || z8 > 7) return false;\r\n  //if(((x8 | y8 | z8) & 0xfffffff8) != 0) return false;\r\n  return ((texelFetch(iCloseVoxelsTexture, ivec3(ModCoordinate.y, (z8 << 3) | ModCoordinate.x, (x8 << 3) | y8), 0).r >> ModCoordinate.z) & 1u) == 0u;\r\n}\r\n\r\nbool Raytrace8Fast(vec3 RayOrigin, vec3 RayDirection){\r\n  ivec3 RayDirectionSign = ivec3(sign(RayDirection));\r\n  ivec3 RayPosFloor = ivec3(floor(RayOrigin));\r\n\r\n  vec3 DeltaDistance = abs(1. / RayDirection);\r\n  vec3 SideDistance = (vec3(RayDirectionSign) * (.5 - fract(RayOrigin)) + .5) * DeltaDistance;\r\n\r\n  bvec3 Mask = bvec3(false);\r\n  bool HitVoxel = false;\r\n\r\n  for(int i = 0; i < 27; ++i){\r\n    if(IsSolid(RayPosFloor)){\r\n      HitVoxel = true;\r\n      break;\r\n    }\r\n    Mask = lessThanEqual(SideDistance.xyz, min(SideDistance.yzx, SideDistance.zxy));\r\n    SideDistance = vec3(Mask) * DeltaDistance + SideDistance;\r\n    RayPosFloor = ivec3(vec3(Mask)) * RayDirectionSign + RayPosFloor;\r\n  }\r\n\r\n  return HitVoxel && length(vec3(Mask) * (SideDistance - DeltaDistance)) < 14.;\r\n}\r\n\r\nvoid main(){\r\n  vec2 uv = ((gl_FragCoord.xy - 1.) * float(iRaytracingGridDistance) * 2. - iResolution.xy) / iResolution.y;\r\n  uv.x *= -1.;\r\n\r\n  vec3 RayOrigin = iPosition.xyz;\r\n  vec3 RayDirection = (normalize(vec3(uv, 1. / tan(FOV / 2.))) * RotateX(-iRotation.x) * RotateY(iRotation.y - PI));\r\n  RayDirection += vec3(equal(RayDirection, vec3(0.))) * 1e-3; //When RayDirection is 0 NaNs get created and the perf tanks\r\n\r\n  IsRequired = Raytrace8Fast(RayOrigin, RayDirection) ? 1u : 0u;\r\n}"});const n=new _n(new Hn(2,2,1,1),this.FinalPassMaterial);n.frustumCulled=!1,this.FinalPassScene.add(n);const i=new _n(new Hn(2,2,1,1),this.TestMaterial);i.frustumCulled=!1,this.TestPassScene.add(i);const r=new _n(new Hn(2,2,1,1),this.OutputPassMaterial);r.frustumCulled=!1,this.OutputPassScene.add(r);const a=new _n(new Hn(2,2,1,1),this.SmallTargetMaterial);a.frustumCulled=!1,this.SmallTargetScene.add(a),this.Renderer.Events.AddEventListener("Resize",function e(){const t=Number.parseFloat(this.Renderer.Camera.fov),n=this.Renderer.GetBlockWidthFrom19m(t,window.innerHeight*this.Renderer.ImageScale);return this.SmallTargetMaterial.uniforms.iRaytracingGridDistance.value=n,this.FinalPassMaterial.uniforms.iRaytracingGridDistance.value=n,this.Renderer.SmallRaytracingTarget.setSize(Math.ceil(window.innerWidth/n*this.Renderer.ImageScale)+2,Math.ceil(window.innerHeight/n*this.Renderer.ImageScale)+2),e.bind(this)}.bind(this)());const o=[],s=new Uint16Array(24576);for(let e=0,t=0;e<4096;e++)s[t++]=4*e,s[t++]=4*e+1,s[t++]=4*e+2,s[t++]=4*e+2,s[t++]=4*e+1,s[t++]=4*e+3;const l=new qt(s,1);Application.Main.WorkerLoadingPipelineHandler.Events.AddEventListener("GenerateBoundingGeometry",function(e){if(null===e.Info)return;const t=e.Depth+","+e.RegionX+","+e.RegionY+","+e.RegionZ;if(0===e.Depth){const n=this.Renderer.NearScene.getObjectByName(t);if(n){if(!(n.userData.Time<e.Time))return;this.Renderer.NearScene.remove(n),n.geometry.dispose()}}else{const n=this.Renderer.FarScene.getObjectByName(t);if(n){if(!(n.userData.Time<e.Time))return;this.Renderer.FarScene.remove(n),n.geometry.dispose()}}const n=2**e.Depth,i=new tn;i.setAttribute("info",new Wt(new Int32Array(e.Info),1)),i.setIndex(l),i.setDrawRange(0,e.IndexCount);const r=new _n(i,this.Material);r.matrixAutoUpdate=!1,r.frustumCulled=!0,r.geometry.boundingSphere=new je(new Ee(32,32,32),55.45),o.push({Mesh:r,X:e.RegionX,Y:e.RegionY,Z:e.RegionZ,Scale:n}),0===e.Depth?this.Renderer.NearScene.add(r):this.Renderer.FarScene.add(r),r.name=t,r.userData.Time=e.Time,r.userData.RegionX=e.RegionX,r.userData.RegionY=e.RegionY,r.userData.RegionZ=e.RegionZ,r.userData.Depth=e.Depth,r.position.set(64*e.RegionX*n,64*e.RegionY*n,64*e.RegionZ*n),r.scale.set(n,n,n),r.updateMatrix(!0),r.updateMatrixWorld(!0);const a=e.RegionX-this.World.Data64Offset[3*e.Depth+0],s=e.RegionY-this.World.Data64Offset[3*e.Depth+1],c=e.RegionZ-this.World.Data64Offset[3*e.Depth+2];this.GPUInfo64[e.Depth<<9|a<<6|s<<3|c]|=1<<28}.bind(this));const c=function(e,t){return e.userData.Distance-t.userData.Distance};(function e(){window.setTimeout(e.bind(this),500);const t=Application.Main.Renderer.Camera.position,n=Math.floor(t.x/64),i=Math.floor(t.y/64),r=Math.floor(t.z/64);for(const e of this.Renderer.NearScene.children){const t=e.userData.RegionX,a=e.userData.RegionY,o=e.userData.RegionZ,s=t-this.World.Data64Offset[0],l=a-this.World.Data64Offset[1],c=o-this.World.Data64Offset[2];e.userData.Distance=Math.sqrt((n-t)**2+(i-a)**2+(r-o)**2),(s<0||l<0||c<0||s>7||l>7||c>7)&&(this.Renderer.NearScene.remove(e),e.geometry.dispose())}this.Renderer.NearScene.children.sort(c);for(const e of this.Renderer.FarScene.children){const t=e.userData.RegionX,a=e.userData.RegionY,o=e.userData.RegionZ,s=e.userData.Depth,l=t-this.World.Data64Offset[3*s+0],c=a-this.World.Data64Offset[3*s+1],h=o-this.World.Data64Offset[3*s+2],d=2**s;e.userData.Distance=Math.sqrt((n-t*d)**2+(i-a*d)**2+(r-o*d)**2),(l<0||c<0||h<0||l>7||c>7||h>7)&&(this.Renderer.FarScene.remove(e),e.geometry.dispose());let u=0;for(let e=0;e<2;++e)for(let n=0;n<2;++n)for(let i=0;i<2;++i){let r=2*t+e-this.World.Data64Offset[3*(s-1)+0],l=2*a+n-this.World.Data64Offset[3*(s-1)+1],c=2*o+i-this.World.Data64Offset[3*(s-1)+2];if((7&r)===r&&(7&l)===l&&(7&c)===c){const e=this.GPUInfo64[s-1<<9|r<<6|l<<3|c];(3==(e>>28&3)||1==(e>>31&1)&&1==(e>>29&1))&&u++}}e.visible=8!==u}this.Renderer.FarScene.children.sort(c)}).bind(this)(),function e(){window.setTimeout(e.bind(this),50);for(const e of this.Renderer.FarScene.children){const t=e.userData.RegionX,n=e.userData.RegionY,i=e.userData.RegionZ,r=e.userData.Depth;let a=0;for(let e=0;e<2;++e)for(let o=0;o<2;++o)for(let s=0;s<2;++s){let l=2*t+e-this.World.Data64Offset[3*(r-1)+0],c=2*n+o-this.World.Data64Offset[3*(r-1)+1],h=2*i+s-this.World.Data64Offset[3*(r-1)+2];if(l>=0&&l<7&&c>=0&&c<7&&h>=0&&h<7){const e=this.GPUInfo64[r-1<<9|l<<6|c<<3|h];(3==(e>>28&3)||1==(e>>31&1)&&1==(e>>29&1))&&a++}}e.visible=8!==a}}.bind(this)(),Application.Main.Renderer.Events.AddEventListener("BeforeRender",this.UpdateUniforms.bind(this));const h=new Set;(function e(){Application.Main.Renderer.RequestPreAnimationFrame(e.bind(this));let t=!1;const n=Application.Main.Renderer.Camera.position,i=new Ee(Math.floor(n.x)>>3,Math.floor(n.y)>>3,Math.floor(n.z)>>3);i.equals(this.CloseVoxelsOffset)||(t=!0),this.Uniforms.iOffset64.value.needsUpdate=!0,this.TexInfo64.needsUpdate=!0;for(let e=0,t=0;e<8;++e)for(let e=0;e<8;e++)for(let e=0;e<8;e++)for(let e=0;e<8;e++){const e=t++;7==(this.Data64[e]>>19&7)&&1==(this.GPUInfo64[e]>>30&1)&&1!=(this.GPUInfo64[e]>>31&1)&&h.add(e)}if(0!==h.size&&(t=!0),t){this.CloseVoxels.fill(255);for(let e=-4;e<4;e++)for(let t=-4;t<4;t++)for(let n=-4;n<4;n++){const r=(i.x+e>>3)-this.World.Data64Offset[0],a=(i.y+t>>3)-this.World.Data64Offset[1],o=(i.z+n>>3)-this.World.Data64Offset[2],s=i.x+e&7,l=i.y+t&7,c=i.z+n&7,h=this.GPUInfo64[r<<6|a<<3|o];if(1==(h>>31&1)||0==(h>>29&1))continue;const d=268435455&h,u=this.GPUInfo8[d<<9|s<<6|l<<3|c];if(1==(u>>31&1))continue;const p=268435455&u,f=e+4<<12|t+4<<9|n+4<<6;for(let e=0;e<64;++e)this.CloseVoxels[f|e]=this.GPUData1[p<<6|e]}this.CloseVoxelsOffset.copy(i),this.CloseVoxelsTexture.needsUpdate=!0}if(0===h.size)return;const r=new Set;let a=0;for(const e of h){if(a>1)break;h.delete(e);const t=this.GPUInfo64[e];if(this.Data64[e],1==(t>>31&1)){7==(this.Data64[e]>>19&7)&&(this.GPUInfo64[e]|=1<<29);continue}const n=(4095&t)<<9;let i=!1;for(let e=n;e<n+512;++e){const t=this.GPUInfo8[e];if(0!=(2147483648&t)||0==(1073741824&t))continue;const n=(261632&t)>>9;r.size<this.MaxUpdatingSegments||r.has(n)?(r.add(n),this.GPUInfo8[e]&=~(1<<30)):i=!0}if(!i){a++,this.GPUInfo64[e]&=~(1<<30),this.GPUInfo64[e]|=1<<29;const t=4095&this.GPUInfo64[e];for(let e=0;e<512;++e)this.BoundingBox1Copy[e]=this.GPUBoundingBox1[t<<9|e],this.Info8Copy[e]=this.GPUInfo8[t<<9|e];this.Renderer.Renderer.copyTextureToTexture3D(new Ce(new Ee(0,0,0),new Ee(7,63,0)),new Ee(0,(7&t)<<6,t>>3),this.TexInfo8Copy,this.TexInfo8),this.Renderer.Renderer.copyTextureToTexture3D(new Ce(new Ee(0,0,0),new Ee(7,63,0)),new Ee(0,(7&t)<<6,t>>3),this.TexBoundingBox1Copy,this.TexBoundingBox1)}}for(const e of r){const t=e;for(let t=0;t<32768;++t)this.Data1Copy[t]=this.GPUData1[e<<15|t];for(let t=0;t<1<<18;++t)this.Type1Copy[t]=this.GPUType1[e<<18|t];this.Renderer.Renderer.copyTextureToTexture3D(new Ce(new Ee(0,0,0),new Ee(63,511,0)),new Ee(0,0,t),this.TexData1Copy,this.TexData1),this.Renderer.Renderer.copyTextureToTexture3D(new Ce(new Ee(0,0,0),new Ee(511,511,0)),new Ee(0,0,t),this.TexType1Copy,this.TexType1)}}).bind(this)()}SetKernelSize(e){this.Uniforms.iUpscalingKernelSize.value=e,this.Renderer.UpscalingKernelSize=e,this.Renderer.UpdateSize()}UpdateUniforms(){this.Uniforms.iResolution.value.set(window.innerWidth*this.Renderer.ImageScale,window.innerHeight*this.Renderer.ImageScale),this.Uniforms.iTime.value=window.performance.now(),this.Uniforms.iRotation.value.copy(this.Renderer.Camera.rotation),this.Uniforms.iPosition.value.copy(this.Renderer.Camera.position),this.Uniforms.iPosition.needsUpdate=!0,this.Uniforms.FOV.value=Number.parseFloat(this.Renderer.Camera.fov)*Math.PI/180,this.Uniforms.iSunPosition.value=this.Renderer.BackgroundMaterial.uniforms.iSunPosition.value}}class jl{static DEBUG_LEVELS={ALL:0,DEBUGGER:1,VERBOSE:2,DEBUG:3,TESTING:4,INFO:5,WARNING:6,ERROR:7};static DEBUG_LEVEL=jl.DEBUG_LEVELS.INFO;DeleteAllRegisteredMeshes(){for(const e in Application.Main.Game.World.Regions){const t=Application.Main.Game.World.Regions[e];t.OpaqueMesh&&Application.Main.Renderer.Scene.remove(t.OpaqueMesh),t.TransparentMesh&&Application.Main.Renderer.Scene.remove(t.TransparentMesh)}for(const e in Application.Main.Game.World.VirtualRegions)for(const t in Application.Main.Game.World.VirtualRegions[e]){const n=Application.Main.Game.World.VirtualRegions[e][t];n.OpaqueMesh&&Application.Main.Renderer.Scene.remove(n.OpaqueMesh),n.TransparentMesh&&Application.Main.Renderer.Scene.remove(n.TransparentMesh)}}}var Yl=r(3382),Zl={};Zl.styleTagTransform=Jo(),Zl.setAttributes=jo(),Zl.insert=qo().bind(null,"head"),Zl.domAPI=Vo(),Zl.insertStyleElement=Zo(),Go()(Yl.Z,Zl),Yl.Z&&Yl.Z.locals&&Yl.Z.locals;var Kl=r(7314),Jl={};Jl.styleTagTransform=Jo(),Jl.setAttributes=jo(),Jl.insert=qo().bind(null,"head"),Jl.domAPI=Vo(),Jl.insertStyleElement=Zo(),Go()(Kl.Z,Jl),Kl.Z&&Kl.Z.locals&&Kl.Z.locals;var Ql={};Ql.styleTagTransform=Jo(),Ql.setAttributes=jo(),Ql.insert=qo().bind(null,"head"),Ql.domAPI=Vo(),Ql.insertStyleElement=Zo(),Go()(Al.Z,Ql),Al.Z&&Al.Z.locals&&Al.Z.locals;var $l=r(4436),ec={};ec.styleTagTransform=Jo(),ec.setAttributes=jo(),ec.insert=qo().bind(null,"head"),ec.domAPI=Vo(),ec.insertStyleElement=Zo(),Go()($l.Z,ec),$l.Z&&$l.Z.locals&&$l.Z.locals;const tc=r.p+"cff05d51b2bcc51c4378.BO3",nc=r.p+"e2e8b9f5f84f2bf270b4.BO3",ic=r.p+"0913481dea482ead21aa.BO3",rc=r.p+"0acdae2e58c7ddefc692.BO3",ac=r.p+"594b4f90d18b0be3f5c1.BO3",oc=r.p+"bf1f0d4f726b244d090b.BO3",sc=r.p+"92ae604feac290296e7a.BO3";setTimeout((function(){lc.Initialise()}));class lc{static Version="0.1.12";static Build=60;static Variation=0;static Revision=0;static Initialise(){this.Main=new cc,this.Main.RegisterDependencies()}}window.Application=lc,kl.Application=lc;class cc{constructor(){document.getElementById("LoadingFilesMessage").remove(),this.SharedDebugData=new Float64Array(new SharedArrayBuffer(8192)),this.Structures=[{FilePath:tc,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:nc,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:ic,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:rc,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:ac,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:oc,Offset:{X:0,Y:0,Z:0},Frequency:9},{FilePath:sc,Offset:{X:0,Y:0,Z:0},Frequency:9}],jl.DEBUG_LEVEL<=jl.DEBUG_LEVELS.INFO&&console.time("Initialisation")}async RegisterDependencies(){this.BlockRegistry=new Wl,this.Renderer=new ao,this.World=new bo,this.Game=new hc(this);const e=new Tl,t=new Tl;kl.Events.AddEventListener("Finished",(function(){e.resolve()})),this.Renderer.Events.AddEventListener("TextureLoad",(function(){t.resolve()})),kl.PreInit(),await e,this.Renderer.InitialiseTextures(this.BlockRegistry),await t,this.WorkerLoadingPipeline=new Worker(new URL(r.p+r.u(914),r.b)),this.WorkerLoadingPipelineHandler=new ql,this.Raymarcher=new Xl(this.World,this.Renderer),jl.DEBUG_LEVEL<=jl.DEBUG_LEVELS.INFO&&console.timeEnd("Initialisation")}}class hc{constructor(){this.ControlManager=new Vl,this.ControlManager.Controls.GameControls=new Bl,this.ControlManager.FocusControl("GameControls"),this.GamePointerLockHandler=new Gl(lc.Main.Renderer.Renderer.domElement,lc.Main.Renderer.Camera),this.GameControlHandler=new ll(this.ControlManager.Controls.GameControls,lc.Main.Renderer.Camera,lc.Main.World,lc.Main.BlockRegistry)}}})()})();